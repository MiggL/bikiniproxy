/**
 * 2007-2016 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 *  @author DMConcept <support@dmconcept.fr>
 *  @copyright 2015 DMConcept
 *  @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 *  International Registered Trademark & Property of PrestaShop SA
 *
 * Don't forget to prefix your containers with your own identifier
 * to avoid any conflicts with others containers.
 */

progressBarHandler = {
	id: '',
	start_color: '#00b0ee',
	end_color: '#026799',
	init: function(id, progress_data) {
		this.id = id;
		if(progress_data.start_color && progress_data.end_color){
			this.start_color = progress_data.start_color;
			this.end_color = progress_data.end_color;
		}
		this.launch(progress_data.start, progress_data.end);
	},

	launch: function(start, end) {
		var self = this;
		var el = $(self.id);
		if(self.id !== '' && el.length > 0){
			// start and end are percent value
			if(start === undefined){ var start = 0; }
			if(end === undefined){ var end = 0; }
			el.circleProgress({
				startAngle: -Math.PI / 2,
				animationStartValue: parseInt(start) / 100,
				value: parseInt(end) / 100,
				size: el.width(),
				lineCap: 'round',
				fill: { gradient: [self.start_color, self.end_color], gradientAngle: Math.PI }
			}).on('circle-animation-progress', function(event, progress, stepValue) {
				$(this).find('strong').html(parseInt(100 * stepValue) + '%');
			});
		}
	}
};

configuratorHandler = {
	// Properties
	detail: {},
	qty: 1,
	action: '',
	width_max_tablet: 992,
	query_inputs_choice: 'input[type="radio"], input[type="checkbox"]',
	query_inputs_text: 'input[type="text"]',
	query_inputs_select: 'select',
	query_product_box: '.page-product-box:first',
	query_configurator_block: '#configurator_block > div',
	template_preview: '#tmpl_cart_preview',
	id_module: '#module-configurator-default',
	id_block: '#configurator_block',
	id_preview: '#configurator_preview',
	id_step: '#step_',
	id_option: '#step_option_',
	id_yes_radio: '#yes_radio_',
	id_qty: '#quantity-configurator',
	id_progress_bar: '#configurator-progress',
	class_option_block: '.option_block',
	class_option_group: '.option_group',
	class_step_list: '.step_list',
	class_step_options: '.step_options',
	class_step_group: '.step_group',
	class_footer_container: '.footer-container',
	class_no_radio: '.no_radio',
	class_yes_radio: '.yes_radio',
	class_label_percent: '.percent',
	class_label_pricelist: '.pricelist',
	class_info: '.info',
	class_info_fancybox: '.info-fb',
	open_collapse: false,
	// Methods
	init: function() {
		this.initScroll();
		// progress addJsDef
		this.initProgressBar(progress_data);
		this.bindAll();
		// addJsDef
		this.detail = detail;
		this.action = action;

		this.buildSteps();
	},
	initScroll: function() {
		var self = this;
		// Scroll top
		var preview = $(self.id_preview);
		var footer = $(self.query_product_box);
		var elementPosition = preview.offset();
		$(window).scroll(function() {
			if ($(window).width() >= self.width_max_tablet) {
				var elementTopPosition = preview.offset().top;
				var elementBottomPosition = preview.offset().top + preview.outerHeight(true);
				if($(self.query_configurator_block).height() < preview.height()){
					preview.removeAttr('style');
				} else if (elementBottomPosition > (footer.offset().top - 10)) {
					preview.removeAttr('style');
					preview.css('position', 'absolute').css('bottom', '-'+(footer.position().top-70)+'px');
					if ($(window).scrollTop() + 30 < elementTopPosition) {
						preview.removeAttr('style');
						preview.css('position', 'relative').css('top', '0px');
					}
				} else if ($(window).scrollTop() > (elementPosition.top - 8)) {
					preview.removeAttr('style');
					preview.css('position', 'relative').css('top', '0px');
				} else {
					preview.removeAttr('style');
					preview.css('position', 'relative').css('top', '0');
				}
			}
		});
	},
	initProgressBar: function(progress_data) {
		progressBarHandler.init(this.id_progress_bar, progress_data);
	},
	bindAll: function() {
		var self = this;
		// Popover
		$(self.class_info).popover({
			html: true,
			placement: 'top',
			trigger: 'click hover'
		});
		$(self.id_block + ' ' + self.class_option_block).popover({
			html: true,
			placement: 'top',
			trigger: 'hover'
		});
		// Fancybox
		$(self.class_info_fancybox).on('click', function(){
			if (!!$.prototype.fancybox){
				$.fancybox.open([
				{
					'openEffect': 'elastic',
					'closeEffect': 'elastic',
					'type': 'inline',
					'autoScale': true,
					'minHeight': 30,
					'content': $(this).data('content')
				}]);
			}
		});
		// Click on color or texture launch click on radio
		$(self.class_option_block).on('click', function(e) {
			if ($(e.target).get(0).tagName !== 'INPUT') {
				$(this).find(self.query_inputs_choice).trigger('click');
				self.resetUniform();
			}
		});
		// Click on option launch update, if texture or color, add a class used by css
		$(self.class_step_options + ' ' + self.query_inputs_choice).on('click', function() {
			self.processSelectOptionBlock($(this));
			self.update($(this));
		});
		// Set value in input text, update
		$(self.class_step_options + ' ' + self.query_inputs_text + ', ' +
				self.class_step_options + ' ' + self.query_inputs_select).on('change', function() {
			if ($(this).get(0).tagName === 'SELECT') {
				self.processSelectValues($(this));
			} else {
				self.processInputTextValues($(this));
			}
		});
		// Click on no_radio, remove options
		$(self.class_no_radio).on('click', function() {
			self.processNoRadio($(this));
		});
	},
	lock: function() {
		this.unbindAll();
		$('input,select').not(this.class_no_radio).attr('disabled', true);
	},
	unlock: function() {
		this.bindAll();
		$('input,select').attr('disabled', false);
	},
	unbindAll: function() {
		var self = this;
		$(self.class_step_options + ' ' + self.query_inputs_text).unbind('change');
		$(self.class_step_options + ' ' + self.query_inputs_select).unbind('change');
		$(self.class_step_options + ' ' + self.query_inputs_choice).unbind('click');
		$(self.class_option_block).unbind('click');
		$(self.class_no_radio).unbind('click');
		$(window).unbind('click');
	},
	buildSteps: function() {
		// Unbind => No problem to trigger some radio/checkbox manually
		this.unbindAll();
		var detail = this.detail;
		// Hide all steps/options
		$(this.class_step_group + ', ' + this.class_option_group).hide();
		// For each step to display
		for (var id_step in detail) {
			$(this.id_step + id_step).show();
			this.open_collapse = false;
			// For each option to display
			for (var id_option in detail[id_step]['options']) {
				this.processUpdateLabelPrice(id_step, detail[id_step]['options'][id_option]);
				$(this.id_option + id_step + '_' + id_option).show();
				// Option is selected
				var input = $(this.id_option + id_step + '_' + id_option).find(this.query_inputs_choice + ', ' + this.query_inputs_text);
				if (input.attr('type') === 'text') {
					this.processText(id_step, id_option, input);
				} else {
					this.processRadioCheckbox(id_step, id_option, input);
				}
			}
			// Trigger collapse when step is displayed by yes button
			if (this.open_collapse) {
				$(this.id_yes_radio + id_step).trigger('click');
				this.open_collapse = false;
			}
		}
		this.resetUniform();
		// Bind all event again when build is finished
		this.bindAll();
	},
	processNoRadio: function(radio) {
		var self = this;
		radio.closest('.row').find(self.class_step_options).find(self.query_inputs_choice).each(function() {
			$(this).prop('checked', false);
			self.processSelectOptionBlock($(this));
		});
		this.update(radio, 'resetStep');
	},
	processInputTextValues: function(input) {
		input.parents(this.class_option_group).removeClass('form-error');
		input.parents(this.class_option_group).removeClass('form-ok');
		var min_value = input.data('min');
		var max_value = input.data('max');
		var launchUpdate = true;
		if (min_value !== undefined && max_value !== undefined) {
			var val = input.val();
			if ((val < min_value || val > max_value) && val !== '') {
				launchUpdate = false;
				input.parents(this.class_option_group).addClass('form-error');
			} else if (val !== '') {
				input.parents(this.class_option_group).addClass('form-ok');
			}
		}
		if (launchUpdate) {
			this.update(input);
		}
	},
	processSelectValues: function(select) {
		this.update(select);
	},
	processRadioCheckbox: function(id_step, id_option, input) {
		if (this.detail[id_step]['options'][id_option]['selected']) {
			if (!input.is(':checked')) {
				input.trigger('click');
			}
			this.processSelectOptionBlock(input);
			if ($(this.id_yes_radio + id_step).length > 0 && !$(this.id_yes_radio + id_step).is(':checked')) {
				this.open_collapse = true;
			}
		}
	},
	processText: function(id_step, id_option, input) {
		// Input text has value
		if (this.detail[id_step]['options'][id_option]['value']) {
			this.open_collapse = true;
			input.val(this.detail[id_step]['options'][id_option]['value']);
		}
	},
	processUpdateLabelPrice: function(id_step, option) {
		if (option['display_amount']) {
			var query = this.id_option + id_step + '_' + option['id'] + ' ';
			$(query + this.class_label_percent + ', ' + query + this.class_label_pricelist).html('+ ' + option['display_amount']);
		}
	},
	update: function(input, action) {
		var self = this;
		var data = {
			ajax: 1,
			submitUpdateOption: 1,
			action: 'add',
			value: '',
			dimension: 1,
			step: 0,
			option: 0
		};

		$(self.id_preview).addClass('loading');
		self.lock();

		self.qty = parseInt($(self.id_qty).val());

		data.step = parseInt(input.data('step'));
		if (input.attr('type') === 'text' || input.get(0).tagName === 'SELECT') {
			data.value = input.val();
			data.dimension = parseInt(input.data('dimension'));
			data.option = parseInt(input.data('option'));
			if (data.value === '') {
				data.action = 'remove';
			}
		} else {
			if (action === undefined && input.attr('type') === 'checkbox' && !input.is(':checked')) {
				data.action = 'remove';
			}
			data.option = parseInt(input.val());
		}

		if (action !== undefined) {
			data.action = action;
		}

		$.post(self.action, data, function(data) {
			data = JSON.parse(data);

			self.unlock();
			$(self.id_preview).removeClass('loading');

			if (data.success) {
				self.detail = data.detail;
				self.buildSteps();
				$(self.id_preview).html(data.previewHtml);
				$(self.id_qty).val(self.qty);
				progressBarHandler.launch(data.progress_start, data.progress_end);
			}
		});
	},
	processSelectOptionBlock: function(input) {
		var container = input.parents(this.class_step_options);
		if (input.attr('type') === 'radio') {
			container.find(this.class_option_block).removeClass('selected');
			input.parents(this.class_option_block).addClass('selected');
		} else if (!input.is(':checked')) {
			input.parents(this.class_option_block).removeClass('selected');
		} else {
			input.parents(this.class_option_block).addClass('selected');
		}
	},
	resetUniform: function() {
		// Trigger cause some problems with uniform plugin
		if ($.uniform !== undefined) {
			$.uniform.restore(this.query_inputs_select);
			$.uniform.restore(this.query_inputs_choice);
			$(this.query_inputs_choice).uniform();
			$(this.query_inputs_select).uniform();
		}
	}
};

productPriceBlockHandler = {
	// Properties
	id_add_to_cart: '#add_to_cart',
	id_buy_block: '#buy_block',
	class_configure: '.configure_link',
	class_box_cart: '.box-cart-bottom',
	class_from_price: '.from_price',
	class_our_price_display: '.our_price_display',
	class_product_container: '.product-container',
	class_content_price: '.content_price',
	class_btns_container: '.button-container',
	class_product_attributes: '.product_attributes',
	class_ajax_add_to_cart: '.ajax_add_to_cart_button',
	list_cart_btn_classes: 'button btn btn-default configure_link',
	// Methods
	init: function() {
		this.bindAll();
		this.processChangeHtmlProductPrice();
	},
	bindAll: function() {

	},
	getConfigureButton: function(options) {
		return $('<a/>')
				.attr({
					'class': this.list_cart_btn_classes,
					'title': options.l_configure,
					'href': options.link
				})
				.html($('<span/>').html(options.l_configure))
				;
	},
	processChangeHtmlProductPrice: function() {
		var self = this;
		$(self.class_from_price).each(function() {
			var el = $(this);
			var container = $(this).parents(self.class_content_price);
			container.prepend(el.clone());
			el.remove();
		});
	},
	// For product listing ... No hooks to overriding button :(
	processSetHtmlLinkToConfigurator: function(options) {
		/*var self = this;
		var link_el = self.getConfigureButton(options);
		$(self.class_from_price + '_' + options.id_product).each(function() {
			var el = $(this);
			var container = el.parents(self.class_product_container);
			var btns_container = container.find(self.class_btns_container);
			if (btns_container.length > 0 && btns_container.find(self.class_configure).length === 0) {
				btns_container.prepend(link_el);
			}
		});*/
	}
};

orderSummaryHandler = {
	// Properties
	cartDetails: {},
	// /!\ Warning if updated, used for cartsummary AND blockcart
	name_id_product: "product_",
	id_order_detail: "#order-detail-content",
	class_order_item: "tbody tr.item",
	class_cart_item: ".cart_item",
	class_blockcart_item: ".cart_block dl dt",
	class_cart_product: ".cart_product",
	class_cart_description: ".cart_description",
	class_blockcart_info: ".cart-info",
	// Methods
	init: function(context, cDetails) {
		if (cDetails !== undefined) {
			this.bindAll();
			// addJsDef
			this.cartDetails = cDetails;
			if (context === 'order') {
				this.processChangeHtmlCartSummary();
			} else if (context === 'history') {
				this.processChangeHtmlHistory();
			} else if (context === 'blockcart') {
				this.processChangeHtmlBlockCart();
			}
		}
	},
	getDetail: function(cartDetails) {
		return JSON.parse(cartDetails.detail);
	},
	bindAll: function() {

	},
	processChangeHtmlCartSummary: function() {
		var self = this;
		$(self.class_cart_item).each(function() {
			var id = $(this).attr('id');
			for (var i in self.cartDetails) {
				var cartDetail = self.cartDetails[i];
				if (id.indexOf(self.name_id_product + cartDetail.id_product) !== -1) {
					self.processHtmlCartItem(cartDetail, $(this));
				}
			}
		});
	},
	processHtmlCartItem: function(cartDetail, cart_item) {
		var cart_description = cart_item.find(this.class_cart_description);
		var html = cart_description.html();
		if (html.indexOf(cartDetail.attribute_key) !== -1) {
			html = this.getUpdatedHtml(html, cartDetail);
			cart_description.html(html);
		}
	},
	processChangeHtmlBlockCart: function() {
		var self = this;
		$(self.class_blockcart_item).each(function() {
			var id = $(this).data('id');
			for (var i in self.cartDetails) {
				var cartDetail = self.cartDetails[i];
				if (id.indexOf(self.name_id_product + cartDetail.id_product) !== -1) {
					self.processHtmlBlockCartItem(cartDetail, $(this));
				}
			}
		});
	},
	processHtmlBlockCartItem: function(cartDetail, cart_item) {
		var cart_description = cart_item.find(this.class_blockcart_info);
		var html = cart_description.html();
		if (html.indexOf(cartDetail.attribute_key) !== -1) {
			html = this.getUpdatedHtml(html, cartDetail);
			cart_description.html(html);
		}
	},
	processChangeHtmlHistory: function() {
		var self = this;
		$(self.id_order_detail + ' ' + self.class_order_item).each(function() {
			var html = $(this).html();
			for (var i in self.cartDetails) {
				var cartDetail = self.cartDetails[i];
				self.processHtmlHistoryItem(cartDetail, $(this));
			}
		});
	},
	processHtmlHistoryItem: function(cartDetail, order_item) {
		var html = order_item.html();
		var regexBr = new RegExp('&lt;br\/&gt;', 'gm');
		order_item.html(html.replace(regexBr, "<br/>"));
	},
	getUpdatedHtml: function(html, cartDetail) {
		var regex = new RegExp(cartDetail.attribute_key, 'g');
		var regexLink = new RegExp('#\/[0-9]*-*configurator-' + cartDetail.attribute_key, 'g');
		html = html.replace(regexLink, "");
		return html.replace(regex, this.getHtmlDetail(cartDetail));
	},
	getHtmlDetail: function(cartDetail) {
		var detail = this.getDetail(cartDetail);
		var list = $('<ul/>').addClass('configurator');
		for (var id_step in detail) {
			var array_options = new Array();
			var display = false;
			for (var id_option in detail[id_step]['options']) {
				if (detail[id_step]['options'][id_option]['value'] !== '' && detail[id_step]['options'][id_option]['value'] !== false) {
					array_options.push(
							detail[id_step]['options'][id_option]['name'] +
							' : ' +
							detail[id_step]['options'][id_option]['value'] +
							detail[id_step]['input_suffix']
							);
					display = true;
				} else if (detail[id_step]['options'][id_option]['selected']) {
					array_options.push(detail[id_step]['options'][id_option]['name']);
					display = true;
				}
			}
			if (display) {
				var li = $('<li/>');
				var step_name = $('<strong/>').html(detail[id_step]['name'] + ' : ');
				li.append(step_name);
				li.append(array_options.join(', '));
				list.append(li);
			}
		}
		return list.get(0).outerHTML;
	}
};

// Launcher
(function($) {
	$(function() {
		productPriceBlockHandler.init();
		if ($('body').hasClass('order')  || $('body').hasClass('order-opc')) {
			if (typeof (cartDetails) !== 'undefined') {
				orderSummaryHandler.init("order", cartDetails);
			}
		} else if ($('body').hasClass('product')) {
			if (typeof (detail) !== 'undefined') {
				configuratorHandler.init();
			}
		}
		// Always check for blockcart
		if(typeof (cartDetails) !== 'undefined') {
			orderSummaryHandler.init("blockcart", cartDetails);
		}
	});
})(jQuery);