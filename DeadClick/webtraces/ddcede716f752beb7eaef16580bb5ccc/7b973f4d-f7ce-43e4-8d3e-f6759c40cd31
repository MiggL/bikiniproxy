<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
    <head>
        <title></title>
        <script type="text/javascript" src="https://static.ingenie.fr/js/iframeResizer/easyXDM.min.js"></script>
        <script type="text/javascript">
			var socket = new easyXDM.Socket({
				onReady:  function(){
					iframe = document.createElement("iframe");
                    iframe.frameBorder = 0;
                    document.body.appendChild(iframe);
                    iframe.src = easyXDM.query.url;
                    /*
                    if (typeof console !== 'undefined') {
                        console.log(iframe.src);
                    }*/
					//debugger;
					var timer;
                    iframe.onload = function() {
						try {
							var d = iframe.contentWindow.document;
							var originalHeight = d.body.clientHeight || d.body.offsetHeight || d.body.scrollHeight;

							// We want to monitor the document for resize events in case of the use of accordions and such,
							// but unfortunately only the window node emits the resize event, and we need the body's.
							// The only solution then is to use polling..
							var minHeight = 100;
							if (getQueryVariable(iframe.src, 'mini') != false) {
								minHeight = 250;
							}
							// Lets start the polling if not all ready started
							if(!timer) {
								timer = setInterval(function() {
									try {
										var minHeight = 100;
										if (getQueryVariable(iframe.src, 'mini') != false) {
											minHeight = 250;
										}
										var d = iframe.contentWindow.document;
										var newHeight = d.body.clientHeight || d.body.offsetHeight || d.body.scrollHeight;
										if(newHeight != originalHeight) {
											// The height has changed since last we checked
											originalHeight = newHeight;
											if (originalHeight < minHeight) {
												originalHeight = minHeight;
											}
											socket.postMessage(originalHeight);
										}
									} catch(e) {
										// Si c'est un vieux navigateur => on met la taille qu'on veux et on remet l'overflow
										socket.postMessage(1300);
										iframe.style.overflow = 'auto';
									}
								}, 300);
							}
							if (originalHeight < minHeight) {
								originalHeight = minHeight;
							}
							// Send the first message
							socket.postMessage(originalHeight);
						} catch (e) {

							// Si on est en secure on va se faire jeter
							// On envoie 1000px et on remet l'overflow
							socket.postMessage(1300);
							iframe.style.overflow = 'auto';

						}
                    };
					//socket.postMessage(document.body.scrollHeight);
			   }
			});


			function getQueryVariable(query, variable) {
				var vars = query.split("&");
				for (var i = 0; i < vars.length; i++) {
					var pair = vars[i].split("=");
					if (pair[0] == variable) {
						return unescape(pair[1]);
					}
				}
				return false;
			}


        </script>
        <style type="text/css">
            html, body {
                overflow: hidden;
                margin: 0px;
                padding: 0px;
                width: 100%;
                height: 100%;
            }
            iframe {
                width: 100%;
                height: 100%;
                border: 0px;
				overflow: hidden;
            }
        </style>
    </head>

	<body>

	</body>
</html>
