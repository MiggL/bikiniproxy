	
/**
Dynamic XMLHttp lookups based on Google Suggest XMLRPC code. See:

https://serversideguy.blogspot.com/2004/12/google-suggest-dissected.html
https://www.fastbugtrack.com/misc/google/ac.js
https://www.google.com/webhp?complete=1&hl=en

I stripped out a lot of the cool functionality (like variable timers and
highlighting parts of the search result). That was mainly to make this a little
easier to digest. Feel free to look at the JavaScript code that Chris Justus
reformatted (see the link above) and put back anything that's missing.

In version 1.2 support was added for capturing keypresses of arrow keys,
the enter key, and the tab key while the input field has focus.

You can use these scripts in any way you'd like, just don't pretend like
you wrote them yourself.

version 1.2
January 5, 2005
Julian Robichaux, https://www.nsftools.com
*/

//Juan Romero: This file is being used 11/18/2008 (trying to determine resources)

var queryField;
var divName;
var ifName;
var lastVal = "";
var val = ""
var xmlHttp;
var cache = new Object();
var searching = false;
var globalDiv;
var divFormatted = false;
var form;
var resourceServer1;

/**
The InitQueryCode function should be called by the <body onload> event, passing
at least the queryFieldName and lookupURLPrefix parameters, where:

queryFieldName = the name of the form field we're using for lookups
lookupURLPrefix = the URL we'll use to pass the query string back to the server,
                  which will be immediately proceeded by the query string

For example:
<body onload="InitQueryCode('lookupField', 'https://lookupserver/QueryHandler?q=')">

The above example will monitor the input box called "lookupField" on this page,
and when it changes the contents of the field will be passed to lookupserver like:
https://lookupserver/QueryHandler?q=fieldValue

The https://lookupserver/QueryHandler will be expected to return a text response
with a single line of text that calls the showQueryDiv function, in a format like:
showQueryDiv("smi", new Array("John Smith", "Mary Smith"), new Array("555-1212", "555-1234"));

*/
//added formName param to submit the form if the user enters text and does not elect to select an ajax selection
function InitQueryCode (queryFieldName, hiddenDivName, formName)
{
  queryField = document.getElementById(queryFieldName);
  queryField.onblur = hideDiv;
  queryField.onkeydown = keypressHandler;
  //queryField.onchange = changeHandler;
    
  // for some reason, Firefox 1.0 doesn't allow us to set autocomplete to off
  // this way, so you should manually set autocomplete="off" in the input tag
  // if you can -- we'll try to set it here in case you forget
  queryField.autocomplete = "off";
  
  if (hiddenDivName)
    divName = hiddenDivName;
  else
    divName = "querydiv";
  ifName = "queryiframe";

  if(formName)
	form = document.getElementById(formName);
  
  // add a blank value to the cache (so we don't try to do a lookup when the
  // field is empty) and start checking for changes to the input field
  addToCache("", new Array());
  setTimeout("mainLoop()", 100);
}


//added formName param to submit the form if the user enters text and does not elect to select an ajax selection
function InitDrugPillImprintQueryCode (queryFieldName, hiddenDivName, formName)
{
  queryField = document.getElementById(queryFieldName);
  queryField.onblur = hideDiv;
  queryField.onkeydown = keypressHandler;
  //queryField.onchange = changeHandler;
    
  // for some reason, Firefox 1.0 doesn't allow us to set autocomplete to off
  // this way, so you should manually set autocomplete="off" in the input tag
  // if you can -- we'll try to set it here in case you forget
  queryField.autocomplete = "off";
  
  if (hiddenDivName)
    divName = hiddenDivName;
  else
    divName = "querydivImp";
  ifName = "queryiframeImp";

  if(formName)
	form = document.getElementById(formName);
  
  // add a blank value to the cache (so we don't try to do a lookup when the
  // field is empty) and start checking for changes to the input field
  addToCache("", new Array());
  setTimeout("mainLoop()", 100);
}


/**
This is a helper function that just adds results to our cache, to avoid
repeat lookups.
*/
function addToCache (queryString, resultArray)
{
  cache[queryString] = new Array(resultArray);
}


/**
This is the function that monitors the queryField, and calls the lookup
functions when the queryField value changes.
*/



/**
Get the <DIV> we're using to display the lookup results, and create the
<DIV> if it doesn't already exist.
*/
function getDiv (divID)
{
  if (!globalDiv) {
    // if the div doesn't exist on the page already, create it
    if (!document.getElementById(divID)) {
      var newNode = document.createElement("div");
      newNode.setAttribute("id", divID);
      document.body.appendChild(newNode);
    }
    
    // set the globalDiv reference
    globalDiv = document.getElementById(divID);
    
    // figure out where the top corner of the div should be, based on the
    // bottom left corner of the input field
	/*
    var x = queryField.offsetLeft;
    var y = queryField.offsetTop + queryField.offsetHeight;
    var parent = queryField;
    while (parent.offsetParent) {
      parent = parent.offsetParent;
      x += parent.offsetLeft;
      y += parent.offsetTop;
    }
	*/
    
    // add some formatting to the div, if we haven't already
    /*if (!divFormatted) {
      globalDiv.style.backgroundColor = DIV_BG_COLOR;
      globalDiv.style.fontFamily = DIV_FONT;
      globalDiv.style.padding = DIV_PADDING;
      globalDiv.style.border = DIV_BORDER;
      globalDiv.style.width =  DIV_WIDTH;
      globalDiv.style.fontSize = DIV_FONTSIZE;
  
      globalDiv.style.position = "absolute";
      globalDiv.style.left = x + "px";
      globalDiv.style.top = y + "px";
      globalDiv.style.visibility = "hidden";
      globalDiv.style.zIndex = 10000;
      
      divFormatted = true;
    }*/
  }
  
  return globalDiv;
}


/**
This is the function that should be returned by the XMLHTTP call. It will
format and display the lookup results.
*/
function showQueryDiv(resultArray)
{

  if(resultArray == null) {
    hideDiv();
    return;
  }

    eval(resultArray);

  //hide the suggestions when the user deletes all text
  if(queryField.value.length == 0) {
	hideDiv();
	return true;
  }

  var div = getDiv(divName);
  
  // remove any results that are already there
  while (div.childNodes.length > 0)
    div.removeChild(div.childNodes[0]);
  
  //add the results from top 200 first
  
  //TOP DRUGS
if(resultArray.hasOwnProperty('d'))
{
  if(resultArray.d[0] != null)
  {
      for (var j = 0; j < resultArray.d[0].length; j++)
      {
      
        // each result will be contained within its own div
        var result = document.createElement("div");
        //result.style.cursor = "pointer";
        //result.style.padding = "1px 1px 1px 1px";
        result.className = "topDrug";
        _unhighlightResult(result);
        result.onmousedown = selectResult;
        result.onmouseover = highlightResult;
        result.onmouseout = unhighlightResult;

        //var result1 = document.createElement("span");
        var result1 = document.createElement("p");
        //result1.className = "result1";
        //result1.style.textAlign = "left";
        //result1.style.fontWeight = "normal";
        result1.innerHTML = resultArray.d[0][j];
        result.appendChild(result1);

        div.appendChild(result);
      }
    }
  //TOP VITAMINS
//   for (var j = 0; j < resultArray[1].length; j++)
//  {
//    // each result will be contained within its own div
//    var result = document.createElement("div");
//    result.className = "topVitamin";
//  	_unhighlightResult(result);
//    result.onmousedown = selectResult;
//    result.onmouseover = highlightResult;
//    result.onmouseout = unhighlightResult;

//    var result1 = document.createElement("p");
//    result1.innerHTML = resultArray[1][j];
//    
//    result.appendChild(result1);

//    div.appendChild(result);
//  }

  // add an entry for each of the results in the resultArray
  //OTHER DRUGS
  
  if(resultArray.d[1] != null)
  {
      for (var i = 0; i < resultArray.d[1].length; i++)
      {
      
        // each result will be contained within its own div
        var result = document.createElement("div");
        //result.className = "findDrug";
        //result.style.cursor = "pointer";
        //result.style.padding = "1px 1px 1px 1px";
        _unhighlightResult(result);
        result.onmousedown = selectResult;
        result.onmouseover = highlightResult;
        result.onmouseout = unhighlightResult;

        var result1 = document.createElement("p");
        //result1.className = "result1";
        //result1.style.textAlign = "left";
        //result1.style.fontWeight = "normal";
        result1.innerHTML = resultArray.d[1][i];
       
        result.appendChild(result1);

        div.appendChild(result);
      }
  }
} 
//  // add an entry for each of the results in the resultArray
//  //OTHER VITAMINS
//  for (var j = 0; j < resultArray[3].length; j++)
//  {
//    // each result will be contained within its own div
//    var result = document.createElement("div");
//    result.className = "findVitamin";
//    _unhighlightResult(result);
//    result.onmousedown = selectResult;
//    result.onmouseover = highlightResult;
//    result.onmouseout = unhighlightResult;

//    var result1 = document.createElement("p");
//    
//   	result1.innerHTML = resultArray[3][j];
//   	
//   	result.appendChild(result1);

//    div.appendChild(result);
//  }
// 
  
  // if this resultset isn't already in our cache, add it
  var isCached = cache[lastVal];
  if (!isCached)
    addToCache(lastVal, resultArray);
  
  // display the div if we had at least one result
  //showDiv((resultArray[0].length > 0 || resultArray[1].length > 0 || resultArray[2].length > 0 || resultArray[3].length > 0));
 
    if(resultArray.hasOwnProperty('d'))
    {
        if(resultArray.d[0] != null && resultArray.d[1] != null)
        {
            showDiv((resultArray.d[0].length > 0 || resultArray.d[1].length > 0));
        }
    }
}


function showQueryDivForBoots(resultArray)
{
  if(resultArray == null) {
    hideDiv();
    return;
  }

    eval(resultArray);

  //hide the suggestions when the user deletes all text
  if(queryField.value.length == 0) {
	hideDiv();
	return true;
  }

  var div = getDiv(divName);
  
  // remove any results that are already there
  while (div.childNodes.length > 0)
    div.removeChild(div.childNodes[0]);
  
  //add the results from boots drugs
  
if(resultArray.hasOwnProperty('d'))
{
  if(resultArray.d[0] != null)
  {
      for (var j = 0; j < resultArray.d[0].length; j++)
      {
      
        // each result will be contained within its own div
        var result = document.createElement("div");
        result.className = "topBootsDrug";
        _unhighlightResult(result);
        result.onmousedown = selectResult;
        result.onmouseover = highlightResult;
        result.onmouseout = unhighlightResult;

        var result1 = document.createElement("p");
        result1.innerHTML = resultArray.d[0][j];
        result.appendChild(result1);

        div.appendChild(result);
      }
    }
    
  //TicTac DRUGS
  
  if(resultArray.d[1] != null)
  {
      for (var i = 0; i < resultArray.d[1].length; i++)
      {
        var result = document.createElement("div");
        _unhighlightResult(result);
        result.onmousedown = selectResult;
        result.onmouseover = highlightResult;
        result.onmouseout = unhighlightResult;

        var result1 = document.createElement("p");
        result1.innerHTML = resultArray.d[1][i];
       
        result.appendChild(result1);

        div.appendChild(result);
      }
  }
} 
  
  // if this resultset isn't already in our cache, add it
  var isCached = cache[lastVal];
  if (!isCached)
    addToCache(lastVal, resultArray);

    if(resultArray.hasOwnProperty('d'))
    {
        if(resultArray.d[0] != null && resultArray.d[1] != null)
        {
            showDiv((resultArray.d[0].length > 0 || resultArray.d[1].length > 0));
        }
    }
}

/*
this function applies the already generated server side HTML to the suggestion box
*/
function showQueryDivHTML(resultArray)
{
	var div = getDiv(divName);

	div.innerHTML = "";

	//hide the suggestions when the user deletes all text
	if(queryField.value.length == 0) {
		hideDiv();
		return true;
	}

	if(resultArray == null || resultArray.value.length == 0) {
		hideDiv();
		return;
	}

	div.innerHTML = resultArray.value;

	// if this resultset isn't already in our cache, add it
	var isCached = cache[lastVal];
	if (!isCached)
		addToCache(lastVal, resultArray);

	 // display the div if we had at least one result
	 showDiv(resultArray.value.length > 0);
}


/**
This is called whenever the user clicks one of the lookup results.
It puts the value of the result in the queryField and hides the
lookup div.
*/
function selectResult()
{
  _selectResult(this);
}


/** This actually fills the field with the selected result and hides the div */
function _selectResult(item)
{
  var para = item.getElementsByTagName("p");
  if (para) {
    for (var i = 0; i < para.length; i++) {
      //if (spans[i].className == "result1") {
		if(para[i].textContent){
			queryField.value = para[i].textContent;	//for firefox browsers
			//queryField.value = item.Id;	//for firefox browsers
		}
		else{
			//queryField.value = item.Id;	//for IE browsers
			queryField.value = item.innerText;
        }
        lastVal = val = queryField.value;
        searching = false;
        mainLoop();
        queryField.focus();
        showDiv(false);
        return;
      //}
    }
  }
}


/**
This is called when a user mouses over a lookup result
*/
function highlightResult()
{
  _highlightResult(this);
}

/** This actually highlights the selected result */
function _highlightResult(item)
{
    //alert(item.className);
	//item.style.backgroundColor = DIV_HIGHLIGHT_COLOR;
	//the second check is kind of redundant but since the highlight function is called twice
	//in the code it is needed.
	if(item.className == "topDrug" || item.className == "selectedTopDrug")
	{
		item.className = "selectedTopDrug";
	}
	else if(item.className == "topBootsDrug" || item.className == "selectedTopBootsDrug")
	{
		item.className = "selectedTopBootsDrug";
	}
//	else if(item.className == "topVitamin" || item.className == "selectedTopVitamin")
//	{
//	    item.className = "selectedTopVitamin"
//	}
//	else if(item.className == "findDrug" || item.className == "selectedDrug")
//	{
//		item.className = "selectedDrug";
//	}
//	else if(item.className == "findVitamin" || item.className == "selectedVitamin")
//	{
//	    item.className = "selectedVitamin";
//	}
	else
	{
	    item.className = "selected";
	}
}


/**
This is called when a user mouses away from a lookup result
*/
function unhighlightResult()
{
  _unhighlightResult(this);
}

/** This actually unhighlights the selected result */
function _unhighlightResult(item)
{
	//item.style.backgroundColor = DIV_BG_COLOR;
	if(item.className == "selectedTopDrug" || item.className == "topDrug")
	{
		item.className = "topDrug";
	}
	else if(item.className == "selectedTopBootsDrug" || item.className == "topBootsDrug")
	{
		item.className = "topBootsDrug";
	}
//	else if(item.className == "topVitamin"  || item.className == "selectedTopVitamin")
//	{
//	    item.className = "topVitamin"
//	}
//	else if(item.className == "findDrug" || item.className == "selectedDrug")
//	{
//		item.className = "findDrug";
//	}
//	else if(item.className == "findVitamin" || item.className == "selectedVitamin")
//	{
//	    item.className = "findVitamin";
//	}
	else
	{
		item.className = "";
	}
}


/**
This either shows or hides the lookup div, depending on the value of
the "show" parameter.
*/
function showDiv (show)
{
  var div = getDiv(divName);
  if (show) {
    //div.style.visibility = "visible";
  	div.style.display = "block";
  }
  else {
    //div.style.visibility = "hidden";
  	div.style.display = "none";
  }
  
  //do not need to call this iframe anymore, it is static iframe with suggestion div
  //adjustiFrame();
}


/**
We originally used showDiv as the function that was called by the onBlur
event of the field, but it turns out that Firefox will pass an event as the first
parameter of the function, which would cause the div to always be visible.
So onBlur now calls hideDiv instead.
*/
function hideDiv ()
{
  showDiv(false);
}


/**
Use an "iFrame shim" to deal with problems where the lookup div shows up behind
selection list elements, if they're below the queryField. The problem and solution are
described at:

https://dotnetjunkies.com/WebLog/jking/archive/2003/07/21/488.aspx
https://dotnetjunkies.com/WebLog/jking/archive/2003/10/30/2975.aspx
*/
function adjustiFrame()
{
  if (!document.getElementById(ifName)) {
    var newNode = document.createElement("iFrame");
    newNode.setAttribute("id", ifName);
    newNode.setAttribute("src", "javascript:false;");
    newNode.setAttribute("scrolling", "no");
    newNode.setAttribute("frameborder", "0");
    //document.body.appendChild(newNode);
	var div = getDiv(divName);
	div.appendChild(newNode);
  }
  
  //iFrameDiv = document.getElementById(ifName);
  //var div = getDiv(divName);
  
  /*try {
    iFrameDiv.style.position = "absolute";
    iFrameDiv.style.width = div.offsetWidth;
    iFrameDiv.style.height = div.offsetHeight;
    iFrameDiv.style.top = div.style.top;
    iFrameDiv.style.left = div.style.left;
    iFrameDiv.style.zIndex = div.style.zIndex - 1;
    iFrameDiv.style.visibility = div.style.visibility;
  } catch(e) {
  }*/
}

/**
This is the key handler function, for when a user presses the up arrow,
down arrow, tab key, or enter key from the input field.
*/
function keypressHandler (evt)
{
  // don't do anything if the div is hidden
  var div = getDiv(divName);
  //if (div.style.visibility == "hidden")
  if(div.style.display == "none")
    return true;

  //hide the suggestions when the user deletes all text
  if(queryField.value.length == 0) {
	hideDiv();
	return true;
  }
  
  // make sure we have a valid event variable
  if(!evt && window.event) {
    evt = window.event;
  }
  var key = evt.keyCode;
  
  // if this key isn't one of the ones we care about, just return
  var KEYUP = 38;
  var KEYDOWN = 40;
  var KEYENTER = 13;
  var KEYTAB = 9;

  if ((key != KEYUP) && (key != KEYDOWN) && (key != KEYENTER) && (key != KEYTAB))
    return true;
  
  // get the span that's currently selected, and perform an appropriate action
  var selNum = getSelectedSpanNum(div);
  var selSpan = setSelectedSpan(div, selNum);

  //if nothing is selected and the user presses enter submit the form
  if(selNum < 0 && key == KEYENTER && form)
	form.submit();
  
  if ((key == KEYENTER) || (key == KEYTAB)) {
    if (selSpan)
      _selectResult(selSpan);
    evt.cancelBubble=true;
    return false;
  } else {
    if (key == KEYUP)
      selSpan = setSelectedSpan(div, selNum - 1);
    if (key == KEYDOWN)
      selSpan = setSelectedSpan(div, selNum + 1);
    //if (selSpan)
      //_highlightResult(selSpan);	//redundant highlight call
  }
  
  showDiv(true);
  return true;
}

/**
This is the onchange event handler 
*/
function changeHandler (evt)
{
	document.getElementById('drug_query').value = "";
	//document.getElementById('txtTopicID').value = "";
	//document.getElementById('txtSecTopicIDs').value ="";
}


/**
Get the number of the result that's currently selected/highlighted
(the first result is 0, the second is 1, etc.)
*/
function getSelectedSpanNum (div)
{
  var count = -1;
  var spans = div.getElementsByTagName("div");
  if (spans) {
    for (var i = 0; i < spans.length; i++) {
      count++;
      //if (spans[i].style.backgroundColor != div.style.backgroundColor)
	  if(spans[i].className == "selected" || spans[i].className == "selectedTopDrug"  
	  || spans[i].className == "selectedTopVitamin" || spans[i].className == "selectedDrug"
	  || spans[i].className == "selectedTopBootsDrug" || spans[i].className == "selectedVitamin")
        return count;
    }
  }
  
  return -1;
}

/**
Select/highlight the result at the given position
*/
function setSelectedSpan (div, spanNum)
{
  var count = -1;
  var thisSpan;
  var spans = div.getElementsByTagName("div");
  if (spans) {
    for (var i = 0; i < spans.length; i++) {
      if (++count == spanNum) {
        _highlightResult(spans[i]);
        thisSpan = spans[i];
      } else {
        _unhighlightResult(spans[i]);
      }
    }
  }
  
  return thisSpan;
}
//this sets the cursor postiion of the textbox
//need this cause firefox would move the cursor left
//when the up key is pressed
function setCursorPosition(oInput,oStart,oEnd) {
    oInput.focus();
    if( oInput.setSelectionRange ) {
        oInput.setSelectionRange(oStart,oEnd);
    } else if( oInput.createTextRange ) {
        var range = oInput.createTextRange();
        range.collapse(true);
        range.moveEnd('character',oEnd);
        range.moveStart('character',oStart);
        range.select();
    }
}
