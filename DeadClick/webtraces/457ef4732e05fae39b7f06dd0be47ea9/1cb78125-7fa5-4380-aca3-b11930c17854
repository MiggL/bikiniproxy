/*=========================================
 * animatedModal.js: Version 1.0
 * author: JoÃ£o Pereira
 * website: http://www.joaopereira.pt
 * email: joaopereirawd@gmail.com
 * Licensed MIT 
=========================================*/

(function ($) {

    $.fn.animatedModal = function (options) {
        var modal = $(this);
        var State = { Closed: 0, Opend: 1 };
        var state = State.Closed;
        //Defaults
        var settings = $.extend({
            modalTarget: 'animatedModal',
            position: 'fixed',
            width: '100%',
            height: '100%',
            top: '0px',
            left: '0px',
            zIndexIn: '9999',
            zIndexOut: '-9999',
            displayIn: 'block',
            displayOut: 'none',
            color: '#39BEB9',
            opacityIn: '1',
            opacityOut: '0',
            animatedIn: 'zoomIn',
            animatedOut: 'zoomOut',
            animationDuration: '.6s',
            overflow: 'auto',
            // Callbacks
            beforeOpen: function () { },
            afterOpen: function () { },
            beforeClose: function () { },
            afterClose: function () { }

        }, options);

        var closeBt = $('.closebt');

        //console.log(closeBt)

        var href = $(modal).attr('href'),
            $targgetLayer = $('body').find('#' + settings.modalTarget),
            targgetLayerId = '#' + $targgetLayer.attr('id');
        //console.log(targgetLayerId);
        // Default Classes
        $targgetLayer.addClass('animated');
        $targgetLayer.addClass(settings.modalTarget + '-off');

        //Init styles
        var initStyles = {
            'position': settings.position,
            'width': settings.width,
            'height': settings.height,
            'top': settings.top,
            'left': settings.left,
            'background-color': settings.color,
            'overflow-y': settings.overflow,
            'z-index': settings.zIndexOut,
            'display' : settings.displayOut,
            'opacity': settings.opacityOut,
            '-webkit-animation-duration': settings.animationDuration,
            '-moz-animation-duration': settings.animationDuration,
            '-ms-animation-duration': settings.animationDuration,
            'animation-duration': settings.animationDuration,
        };
        //Apply stles
        $targgetLayer.css(initStyles);

        modal.click(function (event) {
            event.preventDefault();
            openLayer();
        });

        closeBt.click(function (event) {
            event.preventDefault();
            closeLayer();
        });

        function openLayer() {
            $('body, html').css({ 'overflow': 'hidden' });
            state = State.Opend;

            if ($targgetLayer.hasClass(settings.modalTarget + '-off')) {
                $targgetLayer.removeClass(settings.animatedOut);
                $targgetLayer.removeClass(settings.modalTarget + '-off');
                $targgetLayer.addClass(settings.modalTarget + '-on');
            }

            if ($targgetLayer.hasClass(settings.modalTarget + '-on')) {
                settings.beforeOpen();
                $targgetLayer.css({ 'opacity': settings.opacityIn, 'z-index': settings.zIndexIn, 'display': settings.displayIn  });
                $targgetLayer.css({ 'opacity': settings.opacityIn, 'z-index': settings.zIndexIn, 'display': settings.displayIn  });
                $targgetLayer.addClass(settings.animatedIn);
                $targgetLayer.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', afterOpen);
            };

        }

        function closeLayer() {
            if (state == State.Opend) {
                $('body, html').css({ 'overflow': 'auto' });
                state = State.Closed;

                settings.beforeClose(); //beforeClose
                if ($targgetLayer.hasClass(settings.modalTarget + '-on')) {
                    $targgetLayer.removeClass(settings.modalTarget + '-on');
                    $targgetLayer.addClass(settings.modalTarget + '-off');
                }

                if ($targgetLayer.hasClass(settings.modalTarget + '-off')) {
                    $targgetLayer.removeClass(settings.animatedIn);
                    $targgetLayer.addClass(settings.animatedOut);
                    $targgetLayer.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', afterClose);
                };
            }
        }

        function afterClose() {
            $targgetLayer.css({ 'z-index': settings.zIndexOut, 'display': settings.displayOut  });
            settings.afterClose(); //afterClose
        }

        function afterOpen() {
            settings.afterOpen(); //afterOpen
        }

        return {
            close: closeLayer,
            open: openLayer
        };

    }; // End animatedModal.js

}(jQuery));




