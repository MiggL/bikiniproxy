// Last Modified KJL 17/08/29
// Modified Elvis 17/04/05

var device;
var thisIsDrug=false, singlePage = false;
var hashPos=0, lastHash=0, hashNo=0;
var hashClicked=true;
var ngdata=[];
var trackurl, formURL;
var i141 = 1, iImg122 = 0;
var mediaGalleryLoaded;
var z_index_layer = 6000000;

if (window.innerWidth <= 767) {
    breakpoint=1;
}else if(window.innerWidth >= 768 && window.innerWidth <= 1023 ) {
    breakpoint=2;
} else if(window.innerWidth >= 1024 && window.innerWidth <= 1280) {
    breakpoint=3;
} else {
    breakpoint=4;
}


$(document).ready(function() {
    var _section = new Array();
    $("div[id^='content_']").each(function(i){
        _section.push(this);
        var _ad = $(this).find($(".inContentAd"));
        for(l=0;l<_ad.length;l++) {
            var a = _section[i].id.split('_');
            $(_ad[l]).attr('id','ads-pos-'+a[1]+'_'+(l+1));
        }
    });

    $(".inContentAd").each(function(i){
        $(this).attr('rel',i+4);
    });

    formURL = trackurl.split('/');
    device = detectDevice();

    if (CURRENT_DRUG_ID != "") {
        thisIsDrug = true;
    }

    if (!isUserLogged){
        $(".share, .email, .feedback").hide();
        $(".li_92 a").attr('href','formulary/'+formURL[4]+'?anchor=92');
    } else {
        if(userCountry!="us" && userCountry!="pr") {
            us_user = false;
            $(".li_92").hide();
            $("#content_91 .next_btn_drug").hide();
            $("#fs_formulary").html("<p>Formulary information is available for health plans only in the United States.</p>");
        } else {
            if(userCountry=="us" && userState=="") {
                us_user = false;
                $(".li_92").hide();
                $("#content_91 .next_btn_drug").hide();
                $("#fs_formulary").html("<p>Formulary information is available for health plans only in the United States.</p>");
            }
        }
    }

    if (device=="mobile"){
        $(".sections-nav").addClass("mobile-sections-nav");
    }
    else{
        $(".sections-nav").removeClass("mobile-sections-nav");
    }
   // $(document).on('click', '#section_tab' ,function(e) {
    $("#section_tab").click(function() {
        if (breakpoint==1||breakpoint==2) {

            var windowTwoThrid = $(window).height() * .66;
            var windowOneThrid = $(window).height() * .33;
            //  hashClicked=false;
            var thisTop = $(this).offset().top - $(window).scrollTop();
            if (thisTop >= windowOneThrid) {
                $('html,body').animate({scrollTop: $('.action-items').offset().top + 15}, 300, navHeight(thisTop));
            }
            if (!$("body").hasClass("refmenushow")) {
                $('body').addClass("refmenushow");
                $('#section_tab').addClass("open");
            } else {
                $('body').removeClass("refmenushow");
                $('#section_tab').removeClass("open");
            }
            navHeight(thisTop);
            wmdPageLink('cr-nav_open');
        }
    });


    if (device == "mobile"){
        if ($('#dd_nav_wrap').length) {
            pageScrollEvents.init();
        }
        scrollEvents.init();
        $('.fixedsticky').fixedsticky();

    }else{
        $(".drugdbsectioncontent h2").removeClass("fixedsticky-off").removeClass("fixedsticky-on");
    }
    relatedLinks.init();
    /*BI tracking for navigation*/
    $(document).on('click', '#leftnav a[href*="#"],.sections-nav a[href*="#"]', function(e) {
        navTracking($(this));
        hashClicked = true;
    });

    if($("#content_0 .fade-collapse-overlay").parent().find("ul li").length <= 1){
       $("#content_0 .fade-collapse-overlay").remove();
    }

    if(typeof s_user_specialty !== 'undefined' && s_user_specialty.indexOf('Ped')!= -1){
        ifPedDos();
    }
    /*Restricting Too Wide table widths*/
    var tablesArray = $(".inlinetable table.datatable");
    var tablesIDArray = new Array();
    for (i=0;i<=tablesArray.length-1;i++) {
        tablesIDArray[i] = tablesArray[i].getAttribute("id");
    }
    for (i=0;i<=tablesIDArray.length-1;i++) {
        if ($("#"+tablesIDArray[i]).innerWidth() > 450) {
            if ($("#"+tablesIDArray[i]).innerWidth() > 500) {
                $("#"+tablesIDArray[i]).addClass('xwidetable');
            }else{
                $("#"+tablesIDArray[i]).addClass('widetable');
            }
        }
    }
    /*/Restricting Too Wide table widths*/

    $(document).one('dfpRenderComp', function () {
        setTimeout("relatedLinks.checkWidth();", 500);
    });

    /** StickyHeader, Sticky Right and Lazyload initialiazed **/
    if (detectDevice() !== "mobile") {
        var isiPad = navigator.userAgent.match(/iPad/i) != null;
        if (locale == "us" && !isiPad) {
            if (DFPTargetKeys.reqHeaders.device !== "MOBILE") {
                stickyRightColumn.init("#adcontainer_rightcol", ".drugdbsectioncontent");
            }
            // special case to check for reference pages
            $("#dose_tabs span").on("click", function () {
                stickyRightColumn.setScrolling();
            });
        }

        var isiPad = navigator.userAgent.match(/iPad/i) != null;
        if (locale == "us" && !isiPad) {
                stickyHead.init();
        }
    }
    else {
        stickyHead.init();
    }


    /* Hiding 101 and 141 ads on break point 1 */
    $(window).resize(function () {
        if (breakpoint === 1) {
            $("#ads-pos-101").hide();
            $(".adSpcHolder").addClass("hide-141-ad");
        } else {
			if($('#ads-pos-101').hasClass("blank-ad")){
			} else {
			        $("#ads-pos-101").show();
                    $(".adSpcHolder").removeClass("hide-141-ad");
                }
        }
		profads.ads2.ResizeTextAds();
    });
    if (window.location.href.match(/\/article\//)){
        cpArticleLoad('refarticle');
    }
    else if (window.location.href.match(/\/drug\//)){
        cpArticleLoad('drug');
    }
	
	
	/*Add Wrapper To 520 and 420 Ads*/

    if ($("#ads-pos-520").length !== 0) {
        $("#ads-pos-520").wrap("<div class='txtAd520SpcHolder' id='plcHold-520'></div>");
    }
    if ($("#ads-pos-420").length !== 0) {
        $("#ads-pos-420").wrap("<div class='txtAd420SpcHolder' id='plcHold-420'></div>");
    } 


    /**** Nav chnges ***/
    if(!thisIsDrug){
        medsimsPOC()//medsims POC
    navChanges();
    sectionOpen();
    }

    if (typeof s_registered_user_id == "undefined" && thisIsDrug == false) {
            $.ajax({
                type:'GET',
                url: '/noscan/public/json/non-gated-articles.json',
                dataType: "json",
                success : function(data){
                    ngdata=data;
                    gateArticles(ngdata)
                },
                error : function(data){
                    console.log("error= "+data)
                }
            });
        }


    if (window.isQuestionAnswerPage) {
        knowledgeBase();
    }

});

function navChanges(){
    if(breakpoint>=3){
        $(".sections-nav ul li ul li:first-child a").each(function(n) {
            var href= $(this).attr("href").split("#")[0];
            var section = $(this).parents().eq(2).children().first();
            href = href=="" ? "javascript:void(0);" : href;
            section.attr("href",href);  
            if(this.hasAttribute("onclick")){
                var onclick = $(this).attr("onclick").replace("_1", "_0");
                section.attr("onclick",onclick);
            } 
       });
    }
    else{
       $(".sections-nav>ul>li>a").each(function(n) {
        if($(this).siblings().size()==1){
            $(this).attr("href","javascript:void(0);");
            $(this).removeAttr("onclick");
        }
       }); 
    }
}

function ifPedDos() {
    var tabN = 'ped';
    $("#dose_tabs").children().removeClass('opentab');
    $("#dostab_ped").addClass('opentab');
    $("#dose_tabs_content").children().hide();
    $("#dose_"+tabN).show();
}
function openCalc(url,condition,group,doseinfo) {
    if (breakpoint != 1){
        document.getElementById("dose_calc_frame").style.width = "700px";
    } else {
        document.getElementById("dose_calc_frame").style.width = "100%";
    }
    document.getElementById("dose_calc_frame").style.height = "430px";

    /*  if(navigator.userAgent.indexOf('iPad') == -1){
     document.getElementById("dose_calc_frame").style.height = "430px";
     } else {
     document.getElementById("dose_calc_frame").style.height = "800px";
     $("#dose_calc_layer .ref_layer").css({'height':'auto','max-height':'none'});
     }*/
    doseinfo = decodeURIComponent(doseinfo);
    document.getElementById("dose_calc_frame").setAttribute("scrolling","auto");
    var iframeurl = url+"?drug="+escape(GENERIC_NAMES[0])+"&condition="+escape(condition)+"&group="+escape(group)+"&dose="+escape(doseinfo);
    document.getElementById("dose_calc_frame").src = iframeurl;
    showModal('dose_calc_layer');
    wmdTrack('dr-dcalc');
}
function closeCalc() {
    document.getElementById("dose_calc_frame").src = '';
}
/*GoTo Sections - hashChange*/
var cachedTitle = ''
$(function() {
    $(window).bind('hashchange', function() {
        var hash = location.hash.split('#');
        $('#leftnav ul li a, .sections-nav ul li a').removeClass('selected');
        $('#leftnav ul li, .sections-nav ul li').removeClass('current_section');
        var firstSelectID = ($("div[id^='content_']").eq(0).attr("id")).split("_");
        if (document.location.hash == "" || hash[1] =="") {
                $("#leftnav a[href=\"#" + firstSelectID[1] + "\"]").addClass("selected");
                $("#leftnav a[href=\"#" + firstSelectID[1] + "\"]").parent().addClass("current_section");
                $(".sections-nav ul li a[href=\"#" + firstSelectID[1] + "\"]").addClass("selected");
                $(".sections-nav ul li a[href=\"#" + firstSelectID[1] + "\"]").parent().addClass("current_section");
            if (breakpoint != 1) {
                hashPos = 1;
                $('.drugdbsectioncontent').children().addClass('inactive');
                $("div[id^='content_']").eq(0).removeClass('inactive');
                if (!thisIsDrug) {
                    $(".selected").parent().parent().parent().addClass("section_open")
                }
                nextPrevLinks();
            }
            else {
                if (!thisIsDrug) {
                    $('.drugdbsectioncontent').children().removeClass('inactive');
                    $(".current_section").parents('li:eq(0)').addClass('section_open');
                    $('.back_next_btn').hide();
                }
                else {
                    $('.drugdbsectioncontent').children().addClass('inactive');
                    $("div[id^='content_']").eq(0).removeClass('inactive');
                    nextPrevLinks();
                }
                $('body').removeClass("refmenushow");
                $('#section_tab').removeClass("open");
                hashPos=1;
                hashClicked=false;
            }
            window.scrollTo(0, 0);
        }
        else {
            // if($("#content_"+hash[1]).length == 0){
            //      hash[1] == firstSelectID[1]
            //   }

            if (hash[1] == "1" && CURRENT_DRUG_ID!="") {
                hash[1] = "0";
                ifPedDos();
            }
            var hashtoshow = "content_" + hash[1];
            if (hash[1] == "showall") {
                $("#leftnav a[href=\"#showall\"]").parent().addClass('current_section');
                $("#leftnav a[href=\"#showall\"]").addClass("selected");
                $(".sections-nav a[href=\"#showall\"]").parent().addClass('current_section');
                $(".sections-nav a[href=\"#showall\"]").addClass("selected");
            } else {
                $("#leftnav a[href=\"#" + hash[1] + "\"]").parent().addClass('current_section');
                $("#leftnav a[href=\"#" + hash[1] + "\"]").addClass("selected");
                $(".sections-nav a[href=\"#" + hash[1] + "\"]").parent().addClass('current_section');
                $(".sections-nav a[href=\"#" + hash[1] + "\"]").addClass("selected");
            }
            if (hash[1] === "questions") {
                $('#'+hashtoshow).find('h2').hide();
                if (cachedTitle === '') {
                    cachedTitle = $('h1').text();
                }
                $('h1').text(cachedTitle + 'Questions & Answers');
                history.pushState(null, '', location.pathname.replace(/-overview*$/, '-questions-and-answers'));
            } else if (cachedTitle){
                $('h1').text(cachedTitle);
                history.pushState(null, '', location.pathname.replace(/-questions-and-answers$/, '-overview') + location.hash);
            }

            if(hash[1] == "3"){
                drugInteractions();
            }
            if (hash[1] == "90") {
                loadPricingImages();
            }
            if(hash[1] == "91") {
                loadPatientHandoutRoutedDrugs();
            }
            if(hash[1] == "92"){
                if (!isUserLogged) {
                    window.location.href = 'formulary/' + formURL[4] + '?anchor=92';
                } else {
                    loadDrugFormulary();
                }
            }
            if (breakpoint != 1) {
                $('.drugdbsectioncontent').children().addClass('inactive');
                if (hash[1] == "showall") {
                    $('.drugdbsectioncontent').children().removeClass('inactive');
                    $('.back_next_btn').hide();
                    $('.next_btn1').css({'margin-top': ''});

                } else {
                    $('#' + hashtoshow).removeClass('inactive');
                    if(hashPos == 0) {
                        hashPos = 1;
                        if (breakpoint === 1) {
                            admove.adHashInit(hashtoshow);
                        }
                        else {
                            DesktopAdMove.adHashInit(hashtoshow);
                        }
                    }
                    $('.back_next_btn').show();

                    nextPrevLinks();
                }
                window.scrollTo(0, 0);
            } else {
                if(!thisIsDrug){
                    $('.drugdbsectioncontent').children().removeClass('inactive');
                    //   $(".current_section").parents('li:eq(0)').addClass('section_open');
                    //$(".current_section").parents('li:eq(0)').addClass('active');
                    $('.back_next_btn').hide();
                    var scrollPos = $('#' + hashtoshow).offset().top-55;
                    var h2Top = $("h2").css('top');
                    if (h2Top == "auto") {
                        h2Top = 0
                    }
                    //	alert(parseFloat(scrollPos)-parseFloat(h2Top));
                    if(hashPos==0){
                        if($("#content_" + hash[1]).index() == 0){
                            hashClicked=false
                        }
                    }
                    if (hashClicked){
                        if(hashPos==0) {
                            if ($("#content_" + hash[1]).index() == 0) {
                                window.scrollTo(0, 0);
                            } else {
                                window.scrollTo(0, parseFloat(scrollPos) - 60);
                                if (breakpoint === 1) {
                                    admove.adHashInit(hashtoshow);
                                }
                                else {
                                    DesktopAdMove.adHashInit(hashtoshow);
                                }
                            }
                        } else {
                            if ($("#content_" + hash[1]).index() == 0) {
                                window.scrollTo(0, 0);
                            } else {
                                // window.scrollTo(0, parseFloat(scrollPos) - parseFloat(h2Top));
                                window.scrollTo(0, parseFloat(scrollPos));
                            }
                        }
                        hashClicked = false;
                        pageScrollEvents.hashNo = 1;

                    }
                    hashPos = $(window).scrollTop();
                }else{
                    $('.drugdbsectioncontent').children().addClass('inactive');
                    $('#'+hashtoshow).removeClass('inactive');
                    nextPrevLinks();
                    $('.back_next_btn').show();
                    window.scrollTo(0, 0);

                }
            }
            $('div[id^="content_"]').removeClass("currentContent");
            $('#'+hashtoshow).addClass("currentContent");
        }
        if(!thisIsDrug){
            $(".current_section").parent().parent().addClass("section_open active");
        }
        if(breakpoint != 1){
            window.scrollTo(0, 0);
        }
        $('body').removeClass("refmenushow");
        $('#section_tab').removeClass("open");
        $("li.section_open").addClass("active");
        $(".drugdbsectioncontent").css({'visibility': 'visible'});
        setTimeout("relatedLinks.checkWidth();",1500)

    });
    $(window).trigger('hashchange');
});

$(document).on("viewportChange", function(e,data){
    if(data==1){
        if(!thisIsDrug) {
            //  var a = $(".selected").attr("href").split("#")
            // document.location.hash = "";
        }
    }
})
/* Scroll Events*/
var pageScrollEvents = {
    init:function(){
        ddNavWrapHt= $('#dd_nav_wrap').height(),
            contentDivs = $('div[id^="content_"]'),
            ddNavWrapTop= $('#dd_nav_wrap').offset().top,
            sectionTabTop = $('#section_tab').offset().top;
        $(window).on('scroll', function() {
            pageScrollEvents.stickyNav();
        });
        if(navigator.userAgent.match(/iPhone|iPad|iPod/i)){
            $(window).on('scroll', function() {
                pageScrollEvents.stickyIos();
            });
        }

        return this;
    },
    stickyNav:function(){
        if (breakpoint <= 2){
            if( $(window).scrollTop()>=sectionTabTop-6 && $(window).scrollTop()<=$('.mobile-sections-nav').offset().top-100) {
                $('#dd_nav').addClass("fixed-sticky");
                $('#dd_nav').addClass("fixedsticky-on");
                $('.drugdbsectioncontent').css({"margin-top":ddNavWrapHt+"px"})
            } else {
                $('#dd_nav').removeClass("fixed-sticky");
                $('#dd_nav').removeClass("fixedsticky-on");
                $('.drugdbsectioncontent').css({"margin-top":"0"})
            }
        }
        return this;
    },
    stickyIos:function(){
        $("h2.fixedsticky").each(function(i,el){
            var top = $(this).parent().offset().top;
            var bottom = top + $(this).parent().outerHeight();
            if($(window).scrollTop()>top-50 && $(window).scrollTop()<bottom-50){
                $(this).addClass("fixedstickyIos-on");
                $("fixedstickyIos-on").css("width",$(window).width());
            }
            else{
                $(this).removeClass("fixedstickyIos-on");
            }
        });
    }
}
/* End Scroll Events*/

$(document).on('click', '.fade-collapse-overlay', function() {
    $(this).parent().addClass('drug_expand');
    $(this).remove();
    wmdPageLink('dr-do_open');
});

$(document).on('click','#fstabs span',function() {
    if (!$(this).is('.opentab')) {
        var pl = $(this).attr('id').split('_');
        $("#fstabs").children().removeClass('opentab');
        $(this).addClass('opentab');
        $("#fs_planList ul").addClass("inactive")
        $("#fs_"+pl[1]+" ul").removeClass("inactive");
    }
});

$(document).on('change', '#fs_select select', function(e) {
    selectDrugName = $(this).find("option:selected").text();
    selectDrugId = $(this).val();
    showBrandFS(selectDrugName,selectDrugId);
});

$(document).on('click', '.accordion .expandLink', function() {
    $(this).next(".expandContent").slideToggle("medium")
    $(this).toggleClass("active");
    if($(this).hasClass('active') && $(this).parent().parent().attr('id')=='tier_desc') {
        wmdPageLink('dr-fp_fexp');
    }
});

$(document).on('click','#dose_tabs span',function() {
    if (!$(this).is('.opentab')) {
        tabN = $(this).attr('id').split('_');
        $("#dose_tabs").children().removeClass('opentab');
        $(this).addClass('opentab');
        $("#dose_tabs_content").children().hide();
        $("#dose_"+tabN[1]).show();

        $( document).one( "pvidReset", {
            wmdPV1: trackurl+'%23'+tabN[1],
            wmdPV2: '0',
            wmdT: 'dr-0-tb_'+tabN[1]
        }, function( event ) {
            if (typeof profads !== "undefined" && typeof webmd.ads2.display !== "undefined" && profads.ads2.KillSwitch()) {
                $("body >*").each(function () {
                    if (($(this).attr('id') != 'bodypadding') && ($(this).attr('id') != 'headerbox') && ($(this).attr('id') != 'footercontents') && ($(this).attr('id') != 'adtagheader') && ($(this).attr('id') != 'vpFrame')) {
                        $(this).remove();
                    }
                });
                webmd.ads2.refresh({posSkip: {420: true, 520: true}, keys: {pvid: s_pageview_id, ep: '0'}});
                profads.ads2.ResizeTextAds();
            }
            wmdTrack(event.data.wmdT);
            wmdPageview(event.data.wmdPV1,event.data.wmdPV2);
        });
        // GenPVID();
        //posbottom = $('#link_leftcol').offset().top;
        window.VPTrackFrame.getFile("desturl="+trackurl+"%5fdr-0-tb_"+tabN[1]);
    }
    setTimeout("relatedLinks.checkWidth();",500);

});

$(document).on('click', '.close-modal', function(e) {
    var div = $(this).parents('.modal-layer').attr("id");
    if(div=="clinref-table-layer"){
        $("#tablecontent_layer").attr('class','inactive');
        $("#tablelist_layer").attr('class','active');
    }
    if(div=="emailtoolbox"){
        $("#emailadexcontainer").removeClass("emailadexcontainer-open");
    }
    hideModal(div);
});

$(document).on('click', '.sections-nav ul li a, #leftnav ul li a', function(e) {
    if (device == "mobile"){
        //   hashClicked=true;
    }
});


function sectionOpen(){

if(breakpoint<3){
 $(document).on('click', '#leftnav ul li a, .sections-nav ul li a', function(e) {
    if (!$(this).parent().hasClass("section_open") && $(this).siblings().size() == 1) {
        $(this).parent().addClass("section_open");
        $(this).parent().addClass("active");
        relatedLinks.checkWidth();
        wmdPageLink("cr-ln_expand");
    } else {
        if ($(this).parent().hasClass("section_open")) {
            $(this).parent().removeClass("section_open");
            $(this).parent().removeClass("active");
            relatedLinks.checkWidth();
        }
    }

 });
}
else{    
    $(".sections-nav ul li").removeClass("active").removeClass("section_open");
    $(".selected").parents().eq(2).addClass("section_open")}

}

$(document).on('click', '.next_btn_drug a', function() {
    sectionID = $(this).attr('href');
    sectionID = sectionID.split('#');
    BItrack('dr-sn1_next_'+sectionID[1]);
});
$(document).on('click', '.back_btn_drug a', function() {
    sectionID = $(this).attr('href');
    sectionID = sectionID.split('#');
    BItrack('dr-sn2_prev_'+sectionID[1]);
});
$(document).on('click', '.next_btn a', function() {
    sectionID = $(this).attr('href');
    sectionID = sectionID.split('#');
    BItrack('cr-sn_next_'+sectionID[1]);
});
$(document).on('click', '.back_btn a', function() {
    sectionID = $(this).attr('href');
    sectionID = sectionID.split('#');
    BItrack('cr-sn_prev_'+sectionID[1]);
});

$(document).on('click', '#link_tablelist a', function() {
    viewtablelist();
});

$(document).on('click', '.action-items .share', function() {
    $('.share-layer').fadeIn('fast');
});


$(document).on('click', '.action-items .close-layer, .share-layer', function() {
    $('.share-layer').fadeOut('fast');
});

$(document).on('change', '#plan_state', function(e) {
    var state = $("#plan_state").val();
    changePlan(state);
});

$(document).on('click', "#moredrugbrand", function() {
    $("#moredrugbrand").remove();
    $("#drugbrandname_more").css({'display':'inline'});
});

$(document).on('click', ".share-layer .facebook", function() {
    fburl();
});

$(document).on('click', ".share-layer .twitter", function() {
    twiturl();
});

$(document).on('click', ".share-layer .linkedin", function() {
    linkedinurl();
});

$(document).on('click', ".share-layer .googleplus", function() {
    googleurl();
});

$(document).on('click', ".print", function() {
    ReferencePrint();
    wmdPageLink('tl_pr');
});
$(document).on('click', ".email", function() {
    var pageUrl = document.URL;
     //if(breakpoint==1)
        $('body').addClass("modal-layer-on");
    // else {
        $("#whiteoutlayer").css({'display':'block'});
        //$('body').css({'overflow': 'hidden'});
   // }
    if(pageUrl.indexOf('#')>0)
        pageUrl=pageUrl.substring(0,pageUrl.indexOf('#')) ;
    adexGet('/features/emailthis/noscan/cf/form?requestURL='+pageUrl+'&type=article&cId='+ref_contentId+'&subject='+document.title,'emailadexbox','adexwait',showemailbox);
    return false;
    wmdPageLink('tl_shr1');
});
$(document).on('click', ".feedback", function() {
    var pageUrl = document.URL;
    //if(breakpoint==1)
        $('body').addClass("modal-layer-on");
     //else {
        $("#whiteoutlayer").css({'display':'block'});
       // $('body').css({'overflow': 'hidden'});
   // }
    if(pageUrl.indexOf('#')>0)
        pageUrl=pageUrl.substring(0,pageUrl.indexOf('#')) ;
    adexGet('/features/feedback/noscan/cf/form-fb','emailadexbox','adexwait',showemailbox,processFeedbackFormRequest);
    //  adexGet('/features/emailthis/noscan/cf/form-min?requestURL='+pageUrl+'&type=article&cId='+ref_contentId+'&subject='+document.title,'emailadexbox','adexwait',showemailbox);

    return false;
    wmdPageLink('tl_shr5');
});
$(document).on('click', '#druglistcontainer li,#druglistcontainerNames li', function(e) {
    var info = $(this).children();
    $(this).toggleClass("open");
    info.slideToggle("fast");
    wmdPageLink('dr-dintr_drg');
});

$('body').click(function(e) {
    if(e.target.className!="tooltip_link"){
        $('.tooltip').remove();
    }

    // if(e.target.className!="preview")
    //     $("#previewimg").remove();
});

if(navigator.userAgent.match(/iPhone|iPad|iPod/i)){
    document.body.addEventListener('touchend',function(e){
        var touchobj = e.changedTouches[0];
        var ct = $(touchobj.target).attr("class");
        if(ct!="tooltip_link"){
            $('.tooltip').remove();
        }

    });
}

$(document).on('change', '#drug-int-sort', function(e) {
    var sortVal= $(this).val();
    if (sortVal=="name"){
        $('#druglistcontainer').hide();
        $('#druglistcontainerNames').show();
    }
    else if (sortVal=="severity"){
        $('#druglistcontainerNames').hide();
        $('#druglistcontainer').show();
    }
});
$(document).on('change', '#patient-handout-drugs', function(e) {
    loadPatientHandout($(this).val());
});


function navTracking(_this){
    var wmdTrkVal = _this.attr('data-wmdtrack');
    var wmdPval = _this.attr('data-wmdpageview');
    var wmdKeyValueArray = [];

    wmdPval = wmdPval.replace("{", "");
    wmdPval = wmdPval.replace("}", "");
    wmdPval = wmdPval.replace(/'/g, "");

    wmdPval.split(',');

    wmdPval = wmdPval.split(',');
    for (var i = 0; i < wmdPval.length; i++) {
        wmdKeyValueArray[i] = wmdPval[i].split(':');
    }

    sectionID = _this.attr('href');
    sectionID = sectionID.split('#');
    if(breakpoint !=1) {
        $(document).one("pvidReset", {
            wmdPV1: trackurl + '#' + sectionID[1],
            wmdPV2: wmdKeyValueArray[1][1],
            wmdT: wmdTrkVal
        }, function (event) {
            if (typeof profads !== "undefined" && typeof webmd.ads2.display !== "undefined" && profads.ads2.KillSwitch()) {
                $("body >*").each(function () {
                    if (($(this).attr('id') != 'bodypadding') && ($(this).attr('id') != 'headerbox') && ($(this).attr('id') != 'footercontents')&& ($(this).attr('id') != 'adtagheader') && ($(this).attr('id') != 'vpFrame')) {
                        $(this).remove();
                    }
                });
                if (breakpoint === 1) {
                }
                else {
                    refreshMedscapeAds(wmdTrkVal);
                }

                profads.ads2.ResizeTextAds();
            }
            wmdTrack(event.data.wmdT);
            wmdPageview(event.data.wmdPV1, event.data.wmdPV2);
        });
        GenPVID();
    }else{
        wmdTrack($(this).attr('data-wmdtrack'));
        wmdPageview(trackurl + '#' + sectionID[1], wmdKeyValueArray[1][1]);

        // $("#section_tab").click();
        //  $("#section_tab").trigger("click", "close");
    }
    if (sectionID[1] == "92" && typeof(singleDrugId) != "undefined") {
        window.VPTrackFrame.getFile("desturl=" + trackurl + "%5f" + sectionID[1] + "_" + singleDrugId);
    } else {
        window.VPTrackFrame.getFile("desturl=" + trackurl + "%5f" + sectionID[1]);
    }

}
$(document).on("viewportChange", function(){
    if(breakpoint==1 || breakpoint==2){
        $("#rel-links-container").insertAfter(".article-content");
    } else {
        $("#rel-links-container").appendTo("#drugdbmain");
    }
    relatedLinks.checkWidth();

})
var relatedLinks = {
    init: function () {

        $("#rel-links").appendTo("#rel-links-container");
        var relatedLink = $('.related-links').children().length;
        if(relatedLink > 0 ) {

            var drugClass = $('#drug-class-card');
            if (thisIsDrug) {

                drugClass.children('ul').remove();
                drugClass.append($('.drug-names~ul').html()).find('span').remove();
                var text = drugClass.html();
                if (typeof text != 'undefined') {
                    text = text.replace(/;/g, '');
                    drugClass.html(text);
                }

                $('#drug-class-card a[onclick]').attr('onclick', function (i, v) {
                    return v.replace(/dr-tb_name/g, 'rl-drug_class');
                });

            }

            relatedLinks.checkWidth();
            drugClass.css({'display':''});
            relatedLinks.widgetCollapse();

            relatedLinks.duplicateArticle('#rel-recommend li a');
            if(!thisIsDrug){
                relatedLinks.duplicateArticle('.rel-links-list#indications-card li a');
            }

            if(thisIsDrug){

                if($('.rel-links-list#indications-card li').length > 0){
                    var temp = $('.rel-links-list#indications-card h6').html();
                    var res = temp.slice(17,temp.length);
                    if(res.length > 20 ){
                        $('.rel-links-list#indications-card h6').html('Indications for this Drug');
                    }
                }

            } else {

                if($('.rel-links-list#drug-class-card li').length > 0){

                    var temp = $('.rel-links-list#drug-class-card h6').html();
                    var res = temp.slice(17,temp.length);
                    if(res.length > 20 ){
                        $('.rel-links-list#drug-class-card h6').html('Related Drugs');
                    }

                    var record = $('.rel-links-list#drug-class-card li').length;
                    if( record > $('.rel-links-list#drug-class-card').attr('data-max') ) {
                        $('.rel-links-list#drug-class-card li').last().remove();
                        url=ref_contentId+'-medication#showall';
                        $('.rel-links-list#drug-class-card').append('<div class="more-link"><a onclick="wmdTrack(\'rl-drug_more\')" href='+url+'>View All Drugs </a></div>');
                    }
                }
            }
        }

        if(breakpoint==1 || breakpoint==2){
            $("#rel-links-container").insertAfter(".article-content");
        } else {
            $("#rel-links-container").appendTo("#drugdbmain");
        }
        if (typeof s_user_group != 'undefined' && (s_user_group.trim()) == "Physician" && typeof userCountry != 'undefined' && (userCountry.trim()) == "us" && typeof leadConcept != 'undefined') {
            $("#consult-link").appendTo("#related-pos1");
            relatedLinks.consultGeneric();

        } else {
            $('#consult-card').remove();
            $("#consult-link").remove();
            $("#rel-recommend").appendTo("#related-pos2");

        }


        setTimeout("relatedLinks.checkWidth();",500);
    },
    checkWidth: function () {
        console.log("related check width")
        if (breakpoint ==1) {
            $("#rel-links-container").css("margin-top", 0);
            $("#rel-links-container").removeClass("nav-expanded");
        }else{
            if ($("#related-pos3").height() + $("#related-pos3").offset().top > $(".drugdbsectioncontent").height() + $(".drugdbsectioncontent").offset().top) {
                var relMargin = ($("#related-pos3").height() + $("#related-pos3").offset().top)- ($(".drugdbsectioncontent").height() + $(".drugdbsectioncontent").offset().top);
                //  var relMargin =  ($("#adcontainer_rightcol").height() + $("#adcontainer_rightcol").offset().top)- (($("#rightcol").height() + $("#rightcol").offset().top) - $("#rel-links-container").offset().top);
                $("#rel-links-container").css("margin-top", relMargin);
            } else {
                $("#rel-links-container").css("margin-top", "");
            }
            if ($(".sections-nav").height() + $(".sections-nav").offset().top > $("#rel-links-container").offset().top) {
                $("#rel-links-container").addClass("nav-expanded");
            } else {
                $("#rel-links-container").removeClass("nav-expanded");
            }
        }
    },
    duplicateArticle : function(element) {
        $(element).each(function (index, value){
            var linkval = $(this).attr('href').indexOf(ref_contentId);
            if ( linkval != -1 ) {
                $(this).parent().remove();
            }
        });
        if($(element).length > $(element).closest('div').attr('data-max')){
            $(element).closest('li').last().remove();
        }
    },
    widgetCollapse : function () {
        var newsPers = $('#news-card li').length;
        if (newsPers == 0 ){
            $('#news-card').hide();
        }
        var condProce = $('#indications-card li').length;
        if (condProce == 0 ){
            $('#indications-card').hide();
        }
        if( thisIsDrug) {
            var drugs = $('#drug-class-card li').length;
            if (drugs == 0 ){
                $('#drug-class-card').hide();
            }
        } else {
            var drugsArticle = $('#drug-class-card li').length;
            if (drugsArticle < 3 ){
                $('#drug-class-card').hide();
            }
        }

    },
    consultGeneric : function () {
        var that = this;
        var csltPgSz = 2;
        var csltItemCt = 0;
        if (thisIsDrug){
            var _q = $("#content_0").find("h3").eq(1).text();
        } else {
            var _q = leadConcept;
        }

        $.ajax({
            url: '//api.'+getDomain()+'medscape.com/consultservice/consultrelatedlinks',
            dataType: 'json',
            contentType: 'application/json',
            data: '{"tags":"'+ encodeURIComponent(leadSpecialities) +'","query":"'+ encodeURIComponent(_q) + '"}',
            type: 'POST',
            xhrFields: {
                withCredentials: true
            },
            crossDomain: true,
            success: function(json) {
                if (typeof json == 'object' && json != null && !$.isEmptyObject(json) && typeof json.StatusCode != 'undefined' && json.StatusCode == 200 && typeof json.code != 'undefined' && json.code == 1 && typeof json.data == 'object' && !$.isEmptyObject(json.data) && typeof json.data.Items != 'undefined' && json.data.Items != null && json.data.Items.length > 0) {
                    var consultCount = 0;
                    for (x=0; x < json.data.Items.length; x++) {
                        try {
                            if (json.data.Items[x].Tags.toLowerCase().match(/(^adverse drug reaction ?,)|(, ?adverse drug reaction ?,)|(, ?adverse drug reaction ?$)/) == null && json.data.Items[x].Tags.toLowerCase().match(/(^suppress ?,)|(, ?suppress ?,)|(, ?suppress ?$)/) == null && csltItemCt < csltPgSz) {
                                csltItemCt++;
                                var defaultC = '';
                                if (json.data.Items[x].Author.AvatarUrl.indexOf('/anonymous.gif') != -1 || json.data.Items[x].Author.AvatarUrl.indexOf('/default.png') != -1  || json.data.Items[x].Author.AvatarUrl.indexOf('/Profile-Generic.svg') != -1) {
                                    defaultC = ' default';
                                }
                                if(consultCount === 0 ){
                                    $('#consult-card').append('<div class="post-header"><a href="//www.'+ getDomain() +'medscape.com/consult/post?id=' + json.data.Items[x].Id + '" onclick="wmdTrack(\'rl-consult_post\')"> <div class="post-user-image"><span><img src="' + json.data.Items[x].Author.AvatarUrl.replace(/http:/,'https:') + '" class="avatar' + defaultC + '" border="0"></span></div><div class="post-user">' + json.data.Items[x].Author.DisplayName + '<div class="post-user-credentials">' + json.data.Items[x].Author.Properties.Specialty + '</div> </div> </a> <div class="post-date"><a href="//www.'+ getDomain() +'medscape.com/consult/post?id=' + json.data.Items[x].Id + '" onclick="wmdTrack(\'rl-consult_post\')">' + csltTimeP(json.data.Items[x].Date) + '</a></div> </div> <a href="//www.'+ getDomain() +'medscape.com/consult/post?id=' + json.data.Items[x].Id + '" onclick="wmdTrack(\'rl-consult_post\')" class="title">' +  json.data.Items[x].Title + '</a><div class="consult-bucket-footer"><a class="consult-discussion" onclick="wmdTrack(\'rl-consult_conc\')" href="//www.'+ getDomain() +'medscape.com/consult?filterby=tag&tag='+leadConcept+'">Join the Discussion</a></div></div>');

                                    consultCount++;
                                }

                                $('#consult-discussion ul').append('<li><div class="post-header"><a href="//www.'+ getDomain() +'medscape.com/consult/post?id=' + json.data.Items[x].Id + '" onclick="wmdTrack(\'rl-consult_post\')"> <div class="post-user-image"><span><img src="' + json.data.Items[x].Author.AvatarUrl.replace(/http:/,'https:') + '" class="avatar' + defaultC + '" border="0"></span></div><div class="post-user">' + json.data.Items[x].Author.DisplayName + '<div class="post-user-credentials">' + json.data.Items[x].Author.Properties.Specialty + '</div> </div> </a> <div class="post-date"><a href="//www.'+ getDomain() +'medscape.com/consult/post?id=' + json.data.Items[x].Id + '" onclick="wmdTrack(\'rl-consult_post\')">' + csltTimeP(json.data.Items[x].Date) + '</a></div> </div> <a href="//www.'+ getDomain() +'medscape.com/consult/post?id=' + json.data.Items[x].Id + '" onclick="wmdTrack(\'rl-consult_post\')" class="title">' +  json.data.Items[x].Title + '</a></li>');
                            }
                            else if (csltItemCt >= csltPgSz) {
                                break;
                            }
                        }
                        catch (e) {
                            console.log(e);
                        }

                    }
                    $('#consult-discussion').append('<div class="consult-bucket-footer"><a class="consult-discussion" onclick="wmdTrack(\'rl-consult_conc\')" href="//www.'+ getDomain() +'medscape.com/consult?filterby=tag&tag='+leadConcept+'">View All Posts</a></div>');

                }
                if(csltItemCt === 0){
                    $('.rel-links-card#consult-discussion').remove();
                    $('#consult-card').hide();
                    // show generic consult
                    if(_random === 1){
                        $("#consult-link").appendTo("#related-pos2");
                        wmdPageLink('rl-consult_conc50');
                    } else {
                        $('#rel-recommend').appendTo($('#related-pos2'));
                        wmdPageLink('rl-rr_50');
                    }
                } else {
                    // clone consult widget into right rail
                    if(_random === 1){
                        that.addRightRailConsult()
                        wmdPageLink('rl-consult_post50');
                    } else {
                        $('#rel-recommend').appendTo($('#related-pos2'));
                        wmdPageLink('rl-rr_50');
                    }
                }
            }
        });
        if($('.rel-links-card#consult-discussion').length > 0){
            if($('.rel-links-card#consult-discussion li').length > 2 ){
                $('.rel-links-card#consult-discussion li').last().remove();
            }
        }
        var _random = Math.floor((Math.random() * 2));
    },

    addRightRailConsult: function(){
        var id = '#consult-card';
        var consultCard = $(id).clone();
        consultCard.attr('id', consultCard[0].id + '-right' );
        $('#related-pos2').replaceWith(consultCard);
    }
}
function csltTimeP(utc) {
    var dateOrig = new Date(utc);
    var time = Math.round((new Date().getTime() - dateOrig.getTime()) / 60000);
    if (time > 59 && time < 1440) {
        time = Math.floor(time / 60) + 'h';
    } else if (time > 1439) {
        var dateArr = dateOrig.toString().split(' ');
        time = dateArr[1] + ' ' + dateArr[2];
    } else {
        time = time + 'm';
    }
    return time;
}

function gateArticles(ngdata){
    var found = getArticleById(ref_contentId);
    if (found.length==0){
        $('#leftnav a, .sections-nav a,#rel-recommend a, #indications-card a').each(function () {
             //if ($(this).attr("href").indexOf("-") > 0 && $(this).attr("href").indexOf("#") != -1) {
              if ($(this).attr("href").indexOf("javascript") != 0 && $(this).attr("href").indexOf("#") != 0){
                var _href = $(this).prop("href").split('#')[0];
                _href = _href.replace("/article", "/refarticle");
                $(this).attr("href", _href + "?src=refgatesrc1");
            if (typeof $(this).attr("data-wmdtrack") == "undefined") {
                $(this).attr("onclick", "wmdTrack('refgate1');");
            }
            else{
                $(this).attr("data-wmdtrack", "refgate1");
            }
            }
        });

        if (!$(".next_section_btn a").length) return false;
        var _href = $(".next_section_btn a").prop("href").split('#')[0];
        _href = _href.replace("article", "refarticle");
        $(".next_section_btn a").attr("href", _href + "?src=refgatesrc1");
    }
}

function getArticleById(topicID) {
    return ngdata.filter(
        function(ngdata) {
            return ngdata.topicID==topicID;
        }
    );
}

/*Table viewer*/
var tables;
var tablesID;
var totaltable;
var thistable;

function refTableShow(id){

    $("#tablecontent_layer").attr('class','active');
    $("#tablelist_layer").attr('class','inactive');
    $(".tablelayer_content").attr('class','tablelayer_content inactive');
    $("#tablecontent_layer #"+id).attr('class','tablelayer_content active');
    tables = $("#tablecontent_layer .tablelayer_content");
    tablesID = new Array();
    totaltable =tables.length;
    if(totaltable==1){
        $(".table_layer_bar").hide();
    }else{
    for (i=0;i<totaltable;i++) {
        tablesID[i] = tables[i].getAttribute("id");
        if (tablesID[i]==id) {
            thistable = i+1;
        }
    }
    $("#reftable_num").html("Table "+thistable+" of "+totaltable);
    $("#link_tablelist").show();
    if (thistable==1) {
        $("#prevtablebtn a").attr("href","javascript:none();")
        $("#prevtablebtn").addClass("tablebtn_grey");
    } else {
        $("#prevtablebtn a").attr("href","javascript:prevtablebtn('"+totaltable+"','"+(thistable-1)+"');")
        $("#prevtablebtn").removeClass("tablebtn_grey");
    }
    if (thistable==totaltable) {
        $("#nexttablebtn a").attr("href","javascript:none();")
        $("#nexttablebtn").addClass("tablebtn_grey");
    } else {
        $("#nexttablebtn a").attr("href","javascript:nexttablebtn('"+totaltable+"','"+(thistable+1)+"');")
        $("#nexttablebtn").removeClass("tablebtn_grey");
    }
}
}

function viewtablelist() {
    $("#link_tablelist").hide();
    $("#tablecontent_layer").attr('class','inactive');
    $("#tablelist_layer").attr('class','active');
}

function nexttablebtn(totaltable,thistable) {
    $(".tablelayer_content").attr('class','tablelayer_content inactive');
    $("#tablecontent_layer #"+tablesID[(thistable-1)]).removeClass("inactive");
    $("#reftable_num").html("Table "+thistable+" of "+totaltable);
    if (thistable==1) {
        $("#prevtablebtn a").attr("href","javascript:none();")
        $("#prevtablebtn").addClass("tablebtn_grey");
    } else {
        $("#prevtablebtn a").attr("href","javascript:prevtablebtn('"+totaltable+"','"+(parseFloat(thistable)-1)+"');")
        $("#prevtablebtn").removeClass("tablebtn_grey");
    }
    if (thistable==totaltable) {
        $("#nexttablebtn a").attr("href","javascript:none();")
        $("#nexttablebtn").addClass("tablebtn_grey");
    } else {
        $("#nexttablebtn a").attr("href","javascript:nexttablebtn('"+totaltable+"','"+(parseFloat(thistable)+1)+"');")
        $("#nexttablebtn").removeClass("tablebtn_grey");
    }
    BItrack("cr-tbl_next");
    wmdTrack('cr-tbl_next');
    wmdPageview(trackurl+"-tab"+thistable, '1');
}
function prevtablebtn(totaltable,thistable) {
    $(".tablelayer_content").attr('class','tablelayer_content inactive');
    $("#tablecontent_layer #"+tablesID[(thistable-1)]).removeClass("inactive");
    $("#reftable_num").html("Table "+thistable+" of "+totaltable);
    if (thistable==1) {
        $("#prevtablebtn a").attr("href","javascript:none();")
        $("#prevtablebtn").addClass("tablebtn_grey");
    } else {
        $("#prevtablebtn a").attr("href","javascript:prevtablebtn('"+totaltable+"','"+(parseFloat(thistable)-1)+"');")
        $("#prevtablebtn").removeClass("tablebtn_grey");
    }
    if (thistable==totaltable) {
        $("#nexttablebtn a").attr("href","javascript:none();")
        $("#nexttablebtn").addClass("tablebtn_grey");
    } else {
        $("#nexttablebtn a").attr("href","javascript:nexttablebtn('"+totaltable+"','"+(parseFloat(thistable)+1)+"');")
        $("#nexttablebtn").removeClass("tablebtn_grey");
    }
    BItrack("cr-tbl_prev");
    wmdTrack('cr-tbl_prev');
    wmdPageview(trackurl+"-tab"+thistable, '1');
}
/*End Table viewer*/

/* Drug Interactions */
function drugInteractions() {
    if (CURRENT_DRUG_ID != "")
        loadDrugList();
}

function loadDrugList(){
    styles = ['contraindicated', 'serious', 'significant', 'minor'];
    var url = '/druginteraction.do?action=getDrugs&id=' + CURRENT_DRUG_ID;

    $(document).ajaxComplete(function() {
        $("#ajax_loader").hide();
    });

    $.getJSON(url, function(data) {
        var severityMap = data['bySeverity'];
        namesMap = data['byName'];
        interactionsMap = data['interactions'];
        severitites = data['severities'];

        if(data['response']=='ERROR')
            $('#druglistcontainer').html('Due to system maintenance, the drug interactions feature you are attempting to access is temporarily unavailable.  Please try again later.');
        else {
            if (!namesMap || getSize(namesMap) == 0){
                $('#druglistcontainer').html('No interactions found');
                return 0;
            } else {
                $('#druglistcontainer').html('');
            }
            if (!severityMap || getSize(severityMap) == 0){
                $('#druglistcontainer').html('No interactions found');
                return 0;
            } else {
                $('#druglistcontainer').html('');
            }
        }

        var  n = 1;
        for(var severity in severityMap){
            var style = styles[(styles.length -1 + n) % styles.length];
            var drugs = severityMap[severity];
            $('#druglistcontainer').append('<h4 class="' + style + '">' + severity + ' (' + drugs.length + ')</h4>');
            $('#druglistcontainer').append('<ul id="draglist' + n + '">');
            for (var i = 0; i < drugs.length; i++){
                var body = "";
                var interactions = drugs[i].interactions[severity];
                for (var j = 0; j < interactions.length; j++){
                    var intId = interactions[j];
                    var splitter = '<span><br/><br/></span>';
                    body = body + (interactionsMap[intId].text);
                    if (j != (interactions.length - 1)){
                        body = body + splitter;
                    }
                }
                $('#draglist' + n).append('<li>' +
                    drugs[i].name +
                    '<p>' + body + '</p>' +
                    '</li>');
            }
            $('#druglistcontainer').append('</ul>');
            n = n + 1;
        }

        $('#druglistcontainerNames').append('<ul id="draglist' + n + '">');
        for (var drugId in namesMap) {
            var drug = namesMap[drugId];
            var drugName = drug.name;
            var body = getDrugBody(drugId);
            body = drugName + '<p>' + body + '</p>'
            $('#draglist' + n).append('<li>' + body + '</li>');
        }
        $('#druglistcontainerNames').append('</ul>');
        var mylist = $('#draglist' + n);
        var listitems = mylist.children('li').get();
        listitems.sort(function(a, b) {
            var compA = $(a).text().toUpperCase();
            var compB = $(b).text().toUpperCase();
            return (compA < compB) ? -1 : (compA > compB) ? 1 : 0;
        })
        $.each(listitems, function(idx, itm) { mylist.append(itm); });
    });
}

function getSize(map){
    var size = 0;
    for (var key in map) {
        if ((map.hasOwnProperty(key))){
            size++;
        }
    };
    return size;
}

function getDrugBody(drugId){
    var drug = namesMap[drugId];
    var drugsBySev = drug.interactions;
    var body = "";
    var n = 1;
    for (var severity in drugsBySev){
        var style = styles[(styles.length -1 + n) % styles.length];
        var interactions = drugsBySev[severity];
        var splitter = '<span class="' + style + '">' + severity +
            ' (' + interactions.length + ')' +
            '</span>';
        body = body + splitter;
        for (var j = 0; j < interactions.length; j++){
            var interaction = interactionsMap[interactions[j]];
            body = body + (interaction.text);
            if (j != (interactions.length - 1)){
                body = body + '<br /> <br />';
            }
        }
    }
    return body;
}
/* End Drug Interactions */

function noSticky(){
    $('.fixedSticky').each(function(index,item) {
    });
}

/* Drug pricing images  */
function loadPricingImages() {
    var contentId = CURRENT_DRUG_ID;
    var url = '/pricingimages.do?action=getPricingImages&contentId=' + contentId;
    $('#pricingAndImages').empty();
    $("#pricingAndImages_ajax_loader").show();

    $.ajax({
        cache:'true',
        url: url
    }).fail(function(j,s,err){
        $("#pricingAndImages_ajax_loader").hide();
        if (console) {
            console.info('err '+err);
        }
    }).done(function(data){
        var $data = $(data);
        //colRem($data,3);            

        if (!$("#ref_priceimgtable").length){
            imageColClean($data);
            $data.appendTo('#pricingAndImages');
        }
    }).always(function(){
        $("#pricingAndImages_ajax_loader").hide();
        pricingImagesTablesorter();
    });
}
function colRem ($table,colNum){
    $table.find('tr>*:nth-child('+colNum+')').remove();
}
function imageColClean ($data){
    var imgArr = [], rows = 0;
    $data.find("tr").each(function(){
        var src = $(this).find("td>img").attr("src");
        if(src) {
            src = src.match(/[a-z0-9-_]*\.(gif|jpg|png)/i);
            if(src[0].match(/no-image/) || $.inArray(src[0],imgArr) > -1) {
                $(this).remove();
            } else {
                imgArr.push(src[0]);
            }
        }
    });
    if($data.find("tr").length == '1'){
        $data.empty();
        $('#pricingAndImages').html("No images available for this drug.");
    }
}
function pricingImagesTablesorter() {
    $("#ref_priceimgtable").tablesorter( {sortList: [[0,0],[1,0]]} );
}
/* End Drug pricing images */

/* Patient handout  */
function loadPatientHandoutRoutedDrugs(){
    var contentId = CURRENT_DRUG_ID;
    $('#patientHandoutRoutedDrugs').empty();
    $('#handout').empty();
    $("#patientHandoutRoutedDrugs_ajax_loader").show();
    $("#patientHandout_ajax_loader").hide();
    $('#print_handout_office').hide();

    var url = '/patienthandout.do?action=getRoutedDrugs&contentId=' + contentId;

    $.getJSON(url, function(data){
        var routedDrugs = data['routedDrugsList'];
        var count = routedDrugs.length;
        var routedDrugId;
        var routedDrugDescription;

        if (count == 0) {
            $('#patientHandoutRoutedDrugs').html("A Patient Handout is not currently available for this monograph.");
        } else if (count == 1) {
            routedDrugId = routedDrugs[0].id;
            loadPatientHandout(routedDrugId);
        } else {
            var htmlString = '';
            htmlString += '<div class="subheading">Select a drug:</div><select id="patient-handout-drugs">';
            for (var i = 0; i < routedDrugs.length; i++) {
                routedDrugId = routedDrugs[i].id;
                routedDrugDescription = routedDrugs[i].description;
                htmlString += '<option value="'+routedDrugId+'">' + routedDrugDescription + '</option>';
            }
            htmlString += '</select>';
            $('#patientHandoutRoutedDrugs').html(htmlString);
            loadPatientHandout(routedDrugs[0].id);
        }
        $("#patientHandoutRoutedDrugs_ajax_loader").hide();
    });
}
function loadPatientHandout(routedDrugId) {
    $('#handout').empty();
    $("#patientHandout_ajax_loader").show();
    var url = '/patienthandout.do?action=getPatientHandout&routedDrugId=' + routedDrugId;
    $.getJSON(url, function(data){
        var patientHandout = data['patientHandout'];
        if (patientHandout.status == "SUCCESS") {
            var htmlToRender =
                '<span class="header">Patient Education<br>' +
                patientHandout.routedDrugDescription +
                '</span>';
            htmlToRender += patientHandout.text;
            $('#handout').html(htmlToRender);
            loadPrintHandoutOfficeInfo();
        } else {
            $('#handout').html("No Patient Handout Available");
        }
        $("#patientHandout_ajax_loader").hide();
    });
}
function loadPrintHandoutOfficeInfo(){
    if($('#editInfoLink').html()!=null && $('#editInfoLink').html()!='') {
        var replace=$('#editInfoLink').html().replace('&amp;','&');
        $('.handoutbtn a:eq(2)').attr('href',replace);
        $('.handout_officeinfo .text12').html($('#userPatientHandoutInfo').html());
        if(breakpoint!=1) {
            $('#print_handout_office').show();
        }
    }
}
/* End Patient handout  */

function ReferencePrint() {
    var printall = document.location.hash;
    printall = printall.split('#');
    if (!thisIsDrug) {
        //if ($('.sectionmenu').length > 0) {
        if (printall[1] == 'showall' || $('.sections-nav>ul>li').hasClass('current')) {
            $(".printcss").remove();
            window.print();
        }
        else {
            $('#printsection').show();
            var printsection = $('.sections-nav li.current_section').text();
            $('#print_secttionname').text(": "+printsection);
            //var printh1 = $('#maincolboxdrugdbheader h1').text();
            var parent = $('.sections-nav li.current_section').parent().parent().is("li");
            if(parent) var printh1 = $('.sections-nav li.current_section').parent().parent().find('a:first').text();
            else var printh1 = $('#maincolboxdrugdbheader h1').text();
            $('#print_h1name').text(printh1);
            showModal('ref_print_options');
        }
        // }
        //else {
        //  $(".printcss").remove();
        // window.print();
        //  }
    } else {
        $(".printcss").remove();
        window.print();
    }
    socialCp("print");
}
function ClinRefPrint2() {
    $(".printcss").remove();
    $('<style media=\"print\"class=\"printcss\"> .inactive {display: block !important;}</style>').appendTo('#ref_print_options');
    window.print();
    hideModal('ref_print_options');
}
function ClinRefPrint1() {
    $(".printcss").remove();
    window.print();
    hideModal('ref_print_options');
}

function printwithoutinfo() {
    $('<link rel="stylesheet" class="printcss" href="//img.medscape.com/medcss/1024/reference/drug/handout_print.css" type="text/css" media="print" />').appendTo('#handout');
    $('<style media=\"print\"> .handout_officeinfo {display: none;}</style>').appendTo('.handout_officeinfo');
    window.print();
}
function printwithinfo() {
    $('<link rel="stylesheet" class="printcss" href="//img.medscape.com/medcss/1024/reference/drug/handout_print.css" type="text/css" media="print" />').appendTo('#handout');
    $('<style media="print"> .handout_officeinfo {display: block} </style>').appendTo('.handout_officeinfo');
    window.print();
}


/* Drugs Formulary */
function loadDrugFormulary(){
    if (CURRENT_DRUG_ID != ""){
        $.ajax({
            url:"//api.medscape.com/ws/services/formularyService/getInternalDrugsHavingFormularies?contentId="+CURRENT_DRUG_ID+"&response=application/jsonp",
            dataType:'jsonp',
            type:'GET',
            jsonpCallback: "parseBrandlist"
        });
    }

}

function parseBrandlist(data) {
    if (data.internalDrugsHavingFormularies.length == 0) {
        $("#fs_formulary").html("<p>There is no formulary information available at this time.</p>");
    }
    else{
        if (data.internalDrugsHavingFormularies.length == 1) {
            if ($("#fs_select_single").length==0) {
                singleDrugId = data.internalDrugsHavingFormularies[0].drugId;
                $("#fs_formulary").prepend("<div id='fs_select_single'>Drug: <span class='drug_title'>"+data.internalDrugsHavingFormularies[0].drugName+"</span></div>");
            }
        }
        else{
            if ($("#fs_select").length==0) {
                var selectHTML = '<div id="fs_select"><p>Select a drug:</p><select>';
                for (i=0;i<data.internalDrugsHavingFormularies.length;i++) {
                    selectHTML+='<option value="'+data.internalDrugsHavingFormularies[i].drugId+'">'+data.internalDrugsHavingFormularies[i].drugName+'</option>'
                }
                selectHTML += '</select></div>'
                $("#fs_formulary").prepend(selectHTML);
            }
        }
        selectDrugName = data.internalDrugsHavingFormularies[0].drugName;
        selectDrugId = data.internalDrugsHavingFormularies[0].drugId;
        showBrandFS(selectDrugName,selectDrugId);

    }
}

function showBrandFS (brandName, brandID) {
    $("#fs_brandinfoMain").after("<div id=\"load_id1\" style=\"line-height: 40px; text-align: center;\">&nbsp;<img src=\"//img.medscape.com/pi/global/ornaments/ajax-loader.gif\" alt=\"activity indicator\">&nbsp;</div>");

    $("#fs_brandinfoMain").hide();
    $.ajax({
        url:"//api.medscape.com/ws/services/formularyService/getFormulariesByUserPlans?brandDrugId="+brandID+"&userId="+s_registered_user_id+"&response=application/jsonp",
        dataType:'jsonp',
        type:'GET',
        jsonpCallback: "parseFormulary"
    });

    if(typeof(singleDrugId)=="undefined") {

        $( document).one( "pvidReset", {
            wmdPV1: trackurl+'%2392_'+brandID,
            wmdPV2: '0',
            wmdT: '92_'+brandID
        }, function( event ) {
            if (typeof profads !== "undefined" && typeof webmd.ads2.display !== "undefined" && profads.ads2.KillSwitch()) {
                $("body >*").each(function () {
                    if (($(this).attr('id') != 'bodypadding') && ($(this).attr('id') != 'headerbox') && ($(this).attr('id') != 'footercontents')&& ($(this).attr('id') != 'adtagheader') && ($(this).attr('id') != 'vpFrame')) {
                        $(this).remove();
                    }
                });
                webmd.ads2.refresh({posSkip: {420: true, 520: true}, keys: {pvid: s_pageview_id, ep: '0'}});
                profads.ads2.ResizeTextAds();
            }
            wmdTrack(event.data.wmdT);
            wmdPageview(event.data.wmdPV1,event.data.wmdPV2);
        });
        //GenPVID();
        window.VPTrackFrame.getFile("desturl="+trackurl+"%5f92_"+brandID);
    }

}

function parseFormulary (fs_data){
    $("#fs_table").remove();
    var formInfo = "<span class='planLink'><a href='javascript:changePlan(userState);'>Add Insurance Plans</a></span><table cellpadding='0' cellspacing='0' border='0'><tr><th>My Plans</th><th>Tier</th><th>Restrictions</th></tr>";
    if (fs_data.formularyInfo =="") {
        $("#load_id1").remove();
        formInfo += "<tr><td><i>Add Insurance Plans</i></td><td></td><td></td></tr>";
        // $("#createList").show();
        //$("#fs_brandinfoMain").hide();
    } else  {
        $("#createList").hide();
        for(y=0;y<fs_data.formularyInfo.length;y++) {
            var pName =(fs_data.formularyInfo[y].planStateInfo.plan.healthPlanName);
            pName = pName.replace(/'/g,"&prime;");
            var compare_link="<div class='compare'><a href=\"javascript:compareFS(\'"+fs_data.formularyInfo[y].planStateInfo.plan.healthPlanId+"\',\'"+pName+"\',\'"+fs_data.formularyInfo[y].planStateInfo.stateInfo.stateAbbreviation+"\')\"> Compare to similar drugs</a></div>"
            var td1 = "<td><span class='planNameLabel'>"+fs_data.formularyInfo[y].planStateInfo.plan.healthPlanName+" &ndash; <span class='stateName'>"+fs_data.formularyInfo[y].planStateInfo.stateInfo.stateAbbreviation+"</span></span>"+compare_link+"</td>"
            var td2 = "<td>"+fs_data.formularyInfo[y].tierName+"</td>"
            if (fs_data.formularyInfo[y].restrictionCodes != undefined) {
                var td3 = "<td>"+fs_data.formularyInfo[y].restrictionCodes+"</td>"
            } else {
                var td3 = "<td>none</td>"
            }
            formInfo += "<tr>"+td1+td2+td3+"</tr>";
        }
    }
    formInfo += "</table>"
    $("#load_id1").remove();
    $("#fs_brandinfoMain").prepend("<div id='fs_table'>"+formInfo+"</div>");
    $("#fs_brandinfoMain, #tier_desc").show();
}

function changePlan(state) {
    $("#plan_state").val(state.toUpperCase());
    if(!$("#fstabs span").hasClass("opentab"))
        $("#fstabs span").eq(0).addClass("opentab");
    changePlanShow();
    wmdPageLink('dr-fp_fadd');
    $.ajax({
        url: "//api.medscape.com/ws/services/formularyService/getAllPlansByStateForUser?state="+state+"&userId="+s_registered_user_id+"&response=application/jsonp",
        dataType:'jsonp',
        jsonpCallback: "parseStatePlan"
    });
}

function changePlanShow(){
    showModal('plan-layer');
    $("#fs_planList").html("<div style=\"line-height: 40px; text-align: center;\">&nbsp;<img src=\"//img.medscape.com/pi/global/ornaments/ajax-loader.gif\" alt=\"activity indicator\">&nbsp;</div>");

}

function changePlanDone(){
    hideModal('plan-layer');
    if ($("#brands").length >0) {
        var brandID = $("#brands").val();
        showBrandFS('brand',brandID)
    } else {
        showBrandFS('brand',selectDrugId)
    }
}

function errorPopup(errortext) {
    $("body").append("<div id='error_cover'><div id='error_box'><span id=='error_text'>"+errortext+"</span><a id='error_ok' href=\"javascript:closeError();\">OK</a></div></div>")
}
function closeError() {
    $('#error_cover').remove();
}

function parseStatePlan(fs_data) {
    $("#fs_planList").html("<div style=\"line-height: 40px; text-align: center;\">&nbsp;<img src=\"//img.medscape.com/pi/global/ornaments/ajax-loader.gif\" alt=\"activity indicator\">&nbsp;</div>");

    var formInfo = "<div class='spacer'>&nbsp;</div><div id='fs_nonMedicare'><ul class='nonMedicare'>";
    var nonmedicareList = new getPlanList(fs_data.non_medicare);
    if(device=="mobile"){
        formInfo += nonmedicareList.getPlanListContent()+"</ul></div><div id='fs_medicare'><ul class='medicare inactive'>"
    }
    else{
        formInfo += nonmedicareList.getPlanListContent()+"</ul></div><div id='fs_medicare'><ul class='medicare'>"
    }
    var medicareList = new getPlanList(fs_data.medicare);
    formInfo += medicareList.getPlanListContent()+"</ul></div><div class='spacer'>&nbsp;</div>";
    $("#fs_planList").html(formInfo);
    $("#fs_brandinfoMain").show();
    setTimeout('$("#fs_planList").scrollTop(0);', 10);

}

function getPlanList(listData) {
    this.getPlanListContent = function() {
        var planList="";
        for(y=0;y<listData.length;y++) {
            if (listData[y].userSaved == "0") {
                planList += '<li class="unchecked" id="plan_'+listData[y].planStateInfo.plan.healthPlanId+'"><input type="checkbox" id="checkbox_'+listData[y].planStateInfo.plan.healthPlanId+'" name="plan_status" onclick="changePlanList(\''+listData[y].planStateInfo.plan.healthPlanId+'\',\''+s_registered_user_id+'\',this)" /><label for="checkbox_'+listData[y].planStateInfo.plan.healthPlanId+'"></label><span>'+listData[y].planStateInfo.plan.healthPlanName+'</span></li>';
            } else {
                planList += '<li class="ischecked" id="plan_'+listData[y].planStateInfo.plan.healthPlanId+'"><input type="checkbox" id="checkbox_'+listData[y].planStateInfo.plan.healthPlanId+'" checked="checked" name="plan_status" onclick="changePlanList(\''+listData[y].planStateInfo.plan.healthPlanId+'\',\''+s_registered_user_id+'\',this)" /><label for="checkbox_'+listData[y].planStateInfo.plan.healthPlanId+'"></label><span>'+listData[y].planStateInfo.plan.healthPlanName+'</span></li>';
            }
        }
        return planList;
    }
}

function changePlanList(planid,userid,element) {
    var stateId = $("select#plan_state").val();
    if ($(element).is(':checked')) {
        var saveurl="//api.medscape.com/ws/services/formularyService/saveUserPlan?userId="+userid+"&planId="+planid+"&state="+stateId+"&response=application/jsonp";
        $.ajax({
            url: saveurl,
            dataType:'jsonp',
            success: function(data) {
                if(data.status.statusCode.code==0){
                    //$(element).parent().addClass('savedPlan');
                    $(element).next().after("<span class='saving'>Saved</span>");
                    setTimeout('$(".saving").animate({marginLeft: "-25px",zIndex:"-10"}, 2000 )', 4000);
                    setTimeout('$("span.saving").remove()',7000);
                } else {
                    $(element).attr('checked', false);
                    if(data.status.statusCode.code==10){
                        errorPopup("Sorry, you have reached the maximum number of plans you can include in your My Plans list (20 plans).")
                    } else {
                        errorPopup("Sorry, there seems to be a problem on our end in adding or updating your plans. Please try again in little while. ")
                    }
                }
            },
            error: function(){
                $(element).attr('checked', false);
                errorPopup("Sorry, there seems to be a problem on our end in adding or updating your plans. Please try again in little while. ")
            }
        });
    } else {
        var saveurl="//api.medscape.com/ws/services/formularyService/deleteUserPlan?userId="+userid+"&planId="+planid+"&state="+stateId+"&response=application/jsonp";
        $.ajax({
            url: saveurl,
            dataType:'jsonp',
            success: function(data) {
                if(data.status.statusCode.code==0){
                    //$(element).parent().addClass('unsavedPlan');
                    // $(element).parent().attr('class','savedPlan');
                    $(element).after("<span class='removing'>Removed</span>");
                    setTimeout('$(".removing").animate({marginLeft: "-25px",zIndex:"-10"}, 1500 )', 4000);
                    setTimeout('$("span.removing").remove()',7000);
                } else {
                    $(element).attr('checked', true);
                    errorPopup("Sorry, there seems to be a problem on our end in adding or updating your plans. Please try again in little while. ")
                }
            },
            error: function(){
                $(element).attr('checked', true);
                errorPopup("Sorry, there seems to be a problem on our end in adding or updating your plans. Please try again in little while. ")
            }
        });
    }
}

function compareFS(planid,planName,stateId) {
    $("#compareList").html("<div style=\"line-height: 40px; text-align: center;\">&nbsp;<img src=\"//img.medscape.com/pi/global/ornaments/ajax-loader.gif\" alt=\"activity indicator\">&nbsp;</div>");
    showModal('compareLayer');

    $("#plan_title").html(planName+"<span id='plan_title_state'> &ndash; "+stateId+"</span>");
    wmdPageLink('dr-fp_fcomp');
    $.ajax({
        url: "//api.medscape.com/ws/services/formularyService/getFormulariesByPlanAndClasses?planId="+planid+"&classes="+drug_clID+"&state="+stateId+"&response=application/jsonp",
        dataType:'jsonp',
        jsonpCallback: "parseClass"
    });

}

function parseClass(data) {
    var planByClass;
    if (drug_clID.length == "1") {
        planByClass = "<span class='class_name'>Class: "+data.classInfo[0].className+"</span>";
        for(y=0;y<drug_clID.length;y++) {
            planByClass += "<table class='compareTable' cellspacing='0' cellpadding='0' border='0'>"
            var brandInClass = new getBrandList(data.classInfo[y]);
            planByClass += brandInClass.getBrandListContent()+"</table>";
        }
    } else {
        // $("#compareLayer .header p").css({'display':'block'});
        // $("#compareLayer #compareList").css({'height':'348px'});
        planByClass = "<p>Select a class to view formulary status for similar drugs</p><div class='accordion'>"
        for(y=0;y<drug_clID.length;y++) {
            planByClass += "<div class='expandCont'><div class='expandLink'>Class: "+data.classInfo[y].className+"</div><div class='expandContent' style='display:none'><table class='compareTable' cellspacing='0' cellpadding='0' border='0'>"
            var brandInClass = new getBrandList(data.classInfo[y]);
            planByClass += brandInClass.getBrandListContent()+"</table></div></div>";
        }
    }
    $("#compareList").html(planByClass);
}

function getBrandList(data) {
    this.getBrandListContent = function() {
        var domain = trackurl
        var content = "<tr><th>Drug</th><th>Tier</th><th>Restrictions</th></tr>";
        for(t=0;t<data.formularies.length;t++) {
            if(data.formularies[t].contentId==CURRENT_DRUG_ID) {
                var td1 = "<td>"+data.formularies[t].drugName+"</td>"
            } else {
                var td1 = "<td><a href='//reference.medscape.com/drug/"+data.formularies[t].contentId+" 'onclick=\"wmdPageLink(\'dr-fp_fbrand\')\">"+data.formularies[t].drugName+"</a></td>"
            }
            var td2 = "<td>"+data.formularies[t].tierName+"</td>"
            if (data.formularies[t].restrictionCodes != undefined) {
                var td3 = "<td>"+data.formularies[t].restrictionCodes+"</td>"
            } else {
                var td3 = "<td>none</td>"
            }
            content += "<tr>"+td1+td2+td3+"</tr>";
        }
        return content;
    }
}
/* End Drug Formulary*/


function nextPrevLinks(){
    $('.back_next_btn').show();
    var _this=$('.current_section');
    if (_this.length === 0) return;
    if(!$(_this).is(':last-child')){
        var nextli = (($(_this).next()).attr('class')).split(" ")[0];
        var hash_after=$(".sections-nav ."+nextli+">a").attr('href');
        var track_after = "onclick=\"AdPageRefresh('"+trackurl+hash_after+"', '1', 'cr-sn_next', '"+hash_after+"');\"";
        var track_after_drug = "onclick=\"AdPageRefresh('"+trackurl+hash_after+"', '1', 'dr-sn1_next');\"";
        $('.next_btn_drug').html("<a "+track_after_drug+" href='" + hash_after + "'>Next: <span>" + $('.sections-nav li.'+nextli+'>a').text()  + " </span></a>");
        $('.next_btn').html("<a "+track_after+" href='" + hash_after + "'>Next: <span>" + $('.sections-nav li.'+nextli+'>a').text()  + " </span></a>");
    }
    if(!$(_this).is(':first-child')){
        var prevli = (($(_this).prev()).attr('class')).split(" ")[0];
        var hash_before=$(".sections-nav ."+prevli+">a").attr('href');
        var track_before = "onclick=\"AdPageRefresh('"+trackurl+hash_before+"', '2', 'cr-sn_prev', '"+hash_before+"');\"";
        var track_before_drug = "onclick=\"AdPageRefresh('"+trackurl+hash_before+"', '2', 'dr-sn2_prev');\"";
        $('.back_btn_drug').html("<a "+track_before_drug+" href='" + hash_before + "'>Previous </a>");
        $('.back_btn').html("<a "+track_before+" href='" + hash_before + "'>Previous </a>");
    }
}

this.refImgShow=function(clinrefimg) {

    // var gal_thumb_length;
    // var scroll_left_pos;
    var oldMediaGallery=false;
    var carousel = new Carousel('#carousel');
    var imgid = parseFloat(clinrefimg) ;

    if($(".gallery_scroller").length){
        oldMediaGallery = true;
    }

    var carousel = new Carousel('#carousel');
    var imgid = parseFloat(clinrefimg) ;

    if(oldMediaGallery){

    var gal_thumb_length;
    var scroll_left_pos;

    if(breakpoint==1) {
        gal_thumb_length=4;
        scroll_left_pos=350;
    }
    else {
        gal_thumb_length=10;
        scroll_left_pos=750;
    }
    }


    if (!mediaGalleryLoaded) {
        mediaGalleryLoaded = true;
        if(oldMediaGallery){
        $('.gal_thumb').each(function(){
         if ( $(this).children().length == 0 ) {
            var imgSrc = $(this).attr('data-rel');
            $(this).append( "<img src='"+imgSrc+"'>" );
         }
        });
        }

        $('.imgWrapper').each(function(){
         if ( $(this).children().length == 0 ) {
            var imgSrc1 = $(this).attr('data-rel');
            $(this).append( "<img src='"+imgSrc1+"'>" );
         }
        });

    if(oldMediaGallery){
    $('#imageGallery .gallery_scroller').wrap('<div class="gallery_scroller_cont"></div>');
    if ($('.gal_thumb').length > gal_thumb_length){
        if (!$(".previmagebtn").length) {
            $("#imageGallery .gallery_scroller").before("<div class='previmagebtn'></div>");
            $("#imageGallery .gallery_scroller").after("<div class='nextimagebtn'></div>");
        }
    }

    if(breakpoint>1){
        if($('.gal_thumb').length > 10){
            $(".gallery_scroller").css("width", 750);
            $(".gallery_scroller_cont").css("width", 850);
        }
        else{
            var width = $('.gal_thumb').length * 75;
            $(".gallery_scroller").css("width", width);
            $(".gallery_scroller_cont").css("width", width);
        }
    }
    else if(breakpoint==1){
        if($('.gal_thumb').length > 4){
            $(".gallery_scroller").css("width", 300);
            $(".gallery_scroller_cont").css("width", 400);
        }
        else{
            var width = $('.gal_thumb').length * 75;
            $(".gallery_scroller").css("width", width);
            $(".gallery_scroller_cont").css("width", width);
        }
    }


    var thisnum = $(".gal_thumb").index(".selectedThumb")+1;
    }

    //  Tracking functions
    $( document).one( "pvidReset", {
        wmdPV1: trackurl+"-img"+clinrefimg,
        wmdPV2: '1',
        wmdT: 'cr-im_1'
    }, function( event ) {
        if (breakpoint != 1 &&typeof profads !== "undefined" && typeof webmd.ads2.display !== "undefined" && profads.ads2.KillSwitch()) {
            iImg122++
            webmd.ads2.sizes[122] = [];

            webmd.ads2.sizes[122] = [
                [300, 250],
                [300, 350]
            ];

            $('#adtagrightcol_imglayer').html('<div id="ads-pos-122-img'+iImg122+'" class="AdUnit"></div>');
            // webmd.ads2.defineAd({id:'ads-pos-122-gallery', pos:122, sizes:[[300, 250], [300, 350]],immediate: true, collapseAfter: true});
            webmd.ads2.defineAd({id: 'ads-pos-122-img'+iImg122, pos: 122, sizes: [[300, 250], [300, 350]]}).refresh({id: 'ads-pos-122-img'+iImg122});
        }
        wmdTrack(event.data.wmdT);
        wmdPageview(event.data.wmdPV1,event.data.wmdPV2);
    });
    GenPVID();
    BItrack("cr-im_1");


    if(oldMediaGallery){

    $('.nextimagebtn').click(function(){
        $( ".gallery_scroller" ).animate({scrollLeft: $(".gallery_scroller").scrollLeft()+scroll_left_pos},function(){
            carousel.scrollArrow();
        });
    });

    $('.previmagebtn').click(function(){
        $( ".gallery_scroller" ).animate({scrollLeft: $(".gallery_scroller").scrollLeft()-scroll_left_pos},function(){
            carousel.scrollArrow();
        });
    });
    $('.gal_thumb').off("click");

    $('.gal_thumb').on("click", function(){
        carousel.showPane($(this).index(),true);
        //  wmdPageLink("cr-im_thumb");
        //	Tracking functions on thumb click
        $( document).one( "pvidReset", {
            wmdPV1: trackurl+"-img"+($(this).index()+1),
            wmdPV2: '1',
            wmdT: 'cr-im_thumb'
        }, function( event ) {
            if (breakpoint != 1 && typeof profads !== "undefined" && profads.ads2.KillSwitch()) {
                $("body >*").each(function () {
                    if (($(this).attr('id') != 'bodypadding') && ($(this).attr('id') != 'headerbox') && ($(this).attr('id') != 'footercontents') && ($(this).attr('id') != 'adtagheader') ) {
                        $(this).remove();
                    }
                });
                webmd.ads2.refresh({id:'ads-pos-122-img'+iImg122, keys:{pvid:s_pageview_id,ep:'0'}});
            }
            wmdTrack(event.data.wmdT);
            wmdPageview(event.data.wmdPV1,event.data.wmdPV2);
        });
            //GenPVID();
            //BItrack("cr-im_thumb"+$(this).index()+1);
        });
        GenPVID();
        BItrack("cr-im_thumb"+$(this).index()+1);
    }

    $(document).on('click', '.enlargeThisImage', function(e) {
        carousel.setZoom();
    });

    }

    $("#imageGallery").css("z-index", z_index_layer + 500);

     $("#nextImgbtn").on("click", function(){
        $('#nextImgbtn').removeClass("imgbtn_grey");
        $('#prevImgbtn').removeClass("imgbtn_grey");
        carousel.next(imgid);
    });

    $("#prevImgbtn").on("click", function(){
        $('#nextImgbtn').removeClass("imgbtn_grey");
        $('#prevImgbtn').removeClass("imgbtn_grey");
        carousel.prev(imgid);
    });



    if(clinrefimg == 1) {
        if(oldMediaGallery) $(".previmagebtn").css('opacity', '0.5');
        else $("#prevImgbtn").addClass("imgbtn_grey");

        carousel.showPane(0);
}
    else{
        carousel.showPane(clinrefimg-1);
    }

    showModal("imageGallery");

    carousel.init();


}


$(document).on('click', '.close_gallery', function(e) {
    hideModal("imageGallery");
});

function showToolTip(_this, contentId, refId) {
    if ($('.tooltip').length) {
        $('.tooltip').remove();
    }
    $(_this).addClass("tooltip_link");
    var ref = ($("#references-layer .modal-content li").eq(refId - 1).html());
    var tooltip_text = ref;
    $(_this).append('<div class="tooltip">' + tooltip_text + '</div>');

    if(breakpoint==1){
        var wdTwoThrid = $(window).width() * .66;
        var wdOneThrid = $(window).width() * .33;
        if($(_this).offset().left>=wdTwoThrid){
            $(".tooltip").css("right", -25);
        }
        else if($(_this).offset().left>wdOneThrid && $(_this).offset().left<wdTwoThrid ){
            $(".tooltip").css("right", -130);
            $(".tooltip").addClass("posCenter");
        }
        else{
            $(".tooltip").css("left", -25);
            $(".tooltip").addClass("posRight");
        }
    }else{
        if($(_this).offset().left >= 300 ) {
            $(".tooltip").css("right", -25);
        } else {
            $(".tooltip").css("left", -25).addClass("posRight");
        }
    }

}

function showModal(contentId,refId) {

        $("body").addClass("modal-layer-on");
    if(breakpoint==1){
        $('body').removeClass("refmenushow");
        $('#section_tab').removeClass("open");
    }
    if(contentId=="references-layer" && refId!=undefined){
        var ref = ($("#references-layer .modal-content li").eq(refId).html());
        $("#"+contentId+" .modal-content li").hide();
        $("#"+contentId+" .modal-content li:nth-child("+refId+")").show();
        $("#"+contentId+" .modal-content li").css("list-style-type", "none" );
    }
    if(contentId=="clinref-table-layer" && refId!=undefined){
        refTableShow(refId);
    }
    $("#"+contentId).removeClass("inactive");
    $("#"+contentId).addClass("active");
    $("#whiteoutlayer").css({'display':'block'});
    if(breakpoint!=1) {
        $("#"+contentId).css({'position':'absolute'});
        movelayers(contentId);
    }
    if ((navigator.userAgent.indexOf('iPad') != -1) && !(navigator.userAgent.match(/OS 5(_\d)+ like Mac OS X/i))) {
        $("#whiteoutlayer").css({'position':'absolute','top':"0","height":document.body.scrollHeight});
    } else {
        $("#whiteoutlayer").css({'position':'fixed','top':'0'});
    }
    //  $('body').css({'overflow': 'hidden'});
}

function hideModal(contentId) {
    if ($('body').hasClass("modal-layer-on")) {
        $("body").removeClass("modal-layer-on");

    $("#"+contentId).addClass("inactive");
    $("#"+contentId).removeClass("active");
    $("#"+contentId).css({'position':''});
    $("#"+contentId).css({'top':''});
    $("#whiteoutlayer").hide();
    }

    if(contentId=="references-layer"){
        $("#"+contentId+" .modal-content li").show();
        $("#"+contentId+" .modal-content li").css("list-style-type", "inherit" );
    }
    //   $('body').css({'overflow': 'auto'});
    if(contentId=="imageGallery"){
        webmd.ads2.sizes[122] = [
            [300, 250],
            [300, 600],
            [300, 350]
        ];
        if(breakpoint !=1){
            if (typeof profads !== "undefined" && profads.ads2.KillSwitch()) {
                $('#ads-pos-122-img'+iImg122).remove();
            }
        }
    }
}

function navHeight(thisTop){
    var windowHeight = $(window).height();
    var navHeight ;
    if(thisTop==0)
        navHeight = windowHeight-80; //30px from bottom + height of sectionTab
    else
        navHeight = windowHeight-156; //30px from bottom + height of sectionTab + top offset
    $("#menuWrapper").css({"max-height":navHeight+"px"});
}


function Carousel(element){
    var self = this;
    element = $(element);
    var container = $('>ul', element);
    var panes = $('>ul>li', element);
    var pane_width = 0;
    var pane_count = panes.length;
    var current_pane = 0;
    this.init = function() {
        var c = this;
        $('.gal_thumb').click(function(){
            //$(this).click(function(){
            // c.showPane($(this).index(),true);
            //  console.log("b")
            // wmdPageLink("cr-im_thumb");
            //});
        });
        $(".imgWrapper").on('click', function(){
            setZoom();
        });
        setPaneDimensions();
        $("#totalImg").html(pane_count)
        $(window).on('load resize orientationchange', function() {
            setPaneDimensions();
            c.showPane(current_pane);
        });
        //  setTimeout("$('#toastAlert').remove()",3000);
        //  document.addEventListener('touchstart', function(e) {
        //   $('#toastAlert').fadeOut('slow');
        // });

    };
    this.scrollArrow=function(){
        device=detectDevice();
        if(device=="mobile")
            var maxScroll = ($('.gallery_scroller_cont').width() - $('.gallery_scroller').scrollLeft()) + $('.gallery_scroller').width();
        else
            var maxScroll = ($('.gallery_scroller_cont').width() - $('.gallery_scroller').scrollLeft()) - $('.gallery_scroller').width();

        if($('.gallery_scroller').scrollLeft()==0){
            $(".previmagebtn").addClass("disabled");
        }else{
            $(".previmagebtn").removeClass("disabled");
        }
        if(maxScroll<0){
            $(".nextimagebtn").addClass("disabled");
        }else{
            $(".nextimagebtn").removeClass("disabled");
        }
    };
    this.setZoom=function(){
        if(!$("#imageGallery").hasClass("videoView")) {
            wmdPageLink('cr-im_enlg');
            var length=0;
            if($(".gallery_scroller").length) length = $(".gal_thumb").length;
            else length = $(".imgWrapper").length;
            var imgLoc = $(".selectedThumb").attr('data-rel');
            $("body").addClass('engImgView');
            $("body").append('<id id ="engImage" style="position:fixed;top:0;bottom:0;right:0;left:0;z-index:'+(z_index_layer+510)+';background-color:#eee;overflow-y:scroll"><div id="engImgHeader">'+($(".selectedThumb").parent().index()+1)+' of '+$("#imageGallery .imgWrapper").length+'<span id="closeEnlarge"></span></div><div style="overflow:auto; margin:45px auto; height:100%"><img src="'+imgLoc+'" id="mycanvas" style="display:block; margin:0 auto"></canvas></div></div></div>');
            //}
            $("#closeEnlarge").click(function(){
                $("body").removeClass('engImgView');
                $("#engImage").remove();
                $(window).trigger('resize');
            });
        }
    };
    function setPaneDimensions() {
        pane_width = element.width();
        panes.each(function() {
            $(this).width(pane_width);
        });
        container.width(pane_width * pane_count);
    };
    this.showPane = function(index, animate, samesld) {
        index = Math.max(0, Math.min(index, pane_count - 1));
        current_pane = index;
        var offset = -(100 / pane_count * current_pane);
        setContainerOffset(offset, animate);
        if(!samesld){
            $("#currentImg").html(index + 1);
            $(".gal_thumb").removeClass("selectedThumb");
            $(".gal_thumb").eq(index).addClass("selectedThumb");
            if(!$(".gallery_scroller").length){
                $("#carousel .imgWrapper").removeClass("selectedThumb");
                $("#carousel .imgWrapper").eq(index).addClass("selectedThumb");
            }
            if($(".imgWrapper").eq(index).find('.html5vidbox').length != 0) {
                $("#imageGallery").addClass("videoView");
            } else {
                $("#imageGallery").removeClass("videoView");
            }
            if($(".gallery_scroller").length){
            $(".gallery_scroller").animate({
                scrollLeft: $(".selectedThumb").offset().left+$(".gallery_scroller").scrollLeft()-pane_width/3
            }, 300)
            }
            //}
        }
    };

    function setContainerOffset(percent, animate) {
        container.removeClass('animate');
        if (animate) {
            container.addClass('animate');
        }
        container.css('transform', 'translate3d(' + percent + '%,0,0) scale3d(1,1,1)');
    }
    this.next = function() {
        if(current_pane>=pane_count-2) $("#nextImgbtn").addClass("imgbtn_grey");
        return this.showPane(current_pane + 1, true);
        wmdTrack('cr-im_next');
        wmdPageview(trackurl+"-img"+(current_pane + 1),1);

    };
    this.prev = function() {
        if(current_pane<=1) $("#prevImgbtn").addClass("imgbtn_grey");
        return this.showPane(current_pane - 1, true);
        wmdTrack('cr-im_prev');
        wmdPageview(trackurl+"-img"+(current_pane - 1),1);

    };

    function handleHammer(ev) {
        ev.gesture.preventDefault();
        switch (ev.type) {
            case 'dragright':
            case 'dragleft':
                var pane_offset = -(100 / pane_count) * current_pane;
                var drag_offset = 100 / pane_width * ev.gesture.deltaX / pane_count;
                if (current_pane == 0 && ev.gesture.direction == 'right' || current_pane == pane_count - 1 && ev.gesture.direction == 'left') {
                    drag_offset *= 0.2;
                }
                setContainerOffset(drag_offset + pane_offset);
                break;
            case 'swipeleft':
                self.next();
                //   wmdPageLink('cr-im_next');
                ev.gesture.stopDetect();
                break;
            case 'swiperight':
                self.prev();
                //   wmdPageLink('cr-im_prev');
                ev.gesture.stopDetect();
                break;
            case 'release':
                if (Math.abs(ev.gesture.deltaX) > pane_width / 2) {
                    if (ev.gesture.direction == 'right') {
                        self.prev();
                        wmdPageLink('cr-im_prev');

                    }else{
                        self.next();
                        wmdPageLink('cr-im_next');

                    }
                }else{
                    self.showPane(current_pane, true,true);
                }
                break;
        }
    }

    if(breakpoint<=2){
    new Hammer(element[0], {
        dragLockToAxis: true
    }).on('release dragleft dragright swipeleft swiperight', handleHammer);
    }
}

function detectDevice(){
    var device;
    if (window.innerWidth < 768) //use window.innerWidth instead of $(window).width() to count the left scrollbar and to match css mediaqueries
        device = "mobile";
    else if (window.innerWidth > 768 && window.innerWidth <= 980)
        device = "tablet";
    else
        device = "desktop";

    return device;
}


function getParamQuery(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

function adexGet(aurl, atarget, awaitdiv, pref, postf) {

    if (pref) { pref(); }

    toggleDisplay(awaitdiv,"block");

    $.ajax({
        type: "GET",
        url: aurl,
        success: function(pageHTML){
            handleGet(atarget, awaitdiv, pageHTML);
            if (postf) { postf(atarget, awaitdiv, pageHTML); }
        }
    });

}

function toggleDisplay(elem, display) {
    if (document.getElementById &&
        document.getElementById(elem)) {
        document.getElementById(elem).style.display = display;
    }
}

// Default Handler for adexGet
function handleGet(atarget, awaitdiv, pageHTML) {
    toggleDisplay(awaitdiv,"none");
    document.getElementById(atarget).innerHTML = pageHTML;
}
function showemailbox() {
    showsubmitqtoolbox('inactive');
    showemailtoolbox('active');
    movelayers('emailadexcontainer');
}

function showsubmitbox() {
    showemailtoolbox('inactive');
    showsubmitqtoolbox('active');
}

function processEmailFormResponse(atarget, errtarget, awaitdiv, status, pageHTML) {
    handleFormSubmit(atarget, errtarget, awaitdiv, status, pageHTML);
    confirmsent(status)
}

function processFeedbackFormRequest() {
    var feedSubj = document.title;
    if (feedSubj.length > 70)
    {
        feedSubj = feedSubj.substring(0,70).replace(/\S+$/,"").replace(/[,;:]? $/," ...")
    }
    $('#topicSubj').append(feedSubj);
    $('#subject,#attrcontentTitle').val(feedSubj);
    $('#attrarticleId,#articleId').val($('meta[name=metasegvar]').attr('content').match(/artid=\d+;/)[0].substring(6, $('meta[name=metasegvar]').attr('content').match(/artid=\d+;/)[0].length - 1));
    $('#fbclose').click(function() {document.getElementById('emailadexbox').innerHTML = "";});
}

function processSubmitThisResponse(atarget, errtarget, awaitdiv, status, pageHTML) {
    handleFormSubmit(atarget, errtarget, awaitdiv, status, pageHTML);
    submitthisconfirmsent(status)
}
/* Show The Email Tool */
function showemailtoolbox(state) {
    if (document.getElementById) {
        var arttool = document.getElementById("emailadexbox");
        if(arttool != null){
            setElementClass(arttool, state);
            $("#emailadexcontainer").addClass("emailadexcontainer-open");
            movelayers("emailadexcontainer");
            if (state == 'inactive')
            {	$('#emailconfirmation').removeClass('feedbackconfirm');
                arttool.innerHTML = "";
            }
        }
    }
}

/* Confirm Sent Email */
function confirmsent(status) {
    if (document.getElementById) {
        if (status!=1) {
            var arttool = document.getElementById("emailthiserror");
            setElementClass(arttool, 'active');
            return false;
        }
        else {
            var arttool = document.getElementById("emailconfirmation");
            setElementClass(arttool, 'active');
            var arttool2 = document.getElementById("emailthiserror");
            setElementClass(arttool2, 'inactive');
            var arttoolform = document.getElementById("emailform");
            setElementClass(arttoolform, 'inactive');
            socialCp("emailthis");
            return false;
        }
    }
}

function adexFormSubmit(aformId, atarget, errtarget, awaitdiv, pref, postf) {

    if (pref) { pref(); }

    var aform = "#"+aformId;

    if (typeof postf == 'function' && String(postf).match(/function \w+\(/g)[0].substring(9,String(postf).match(/function \w+\(/g)[0].length - 1) == "processEmailFormResponse")

    {

        // This REGEX  is used to validate sender and recipient emails when sharing articles.
        var mailTestPatt= /^[a-zA-Z0-9!#$%^&*_+\-={}'\\|\/?~]([a-zA-Z0-9!#$%^&*_+\-={}'\\|\/?~]||([.]{1,1}[a-zA-Z0-9!#$%^&*_+\-={}'\\|\/?~]))*@([A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9]\.)+[A-Za-z]{2,6}$/;
        $('#' + errtarget).html('');
        $('#' + errtarget).removeClass('inactive');
        var errorFlag = false;

        trimSpace('#senderEmailAddress');
        trimSpace('#recipientEmailAddress');

        checkWrapper('#senderEmailAddress');
        checkWrapper('#recipientEmailAddress');

        if ($('#senderName').val() == "" || $('#senderName').val().match(/^\s+$/g) !== null)
        {
            $('#' + errtarget).append('<div>Your Name is required.</div>');
            errorFlag = true;
        }

        if ($('#senderEmailAddress').val() == "")
        {
            $('#' + errtarget).append('<div>Please enter Your Email Address.</div>');
            errorFlag = true;
        }

        if ($('#recipientEmailAddress').val() == "" && !$('#copySender').is(':checked'))
        {
            $('#' + errtarget).append('<div>Please enter a Recipient Address and/or check the Send me a copy checkbox.</div>');
            errorFlag = true;
        }

        if ($('#senderEmailAddress').val() !== "" && (mailTestPatt.test($('#senderEmailAddress').val()) == false || $('#senderEmailAddress').val().match(/@/g).length > 1 || $('#senderEmailAddress').val().match(/[ "(),:;<>\[\\\]]/g) !== null))
        {
            $('#' + errtarget).append('<div>' + $('#senderEmailAddress').val() + ' is an Invalid Email Address.</div>');
            errorFlag = true;
        }

        if ($('#recipientEmailAddress').val() !== "" && (mailTestPatt.test($('#recipientEmailAddress').val()) == false || $('#recipientEmailAddress').val().match(/@/g).length > 1 || $('#recipientEmailAddress').val().match(/[ "(),:;<>\[\\\]]/g) !== null))
        {
            $('#' + errtarget).append('<div>' + $('#recipientEmailAddress').val() + ' is an Invalid Email Address.</div>');
            errorFlag = true;
        }

        if ($('#emailMsg').val().length > 250)
        {
            $('#' + errtarget).append('<div>Optional Message can not be greater than 250 characters.</div>');
            errorFlag = true;
        }

        if (errorFlag == false)
        {
            var options = {
                type: "POST",
                dataType: "xml",
                success: function(r, s) {
                    var status = $(r).find("status").text();
                    var page = "Thank you. An email with this link has been sent.";
                    if (postf) { postf(atarget, errtarget, awaitdiv, status, page); }
                    else { handleFormSubmit(atarget, errtarget, awaitdiv, status, page); }
                }
            }

            $(aform).ajaxSubmit(options);

        }

    }

    else if (typeof postf == 'function')

    {
        //toggleDisplay(awaitdiv,"block");
        var options = {
            type: "POST",
            dataType: "xml",
            success: function(r, s) {
                var status = $(r).find("status").text();
                var page = $(r).find("page").text()
                if (postf) { postf(atarget, errtarget, awaitdiv, status, page); }
                else { handleFormSubmit(atarget, errtarget, awaitdiv, status, page); }
            }
        }

        $(aform).ajaxSubmit(options);
    }

    else if (String(postf).indexOf('processFeedbackForm') != -1)

    {

        var mailTestPatt=/^[a-zA-Z0-9!#$%^&*_+\-={}'\\|\/?~]([a-zA-Z0-9!#$%^&*_+\-={}'\\|\/?~]||([.]{1,1}[a-zA-Z0-9!#$%^&*_+\-={}'\\|\/?~]))*@([A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9]\.)+[A-Za-z]{2,6}$/;
        $('#emailthiserror').html('');
        $('#emailthiserror').removeClass('inactive');
        var errorFlag = false;

        $('#confirmationPage').val(location.origin + $('#confirmationPage').val())

        trimSpace('#message');
        trimSpace('#fromEmail');
        checkWrapper('#fromEmail');

        if ($('#senderName').val() == "" || $('#senderName').val().match(/^\s+$/g) !== null)
        {
            $('#emailthiserror').append('<div>Your Name is required.</div>');
            errorFlag = true;
        }

        if ($('#fromEmail').val() == "")
        {
            $('#emailthiserror').append('<div>Please enter Your Email Address.</div>');
            errorFlag = true;
        }

        if ($('#fromEmail').val() !== "" && (mailTestPatt.test($('#fromEmail').val()) == false || $('#fromEmail').val().match(/@/g).length > 1 || $('#fromEmail').val().match(/[ "(),:;<>\[\\\]]/g) !== null))
        {
            $('#emailthiserror').append('<div>' + $('#fromEmail').val() + ' is an Invalid Email Address.</div>');
            errorFlag = true;
        }

        if ($('#message').val() == "")
        {
            $('#emailthiserror').append('<div>Please enter Your Message.</div>');
            errorFlag = true;
        }

        if ($('#message').val().length > 1500)
        {
            $('#emailthiserror').append('<div>Message can not be greater than 1500 characters.</div>');
            errorFlag = true;
        }

        if (errorFlag == false)
        {
            var acctEmail = encodeURIComponent($('#attrfromEmail').val()),
                browserDevice = "%20%7c%20" + encodeURIComponent(window.navigator.userAgent);
            $('#attrfromEmail').val($('#fromEmail').val());
            $('#attrsenderName').val($('#senderName').val());
            $('#fromEmail').attr('name','attrfromEmail1');
            $('#fromEmail').attr('id','attrfromEmail1');
            
            $.ajax({
                type: 'POST',
                url: '/postemail?', 
                data: $('form[name=feedbackform]').serialize().replace(/\+/g,"%20") + '&toEmail=medscapefeedback%40webmd.net&fromEmail=medscapefeedback%40webmd.net&attracctEmail=' + acctEmail + '&attruserProf=' + s_user_group + browserDevice,
                success: function() {
                    $('#feedbackform').hide();
                    $('#emailconfirmation').addClass('feedbackconfirm');
                    $('#emailconfirmation').html('Thank you. Your feedback has been received.');
                    $('#emailconfirmation').removeClass('inactive');
                    $('#emailconfirmation').addClass('active');
                },
                error: function() {
                    $('#attrfromEmail1').attr('name','fromEmail');
                    $('#attrfromEmail1').attr('id','fromEmail');
                }
            });

        }

    }

    return false;
}
jQuery.fn.ajaxSubmit = function(options) {
    if (typeof options == 'function')
        options = { success: options };

    options = jQuery.extend({
        url:  this.attr('action') || window.location,
        type: this.attr('method') || 'GET'
    }, options || {});

    var a = this.formToArray(options.semantic);

    // give pre-submit callback an opportunity to abort the submit
    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) return this;

    // fire vetoable 'validate' event
    var veto = {};
    jQuery.event.trigger('form.submit.validate', [a, this, options, veto]);
    if (veto.veto)
        return this;

    var q = jQuery.param(a);//.replace(/%20/g,'+');

    if (options.type.toUpperCase() == 'GET') {
        options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
        options.data = null;  // data is null for 'get'
    }
    else
        options.data = q; // data is the query string for 'post'

    var $form = this, callbacks = [];
    if (options.resetForm) callbacks.push(function() { $form.resetForm(); });
    if (options.clearForm) callbacks.push(function() { $form.clearForm(); });

    // perform a load on the target only if dataType is not provided
    if (!options.dataType && options.target) {
        var oldSuccess = options.success || function(){};
        callbacks.push(function(data, status) {
            jQuery(options.target).attr("innerHTML", data).evalScripts().each(oldSuccess, [data, status]);
        });
    }
    else if (options.success)
        callbacks.push(options.success);

    options.success = function(data, status) {
        for (var i=0, max=callbacks.length; i < max; i++)
            callbacks[i](data, status);
    };

    // are there files to upload?
    var files = jQuery('input:file', this).fieldValue();
    var found = false;
    for (var j=0; j < files.length; j++)
        if (files[j])
            found = true;

    if (options.iframe || found) // options.iframe allows user to force iframe mode
        fileUpload();
    else
        jQuery.ajax(options);

    // fire 'notify' event
    jQuery.event.trigger('form.submit.notify', [this, options]);
    return this;


    // private function for handling file uploads (hat tip to YAHOO!)
    function fileUpload() {
        var form = $form[0];
        var opts = jQuery.extend({}, jQuery.ajaxSettings, options);

        var id = 'jqFormIO' + jQuery.fn.ajaxSubmit.counter++;
        var $io = jQuery('<iframe id="' + id + '" name="' + id + '" />');
        var io = $io[0];
        var op8 = navigator.userAgent.indexOf('Opera') != -1 && window.opera.version() < 9;
        if (navigator.userAgent.toLowerCase().indexOf('msie') != -1 || op8) io.src = 'javascript:false;document.write("");';
        $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });

        // make sure form attrs are set
        form.method = 'POST';
        form.encoding ? form.encoding = 'multipart/form-data' : form.enctype = 'multipart/form-data';

        var xhr = { // mock object
            responseText: null,
            responseXML: null,
            status: 0,
            statusText: 'n/a',
            getAllResponseHeaders: function() {},
            getResponseHeader: function() {},
            setRequestHeader: function() {}
        };

        var g = opts.global;
        // trigger ajax global events so that activity/block indicators work like normal
        if (g && ! jQuery.active++) jQuery.event.trigger("ajaxStart");
        if (g) jQuery.event.trigger("ajaxSend", [xhr, opts]);

        var cbInvoked = 0;
        var timedOut = 0;

        // take a breath so that pending repaints get some cpu time before the upload starts
        setTimeout(function() {
            $io.appendTo('body');
            // jQuery's event binding doesn't work for iframe events in IE
            io.attachEvent ? io.attachEvent('onload', cb) : io.addEventListener('load', cb, false);
            form.action = opts.url;
            var t = form.target;
            form.target = id;

            // support timout
            if (opts.timeout)
                setTimeout(function() { timedOut = true; cb(); }, opts.timeout);

            form.submit();
            form.target = t; // reset
        }, 10);

        function cb() {
            if (cbInvoked++) return;

            io.detachEvent ? io.detachEvent('onload', cb) : io.removeEventListener('load', cb, false);

            var ok = true;
            try {
                if (timedOut) throw 'timeout';
                // extract the server response from the iframe
                var data, doc;
                doc = io.contentWindow ? io.contentWindow.document : io.contentDocument ? io.contentDocument : io.document;
                xhr.responseText = doc.body ? doc.body.innerHTML : null;
                xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;

                if (opts.dataType == 'json' || opts.dataType == 'script') {
                    var ta = doc.getElementsByTagName('textarea')[0];
                    data = ta ? ta.value : xhr.responseText;
                    if (opts.dataType == 'json')
                        eval("data = " + data);
                    else
                        jQuery.globalEval(data);
                }
                else if (opts.dataType == 'xml') {
                    data = xhr.responseXML;
                    if (!data && xhr.responseText != null)
                        data = toXml(xhr.responseText);
                }
                else {
                    data = xhr.responseText;
                }
            }
            catch(e){
                ok = false;
                jQuery.handleError(opts, xhr, 'error', e);
            }

            // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
            if (ok) {
                opts.success(data, 'success');
                if (g) jQuery.event.trigger("ajaxSuccess", [xhr, opts]);
            }
            if (g) jQuery.event.trigger("ajaxComplete", [xhr, opts]);
            if (g && ! --jQuery.active) jQuery.event.trigger("ajaxStop");
            if (opts.complete) opts.complete(xhr, ok ? 'success' : 'error');

            // clean up
            setTimeout(function() {
                $io.remove();
                xhr.responseXML = null;
            }, 100);
        };

        function toXml(s, doc) {
            if (window.ActiveXObject) {
                doc = new ActiveXObject('Microsoft.XMLDOM');
                doc.async = 'false';
                doc.loadXML(s);
            }
            else
                doc = (new DOMParser()).parseFromString(s, 'text/xml');
            return (doc && doc.documentElement && doc.documentElement.tagName != 'parsererror') ? doc : null;
        }
    };
};
jQuery.fn.ajaxSubmit.counter = 0; // used to create unique iframe ids

jQuery.fn.formSerialize = function(semantic) {
    //hand off to jQuery.param for proper encoding
    return jQuery.param(this.formToArray(semantic));
};


/**
 * Serializes all field elements in the jQuery object into a query string.
 * This method will return a string in the format: name1=value1&amp;name2=value2
 *
 * The successful argument controls whether or not serialization is limited to
 * 'successful' controls (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
 * The default value of the successful argument is true.
 *
 * @example var data = $("input").formSerialize();
 * @desc Collect the data from all successful input elements into a query string
 *
 * @example var data = $(":radio").formSerialize();
 * @desc Collect the data from all successful radio input elements into a query string
 *
 * @example var data = $("#myForm :checkbox").formSerialize();
 * @desc Collect the data from all successful checkbox input elements in myForm into a query string
 *
 * @example var data = $("#myForm :checkbox").formSerialize(false);
 * @desc Collect the data from all checkbox elements in myForm (even the unchecked ones) into a query string
 *
 * @example var data = $(":input").formSerialize();
 * @desc Collect the data from all successful input, select, textarea and button elements into a query string
 *
 * @name fieldSerialize
 * @param successful true if only successful controls should be serialized (default is true)
 * @type String
 * @cat Plugins/Form
 */
jQuery.fn.fieldSerialize = function(successful) {
    var a = [];
    this.each(function() {
        var n = this.name;
        if (!n) return;
        var v = jQuery.fieldValue(this, successful);
        if (v && v.constructor == Array) {
            for (var i=0,max=v.length; i < max; i++)
                a.push({name: n, value: v[i]});
        }
        else if (v !== null && typeof v != 'undefined')
            a.push({name: this.name, value: v});
    });
    //hand off to jQuery.param for proper encoding
    return jQuery.param(a);
};
/**
 * formToArray() gathers form element data into an array of objects that can
 * be passed to any of the following ajax functions: $.get, $.post, or load.
 * Each object in the array has both a 'name' and 'value' property.  An example of
 * an array for a simple login form might be:
 *
 * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
 *
 * It is this array that is passed to pre-submit callback functions provided to the
 * ajaxSubmit() and ajaxForm() methods.
 *
 * The semantic argument can be used to force form serialization in semantic order.
 * This is normally true anyway, unless the form contains input elements of type='image'.
 * If your form must be submitted with name/value pairs in semantic order and your form
 * contains an input of type='image" then pass true for this arg, otherwise pass false
 * (or nothing) to avoid the overhead for this logic.
 *
 * @example var data = $("#myForm").formToArray();
 * $.post( "myscript.cgi", data );
 * @desc Collect all the data from a form and submit it to the server.
 *
 * @name formToArray
 * @param semantic true if serialization must maintain strict semantic ordering of elements (slower)
 * @type Array<Object>
 * @cat Plugins/Form
 * @see ajaxForm
 * @see ajaxSubmit
 * @author jQuery Community
 */
jQuery.fn.formToArray = function(semantic) {
    var a = [];
    if (this.length == 0) return a;

    var form = this[0];
    var els = semantic ? form.getElementsByTagName('*') : form.elements;
    if (!els) return a;
    for(var i=0, max=els.length; i < max; i++) {
        var el = els[i];
        var n = el.name;
        if (!n) continue;

        if (semantic && form.clk && el.type == "image") {
            // handle image inputs on the fly when semantic == true
            if(!el.disabled && form.clk == el)
                a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
            continue;
        }
        var v = jQuery.fieldValue(el, true);
        if (v === null) continue;
        if (v.constructor == Array) {
            for(var j=0, jmax=v.length; j < jmax; j++)
                a.push({name: n, value: v[j]});
        }
        else
            a.push({name: n, value: v});
    }

    if (!semantic && form.clk) {
        // input type=='image' are not found in elements array! handle them here
        var inputs = form.getElementsByTagName("input");
        for(var i=0, max=inputs.length; i < max; i++) {
            var input = inputs[i];
            var n = input.name;
            if(n && !input.disabled && input.type == "image" && form.clk == input)
                a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
        }
    }
    return a;
};
jQuery.fn.fieldValue = function(successful) {
    for (var val=[], i=0, max=this.length; i < max; i++) {
        var el = this[i];
        var v = jQuery.fieldValue(el, successful);
        if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length))
            continue;
        v.constructor == Array ? jQuery.merge(val, v) : val.push(v);
    }
    return val;
};
jQuery.fieldValue = function(el, successful) {
    var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
    if (typeof successful == 'undefined') successful = true;

    if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
        (t == 'checkbox' || t == 'radio') && !el.checked ||
        (t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
        tag == 'select' && el.selectedIndex == -1))
        return null;

    if (tag == 'select') {
        var index = el.selectedIndex;
        if (index < 0) return null;
        var a = [], ops = el.options;
        var one = (t == 'select-one');
        var max = (one ? index+1 : ops.length);
        for(var i=(one ? index : 0); i < max; i++) {
            var op = ops[i];
            if (op.selected) {
                // extra pain for IE...
                var v = navigator.userAgent.toLowerCase().indexOf('msie') != -1 && !(op.attributes['value'].specified) ? op.text : op.value;
                if (one) return v;
                a.push(v);
            }
        }
        return a;
    }
    return el.value;
};
jQuery.fn.clearForm = function() {
    return this.each(function() {
        jQuery('input,select,textarea', this).clearFields();
    });
};
jQuery.fn.clearFields = jQuery.fn.clearInputs = function() {
    return this.each(function() {
        var t = this.type, tag = this.tagName.toLowerCase();
        if (t == 'text' || t == 'password' || tag == 'textarea')
            this.value = '';
        else if (t == 'checkbox' || t == 'radio')
            this.checked = false;
        else if (tag == 'select')
            this.selectedIndex = -1;
    });
};
jQuery.fn.resetForm = function() {
    return this.each(function() {
        // guard against an input with the name of 'reset'
        // note that IE reports the reset function as an 'object'
        if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType))
            this.reset();
    });
};
// Default Handler for adexGet
function handleGet(atarget, awaitdiv, pageHTML) {
    toggleDisplay(awaitdiv,"none");
    document.getElementById(atarget).innerHTML = pageHTML;
}

// Default Handler for adexFormSubmit
function handleFormSubmit(atarget, errtarget, awaitdiv, status, pageHTML) {
    toggleDisplay(awaitdiv,"none");
    if (status==1){
        document.getElementById(atarget).innerHTML = pageHTML;
    } else {
        document.getElementById(errtarget).innerHTML = pageHTML;
    }
}

function  togglealloff(a) {
    ;
}

function trimSpace(selector) {
    $(selector).val($(selector).val().replace(/^\s+/g, ''));
    $(selector).val($(selector).val().replace(/\s+$/g, ''));
}

function checkWrapper(selector) {
    if ($(selector).val().match(/^[<>{}()\"'\[\]].+[<>{}()\"'\[\]]$/g) !== null)
    {
        $(selector).val($(selector).val().substring(1,$(selector).val().length - 1));
        trimSpace(selector);
    }
}

/* Show The Submit Q Tool */
function showsubmitqtoolbox(state) {
    if (document.getElementById) {
        var arttool = document.getElementById("submitadexbox");
        if(arttool != null){
            setElementClass(arttool, state);
            movelayers("submitadexcontainer");
        }
    }
}

/* Confirm Sent Submit Q */
function confirmsent2(state) {
    if (document.getElementById) {
        if (document.getElementById("Email").value == "") {
            var arttool = document.getElementById("submitqerror");
            setElementClass(arttool, state);
            return false;
        }
        else {
            var arttool = document.getElementById("submitqconfirmation");
            setElementClass(arttool, state);
            var arttool2 = document.getElementById("submitqerror");
            setElementClass(arttool2, 'inactive');
            var arttoolform = document.getElementById("submitqform");
            setElementClass(arttoolform, 'inactive');
            return false;
        }
    }
}




/* Utility Function Move Layers */
function movelayers(num)
{
    if (window.innerHeight)
    {
        pos = window.pageYOffset
    }
    else if (document.documentElement && document.documentElement.scrollTop)
    {
        pos = document.documentElement.scrollTop
    }
    else if (document.body)
    {
        pos = document.body.scrollTop
    }

    if (pos < theTop)
    {
        pos = theTop;
    }
    else
    {
        pos += 50;
    }

    if (pos == old)
    {
        document.getElementById(num).style.top = (pos + 'px');
    }
    else
    {
        old = pos;
        movelayers(num);
    }
}

/* Fixed Sticky*/
(function(win, $) {

    function featureTest(property, value, noPrefixes) {
        var prop = property + ':',
            el = document.createElement('test'),
            mStyle = el.style;

        if (!noPrefixes) {
            mStyle.cssText = prop + ['-webkit-', '-moz-', '-ms-', '-o-', ''].join(value + ';' + prop) + value + ';';
        } else {
            mStyle.cssText = prop + value;
        }
        return mStyle[property].indexOf(value) !== -1;
    }

    function getPx(unit) {
        return parseInt(unit, 10) || 0;
    }

    var S = {
        classes: {
            plugin: 'fixedsticky',
            active: 'fixedsticky-on',
            inactive: 'fixedsticky-off',
            clone: 'fixedsticky-dummy',
            withoutFixedFixed: 'fixedsticky-withoutfixedfixed'
        },
        keys: {
            offset: 'fixedStickyOffset',
            position: 'fixedStickyPosition'
        },
        tests: {
            sticky: featureTest('position', 'sticky'),
            fixed: featureTest('position', 'fixed', true)
        },
        // Thanks jQuery!
        getScrollTop: function() {
            var prop = 'pageYOffset',
                method = 'scrollTop';
            return win ? (prop in win) ? win[prop] :
                win.document.documentElement[method] :
                win.document.body[method];
        },
        bypass: function() {
            // Check native sticky, check fixed and if fixed-fixed is also included on the page and is supported
            return (S.tests.sticky && !S.optOut) ||
                !S.tests.fixed ||
                win.FixedFixed && !$(win.document.documentElement).hasClass('fixed-supported');
        },
        update: function(el) {
            if (!el.offsetWidth) {
                return;
            }

            var $el = $(el),
                height = $el.outerHeight(),
                initialOffset = $el.data(S.keys.offset),
                scroll = S.getScrollTop(),
                isAlreadyOn = $el.is('.' + S.classes.active),
                isAlreadyOnIos = $el.is('.' + S.classes.activeIos),
                toggle = function(turnOn) {
                    $el[turnOn ? 'addClass' : 'removeClass'](S.classes.active)[!turnOn ? 'addClass' : 'removeClass'](S.classes.inactive);
                },
                viewportHeight = $(window).height(),
                position = $el.data(S.keys.position),
                skipSettingToFixed,
                elTop,
                elBottom,
                $parent = $el.parent(),
                parentOffset = $parent.offset().top,
                parentHeight = $parent.outerHeight();

            if (initialOffset === undefined) {
                initialOffset = $el.offset().top;
                $el.data(S.keys.offset, initialOffset);
                $el.after($('<div>').addClass(S.classes.clone).height(height));
            }

            if (!position) {
                // Some browsers require fixed/absolute to report accurate top/left values.
                skipSettingToFixed = $el.css('top') !== 'auto' || $el.css('bottom') !== 'auto';

                if (!skipSettingToFixed) {
                    $el.css('position', 'fixed');
                }

                position = {
                    top: $el.css('top') !== 'auto',
                    bottom: $el.css('bottom') !== 'auto'
                };

                if (!skipSettingToFixed) {
                    $el.css('position', '');
                }

                $el.data(S.keys.position, position);
            }

            function isFixedToTop() {
                var offsetTop = scroll + elTop;

                // Initial Offset Top
                return initialOffset < offsetTop &&
                    // Container Bottom
                    offsetTop + height <= parentOffset + parentHeight;
            }

            function isFixedToBottom() {
                // Initial Offset Top + Height
                return initialOffset + (height || 0) > scroll + viewportHeight - elBottom &&
                    // Container Top
                    scroll + viewportHeight - elBottom >= parentOffset + (height || 0);
            }

            elTop = getPx($el.css('top'));
            elBottom = getPx($el.css('bottom'));


            if (position.top && isFixedToTop() || position.bottom && isFixedToBottom()) {
                if (!isAlreadyOn) {
                    toggle(true);
                }
            } else {
                if (isAlreadyOn) {
                    toggle(false);
                }
            }


        },
        destroy: function(el) {
            var $el = $(el);
            if (S.bypass()) {
                return;
            }

            $(win).unbind('.fixedsticky');

            return $el.each(function() {
                $(this)
                    .removeData([S.keys.offset, S.keys.position])
                    .removeClass(S.classes.active)
                    .removeClass(S.classes.inactive)
                    .next('.' + S.classes.clone).remove();
            });
        },
        init: function(el) {
            var $el = $(el);

            if (S.bypass()) {
                return;
            }

            return $el.each(function() {
                var _this = this;

                $(win).bind('scroll.fixedsticky', function() {
                    S.update(_this);
                });

                S.update(this);

                $(win).bind('resize.fixedsticky', function() {
                    if ($el.is('.' + S.classes.active)) {
                        S.update(_this);
                    }
                });
            });
        }
    };

    win.FixedSticky = S;

    // Plugin
    $.fn.fixedsticky = function(method) {
        if (typeof S[method] === 'function') {
            return S[method].call(S, this);
        } else if (typeof method === 'object' || !method) {
            return S.init.call(S, this);
        } else {
            throw new Error('Method `' + method + '` does not exist on jQuery.fixedsticky');
        }
    };

    // Add fallback when fixed-fixed is not available.
    if (!win.FixedFixed) {
        $(win.document.documentElement).addClass(S.classes.withoutFixedFixed);
    }

})(this, jQuery);

/*
 =================================
 img-touch-canvas - v0.1
 http://github.com/rombdn/img-touch-canvas

 (c) 2013 Romain BEAUDON
 This code may be freely distributed under the MIT License
 =================================
 */


(function() {
    var root = this; //global object

    var ImgTouchCanvas = function(options) {
        if( !options || !options.canvas || !options.path) {
            throw 'ImgZoom constructor: missing arguments canvas or path';
        }

        this.canvas         = options.canvas;
        this.canvas.width   = this.canvas.clientWidth;
        this.canvas.height  = this.canvas.clientHeight;
        this.context        = this.canvas.getContext('2d');

        this.desktop = options.desktop || false; //non touch events

        this.position = {
            x: 0,
            y: 0
        };
        this.scale = {
            x: 0.5,
            y: 0.5
        };
        this.imgTexture = new Image();
        this.imgTexture.src = options.path;

        this.lastZoomScale = null;
        this.lastX = null;
        this.lastY = null;

        this.mdown = false; //desktop drag

        this.init = false;
        this.checkRequestAnimationFrame();
        requestAnimationFrame(this.animate.bind(this));

        this.setEventListeners();
    };


    ImgTouchCanvas.prototype = {
        animate: function() {
            //set scale such as image cover all the canvas
            if(!this.init) {
                if(this.imgTexture.width) {
                    var scaleRatio = null;
                    if(this.canvas.clientWidth > this.canvas.clientHeight) {
                        scaleRatio = this.canvas.clientWidth / this.imgTexture.width;
                    }
                    else {
                        scaleRatio = this.canvas.clientHeight / this.imgTexture.height;
                    }

                    this.scale.x = scaleRatio;
                    this.scale.y = scaleRatio;
                    this.init = true;
                }
            }

            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);

            this.context.drawImage(
                this.imgTexture,
                this.position.x, this.position.y,
                    this.scale.x * this.imgTexture.width,
                    this.scale.y * this.imgTexture.height);

            requestAnimationFrame(this.animate.bind(this));
        },


        gesturePinchZoom: function(event) {
            var zoom = false;

            if( event.targetTouches.length >= 2 ) {
                var p1 = event.targetTouches[0];
                var p2 = event.targetTouches[1];
                var zoomScale = Math.sqrt(Math.pow(p2.pageX - p1.pageX, 2) + Math.pow(p2.pageY - p1.pageY, 2)); //euclidian distance

                if( this.lastZoomScale ) {
                    zoom = zoomScale - this.lastZoomScale;
                }

                this.lastZoomScale = zoomScale;
            }

            return zoom;
        },

        doZoom: function(zoom) {
            if(!zoom) return;

            //new scale
            var currentScale = this.scale.x;
            var newScale = this.scale.x + zoom/100;


            //some helpers
            var deltaScale = newScale - currentScale;
            var currentWidth    = (this.imgTexture.width * this.scale.x);
            var currentHeight   = (this.imgTexture.height * this.scale.y);
            var deltaWidth  = this.imgTexture.width*deltaScale;
            var deltaHeight = this.imgTexture.height*deltaScale;


            //by default scale doesnt change position and only add/remove pixel to right and bottom
            //so we must move the image to the left to keep the image centered
            //ex: coefX and coefY = 0.5 when image is centered <=> move image to the left 0.5x pixels added to the right
            var canvasmiddleX = this.canvas.clientWidth / 2;
            var canvasmiddleY = this.canvas.clientHeight / 2;
            var xonmap = (-this.position.x) + canvasmiddleX;
            var yonmap = (-this.position.y) + canvasmiddleY;
            var coefX = -xonmap / (currentWidth);
            var coefY = -yonmap / (currentHeight);
            var newPosX = this.position.x + deltaWidth*coefX;
            var newPosY = this.position.y + deltaHeight*coefY;

            //edges cases
            var newWidth = currentWidth + deltaWidth;
            var newHeight = currentHeight + deltaHeight;

            if( newWidth < $(window).width() ) return;
            if( newPosX > 0 ) { newPosX = 0; }
            if( newPosX + newWidth < this.canvas.clientWidth ) { newPosX = this.canvas.clientWidth - newWidth;}

            //   if( newHeight < this.canvas.clientHeight ) {alert(newHeight+" "+ $(window).height())};
            if( newPosY > 0 ) { newPosY = 0; }
            if( newPosY + newHeight < this.canvas.clientHeight ) { newPosY = this.canvas.clientHeight - newHeight; }
            if( newWidth <= $(window).width()+20) { newPosY = 0; }
            //finally affectations
            this.scale.x    = newScale;
            this.scale.y    = newScale;
            this.position.x = newPosX;
            this.position.y = newPosY;
        },

        doMove: function(relativeX, relativeY) {
            if(this.lastX && this.lastY) {
                var deltaX = relativeX - this.lastX;
                var deltaY = relativeY - this.lastY;
                var currentWidth = (this.imgTexture.width * this.scale.x);
                var currentHeight = (this.imgTexture.height * this.scale.y);

                this.position.x += deltaX;
                this.position.y += deltaY;


                //edge cases
                if( this.position.x > 0 ) {
                    this.position.x = 0;
                }
                else if( this.position.x + currentWidth < this.canvas.clientWidth ) {
                    this.position.x = this.canvas.clientWidth - currentWidth;
                }
                if( this.position.y > 0 ) {
                    this.position.y = 0;
                }
                else if( this.position.y + currentHeight < this.canvas.clientHeight ) {
                    this.position.y = this.canvas.clientHeight - currentHeight;
                }
            }

            this.lastX = relativeX;
            this.lastY = relativeY;
        },

        setEventListeners: function() {
            // touch
            this.canvas.addEventListener('touchstart', function(e) {
                this.lastX          = null;
                this.lastY          = null;
                this.lastZoomScale  = null;
            }.bind(this));

            this.canvas.addEventListener('touchmove', function(e) {
                e.preventDefault();

                if(e.targetTouches.length == 2) { //pinch
                    this.doZoom(this.gesturePinchZoom(e));
                }
                else if(e.targetTouches.length == 1) {
                    var relativeX = e.targetTouches[0].pageX - this.canvas.getBoundingClientRect().left;
                    var relativeY = e.targetTouches[0].pageY - this.canvas.getBoundingClientRect().top;
                    this.doMove(relativeX, relativeY);
                }
            }.bind(this));

            if(this.desktop) {
                // keyboard+mouse
                window.addEventListener('keyup', function(e) {
                    if(e.keyCode == 187 || e.keyCode == 61) { //+
                        this.doZoom(5);
                    }
                    else if(e.keyCode == 54) {//-
                        this.doZoom(-5);
                    }
                }.bind(this));

                window.addEventListener('mousedown', function(e) {
                    this.mdown = true;
                    this.lastX = null;
                    this.lastY = null;
                }.bind(this));

                window.addEventListener('mouseup', function(e) {
                    this.mdown = false;
                }.bind(this));

                window.addEventListener('mousemove', function(e) {
                    var relativeX = e.pageX - this.canvas.getBoundingClientRect().left;
                    var relativeY = e.pageY - this.canvas.getBoundingClientRect().top;

                    if(e.target == this.canvas && this.mdown) {
                        this.doMove(relativeX, relativeY);
                    }

                    if(relativeX <= 0 || relativeX >= this.canvas.clientWidth || relativeY <= 0 || relativeY >= this.canvas.clientHeight) {
                        this.mdown = false;
                    }
                }.bind(this));
            }
        },

        checkRequestAnimationFrame: function() {
            var lastTime = 0;
            var vendors = ['ms', 'moz', 'webkit', 'o'];
            for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
                window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
                window.cancelAnimationFrame =
                    window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
            }

            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = function(callback, element) {
                    var currTime = new Date().getTime();
                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                    var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                        timeToCall);
                    lastTime = currTime + timeToCall;
                    return id;
                };
            }

            if (!window.cancelAnimationFrame) {
                window.cancelAnimationFrame = function(id) {
                    clearTimeout(id);
                };
            }
        }
    };

    root.ImgTouchCanvas = ImgTouchCanvas;
}).call(this);



/*
 *
 * TableSorter 2.0 - Client-side table sorting with ease!
 * Version 2.0.3
 * @requires jQuery v1.2.3
 *
 * Copyright (c) 2007 Christian Bach
 * Examples and docs at: http://tablesorter.com
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */

(function($) {
    $.extend({
        tablesorter: new function() {

            var parsers = [], widgets = [];

            this.defaults = {
                cssHeader: "header",
                cssAsc: "headerSortUp",
                cssDesc: "headerSortDown",
                sortInitialOrder: "asc",
                sortMultiSortKey: "shiftKey",
                sortForce: null,
                sortAppend: null,
                textExtraction: "simple",
                parsers: {},
                widgets: [],
                widgetZebra: {css: ["even","odd"]},
                headers: {},
                widthFixed: false,
                cancelSelection: true,
                sortList: [],
                headerList: [],
                dateFormat: "us",
                decimal: '.',
                debug: false
            };

            /* debuging utils */
            function benchmark(s,d) {
                log(s + "," + (new Date().getTime() - d.getTime()) + "ms");
            }

            this.benchmark = benchmark;

            function log(s) {
                if (typeof console != "undefined" && typeof console.debug != "undefined") {
                    console.log(s);
                } else {
                    alert(s);
                }
            }

            /* parsers utils */
            function buildParserCache(table,$headers) {

                if(table.config.debug) { var parsersDebug = ""; }

                var rows = table.tBodies[0].rows;

                if(table.tBodies[0].rows[0]) {

                    var list = [], cells = rows[0].cells, l = cells.length;

                    for (var i=0;i < l; i++) {
                        var p = false;

                        if($.metadata && ($($headers[i]).metadata() && $($headers[i]).metadata().sorter)  ) {

                            p = getParserById($($headers[i]).metadata().sorter);

                        } else if((table.config.headers[i] && table.config.headers[i].sorter)) {

                            p = getParserById(table.config.headers[i].sorter);
                        }
                        if(!p) {
                            p = detectParserForColumn(table,cells[i]);
                        }

                        if(table.config.debug) { parsersDebug += "column:" + i + " parser:" +p.id + "\n"; }

                        list.push(p);
                    }
                }

                if(table.config.debug) { log(parsersDebug); }

                return list;
            };

            function detectParserForColumn(table,node) {
                var l = parsers.length;
                for(var i=1; i < l; i++) {
                    if(parsers[i].is($.trim(getElementText(table.config,node)),table,node)) {
                        return parsers[i];
                    }
                }
                // 0 is always the generic parser (text)
                return parsers[0];
            }

            function getParserById(name) {
                var l = parsers.length;
                for(var i=0; i < l; i++) {
                    if(parsers[i].id.toLowerCase() == name.toLowerCase()) {
                        return parsers[i];
                    }
                }
                return false;
            }

            /* utils */
            function buildCache(table) {

                if(table.config.debug) { var cacheTime = new Date(); }


                var totalRows = (table.tBodies[0] && table.tBodies[0].rows.length) || 0,
                    totalCells = (table.tBodies[0].rows[0] && table.tBodies[0].rows[0].cells.length) || 0,
                    parsers = table.config.parsers,
                    cache = {row: [], normalized: []};

                for (var i=0;i < totalRows; ++i) {

                    /** Add the table data to main data array */
                    var c = table.tBodies[0].rows[i], cols = [];

                    cache.row.push($(c));

                    for(var j=0; j < totalCells; ++j) {
                        cols.push(parsers[j].format(getElementText(table.config,c.cells[j]),table,c.cells[j]));
                    }

                    cols.push(i); // add position for rowCache
                    cache.normalized.push(cols);
                    cols = null;
                };

                if(table.config.debug) { benchmark("Building cache for " + totalRows + " rows:", cacheTime); }

                return cache;
            };

            function getElementText(config,node) {

                if(!node) return "";

                var t = "";

                if(config.textExtraction == "simple") {
                    if(node.childNodes[0] && node.childNodes[0].hasChildNodes()) {
                        t = node.childNodes[0].innerHTML;
                    } else {
                        t = node.innerHTML;
                    }
                } else {
                    if(typeof(config.textExtraction) == "function") {
                        t = config.textExtraction(node);
                    } else {
                        t = $(node).text();
                    }
                }
                return t;
            }

            function appendToTable(table,cache) {

                if(table.config.debug) {var appendTime = new Date()}

                var c = cache,
                    r = c.row,
                    n= c.normalized,
                    totalRows = n.length,
                    checkCell = (n[0].length-1),
                    tableBody = $(table.tBodies[0]),
                    rows = [];

                for (var i=0;i < totalRows; i++) {
                    rows.push(r[n[i][checkCell]]);
                    if(!table.config.appender) {

                        var o = r[n[i][checkCell]];
                        var l = o.length;
                        for(var j=0; j < l; j++) {

                            tableBody[0].appendChild(o[j]);

                        }

                        //tableBody.append(r[n[i][checkCell]]);
                    }
                }

                if(table.config.appender) {

                    table.config.appender(table,rows);
                }

                rows = null;

                if(table.config.debug) { benchmark("Rebuilt table:", appendTime); }

                //apply table widgets
                applyWidget(table);

                // trigger sortend
                setTimeout(function() {
                    $(table).trigger("sortEnd");
                },0);

            };

            function buildHeaders(table) {

                if(table.config.debug) { var time = new Date(); }

                var meta = ($.metadata) ? true : false, tableHeadersRows = [];

                for(var i = 0; i < table.tHead.rows.length; i++) { tableHeadersRows[i]=0; };

                $tableHeaders = $("thead th",table);

                $tableHeaders.each(function(index) {

                    this.count = 0;
                    this.column = index;
                    this.order = formatSortingOrder(table.config.sortInitialOrder);

                    if(checkHeaderMetadata(this) || checkHeaderOptions(table,index)) this.sortDisabled = true;

                    if(!this.sortDisabled) {
                        $(this).addClass(table.config.cssHeader);
                    }

                    // add cell to headerList
                    table.config.headerList[index]= this;
                });

                if(table.config.debug) { benchmark("Built headers:", time); log($tableHeaders); }

                return $tableHeaders;

            };

            function checkCellColSpan(table, rows, row) {
                var arr = [], r = table.tHead.rows, c = r[row].cells;

                for(var i=0; i < c.length; i++) {
                    var cell = c[i];

                    if ( cell.colSpan > 1) {
                        arr = arr.concat(checkCellColSpan(table, headerArr,row++));
                    } else  {
                        if(table.tHead.length == 1 || (cell.rowSpan > 1 || !r[row+1])) {
                            arr.push(cell);
                        }
                        //headerArr[row] = (i+row);
                    }
                }
                return arr;
            };

            function checkHeaderMetadata(cell) {
                if(($.metadata) && ($(cell).metadata().sorter === false)) { return true; };
                return false;
            }

            function checkHeaderOptions(table,i) {
                if((table.config.headers[i]) && (table.config.headers[i].sorter === false)) { return true; };
                return false;
            }

            function applyWidget(table) {
                var c = table.config.widgets;
                var l = c.length;
                for(var i=0; i < l; i++) {

                    getWidgetById(c[i]).format(table);
                }

            }

            function getWidgetById(name) {
                var l = widgets.length;
                for(var i=0; i < l; i++) {
                    if(widgets[i].id.toLowerCase() == name.toLowerCase() ) {
                        return widgets[i];
                    }
                }
            };

            function formatSortingOrder(v) {

                if(typeof(v) != "Number") {
                    i = (v.toLowerCase() == "desc") ? 1 : 0;
                } else {
                    i = (v == (0 || 1)) ? v : 0;
                }
                return i;
            }

            function isValueInArray(v, a) {
                var l = a.length;
                for(var i=0; i < l; i++) {
                    if(a[i][0] == v) {
                        return true;
                    }
                }
                return false;
            }

            function setHeadersCss(table,$headers, list, css) {
                // remove all header information
                $headers.removeClass(css[0]).removeClass(css[1]);

                var h = [];
                $headers.each(function(offset) {
                    if(!this.sortDisabled) {
                        h[this.column] = $(this);
                    }
                });

                var l = list.length;
                for(var i=0; i < l; i++) {
                    h[list[i][0]].addClass(css[list[i][1]]);
                }
            }

            function fixColumnWidth(table,$headers) {
                var c = table.config;
                if(c.widthFixed) {
                    var colgroup = $('<colgroup>');
                    $("tr:first td",table.tBodies[0]).each(function() {
                        colgroup.append($('<col>').css('width',$(this).width()));
                    });
                    $(table).prepend(colgroup);
                };
            }

            function updateHeaderSortCount(table,sortList) {
                var c = table.config, l = sortList.length;
                for(var i=0; i < l; i++) {
                    var s = sortList[i], o = c.headerList[s[0]];
                    o.count = s[1];
                    o.count++;
                }
            }

            /* sorting methods */
            function multisort(table,sortList,cache) {

                if(table.config.debug) { var sortTime = new Date(); }

                var dynamicExp = "var sortWrapper = function(a,b) {", l = sortList.length;

                for(var i=0; i < l; i++) {

                    var c = sortList[i][0];
                    var order = sortList[i][1];
                    var s = (getCachedSortType(table.config.parsers,c) == "text") ? ((order == 0) ? "sortText" : "sortTextDesc") : ((order == 0) ? "sortNumeric" : "sortNumericDesc");

                    var e = "e" + i;

                    dynamicExp += "var " + e + " = " + s + "(a[" + c + "],b[" + c + "]); ";
                    dynamicExp += "if(" + e + ") { return " + e + "; } ";
                    dynamicExp += "else { ";
                }

                // if value is the same keep orignal order
                var orgOrderCol = cache.normalized[0].length - 1;
                dynamicExp += "return a[" + orgOrderCol + "]-b[" + orgOrderCol + "];";

                for(var i=0; i < l; i++) {
                    dynamicExp += "}; ";
                }

                dynamicExp += "return 0; ";
                dynamicExp += "}; ";

                eval(dynamicExp);

                cache.normalized.sort(sortWrapper);

                if(table.config.debug) { benchmark("Sorting on " + sortList.toString() + " and dir " + order+ " time:", sortTime); }

                return cache;
            };

            function sortText(a,b) {
                return ((a < b) ? -1 : ((a > b) ? 1 : 0));
            };

            function sortTextDesc(a,b) {
                return ((b < a) ? -1 : ((b > a) ? 1 : 0));
            };

            function sortNumeric(a,b) {
                return a-b;
            };

            function sortNumericDesc(a,b) {
                return b-a;
            };

            function getCachedSortType(parsers,i) {
                return parsers[i].type;
            };

            /* public methods */
            this.construct = function(settings) {

                return this.each(function() {

                    if(!this.tHead || !this.tBodies) return;

                    var $this, $document,$headers, cache, config, shiftDown = 0, sortOrder;

                    this.config = {};

                    config = $.extend(this.config, $.tablesorter.defaults, settings);

                    // store common expression for speed
                    $this = $(this);

                    // build headers
                    $headers = buildHeaders(this);

                    // try to auto detect column type, and store in tables config
                    this.config.parsers = buildParserCache(this,$headers);


                    // build the cache for the tbody cells
                    cache = buildCache(this);

                    // get the css class names, could be done else where.
                    var sortCSS = [config.cssDesc,config.cssAsc];

                    // fixate columns if the users supplies the fixedWidth option
                    fixColumnWidth(this);

                    // apply event handling to headers
                    // this is to big, perhaps break it out?
                    $headers.click(function(e) {

                        $this.trigger("sortStart");

                        var totalRows = ($this[0].tBodies[0] && $this[0].tBodies[0].rows.length) || 0;

                        if(!this.sortDisabled && totalRows > 0) {


                            // store exp, for speed
                            var $cell = $(this);

                            // get current column index
                            var i = this.column;

                            // get current column sort order
                            this.order = this.count++ % 2;

                            // user only whants to sort on one column
                            if(!e[config.sortMultiSortKey]) {

                                // flush the sort list
                                config.sortList = [];

                                if(config.sortForce != null) {
                                    var a = config.sortForce;
                                    for(var j=0; j < a.length; j++) {
                                        if(a[j][0] != i) {
                                            config.sortList.push(a[j]);
                                        }
                                    }
                                }

                                // add column to sort list
                                config.sortList.push([i,this.order]);

                                // multi column sorting
                            } else {
                                // the user has clicked on an all ready sortet column.
                                if(isValueInArray(i,config.sortList)) {

                                    // revers the sorting direction for all tables.
                                    for(var j=0; j < config.sortList.length; j++) {
                                        var s = config.sortList[j], o = config.headerList[s[0]];
                                        if(s[0] == i) {
                                            o.count = s[1];
                                            o.count++;
                                            s[1] = o.count % 2;
                                        }
                                    }
                                } else {
                                    // add column to sort list array
                                    config.sortList.push([i,this.order]);
                                }
                            };
                            setTimeout(function() {
                                //set css for headers
                                setHeadersCss($this[0],$headers,config.sortList,sortCSS);
                                appendToTable($this[0],multisort($this[0],config.sortList,cache));
                            },1);
                            // stop normal event by returning false
                            return false;
                        }
                        // cancel selection
                    }).mousedown(function() {
                        if(config.cancelSelection) {
                            this.onselectstart = function() {return false};
                            return false;
                        }
                    });

                    // apply easy methods that trigger binded events
                    $this.bind("update",function() {

                        // rebuild parsers.
                        this.config.parsers = buildParserCache(this,$headers);

                        // rebuild the cache map
                        cache = buildCache(this);

                    }).bind("sorton",function(e,list) {

                        $(this).trigger("sortStart");

                        config.sortList = list;

                        // update and store the sortlist
                        var sortList = config.sortList;

                        // update header count index
                        updateHeaderSortCount(this,sortList);

                        //set css for headers
                        setHeadersCss(this,$headers,sortList,sortCSS);


                        // sort the table and append it to the dom
                        appendToTable(this,multisort(this,sortList,cache));

                    }).bind("appendCache",function() {

                        appendToTable(this,cache);

                    }).bind("applyWidgetId",function(e,id) {

                        getWidgetById(id).format(this);

                    }).bind("applyWidgets",function() {
                        // apply widgets
                        applyWidget(this);
                    });

                    if($.metadata && ($(this).metadata() && $(this).metadata().sortlist)) {
                        config.sortList = $(this).metadata().sortlist;
                    }
                    // if user has supplied a sort list to constructor.
                    if(config.sortList.length > 0) {
                        $this.trigger("sorton",[config.sortList]);
                    }

                    // apply widgets
                    applyWidget(this);
                });
            };

            this.addParser = function(parser) {
                var l = parsers.length, a = true;
                for(var i=0; i < l; i++) {
                    if(parsers[i].id.toLowerCase() == parser.id.toLowerCase()) {
                        a = false;
                    }
                }
                if(a) { parsers.push(parser); };
            };

            this.addWidget = function(widget) {
                widgets.push(widget);
            };

            this.formatFloat = function(s) {
                var i = parseFloat(s);
                return (isNaN(i)) ? 0 : i;
            };
            this.formatInt = function(s) {
                var i = parseInt(s);
                return (isNaN(i)) ? 0 : i;
            };

            this.isDigit = function(s,config) {
                var DECIMAL = '\\' + config.decimal;
                var exp = '/(^[+]?0(' + DECIMAL +'0+)?$)|(^([-+]?[1-9][0-9]*)$)|(^([-+]?((0?|[1-9][0-9]*)' + DECIMAL +'(0*[1-9][0-9]*)))$)|(^[-+]?[1-9]+[0-9]*' + DECIMAL +'0+$)/';
                return RegExp(exp).test($.trim(s));
            };

            this.clearTableBody = function(table) {
                if(navigator.userAgent.toLowerCase().indexOf('msie') != -1) {
                    function empty() {
                        while ( this.firstChild ) this.removeChild( this.firstChild );
                    }
                    empty.apply(table.tBodies[0]);
                } else {
                    table.tBodies[0].innerHTML = "";
                }
            };
        }
    });

    // extend plugin scope
    $.fn.extend({
        tablesorter: $.tablesorter.construct
    });

    var ts = $.tablesorter;

    // add default parsers
    ts.addParser({
        id: "text",
        is: function(s) {
            return true;
        },
        format: function(s) {
            return $.trim(s.toLowerCase());
        },
        type: "text"
    });

    ts.addParser({
        id: "digit",
        is: function(s,table) {
            var c = table.config;
            return $.tablesorter.isDigit(s,c);
        },
        format: function(s) {
            return $.tablesorter.formatFloat(s);
        },
        type: "numeric"
    });

    ts.addParser({
        id: "currency",
        is: function(s) {
            return /^[Â£$â‚¬?.]/.test(s);
        },
        format: function(s) {
            return $.tablesorter.formatFloat(s.replace(new RegExp(/[^0-9.]/g),""));
        },
        type: "numeric"
    });

    ts.addParser({
        id: "ipAddress",
        is: function(s) {
            return /^\d{2,3}[\.]\d{2,3}[\.]\d{2,3}[\.]\d{2,3}$/.test(s);
        },
        format: function(s) {
            var a = s.split("."), r = "", l = a.length;
            for(var i = 0; i < l; i++) {
                var item = a[i];
                if(item.length == 2) {
                    r += "0" + item;
                } else {
                    r += item;
                }
            }
            return $.tablesorter.formatFloat(r);
        },
        type: "numeric"
    });

    ts.addParser({
        id: "url",
        is: function(s) {
            return /^(https?|ftp|file):\/\/$/.test(s);
        },
        format: function(s) {
            return jQuery.trim(s.replace(new RegExp(/(https?|ftp|file):\/\//),''));
        },
        type: "text"
    });

    ts.addParser({
        id: "isoDate",
        is: function(s) {
            return /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(s);
        },
        format: function(s) {
            return $.tablesorter.formatFloat((s != "") ? new Date(s.replace(new RegExp(/-/g),"/")).getTime() : "0");
        },
        type: "numeric"
    });

    ts.addParser({
        id: "percent",
        is: function(s) {
            return /\%$/.test($.trim(s));
        },
        format: function(s) {
            return $.tablesorter.formatFloat(s.replace(new RegExp(/%/g),""));
        },
        type: "numeric"
    });

    ts.addParser({
        id: "usLongDate",
        is: function(s) {
            return s.match(new RegExp(/^[A-Za-z]{3,10}\.? [0-9]{1,2}, ([0-9]{4}|'?[0-9]{2}) (([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(AM|PM)))$/));
        },
        format: function(s) {
            return $.tablesorter.formatFloat(new Date(s).getTime());
        },
        type: "numeric"
    });

    ts.addParser({
        id: "shortDate",
        is: function(s) {
            return /\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(s);
        },
        format: function(s,table) {
            var c = table.config;
            s = s.replace(/\-/g,"/");
            if(c.dateFormat == "us") {
                // reformat the string in ISO format
                s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$1/$2");
            } else if(c.dateFormat == "uk") {
                //reformat the string in ISO format
                s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$2/$1");
            } else if(c.dateFormat == "dd/mm/yy" || c.dateFormat == "dd-mm-yy") {
                s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2})/, "$1/$2/$3");
            }
            return $.tablesorter.formatFloat(new Date(s).getTime());
        },
        type: "numeric"
    });

    ts.addParser({
        id: "time",
        is: function(s) {
            return /^(([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(am|pm)))$/.test(s);
        },
        format: function(s) {
            return $.tablesorter.formatFloat(new Date("2000/01/01 " + s).getTime());
        },
        type: "numeric"
    });


    ts.addParser({
        id: "metadata",
        is: function(s) {
            return false;
        },
        format: function(s,table,cell) {
            var c = table.config, p = (!c.parserMetadataName) ? 'sortValue' : c.parserMetadataName;
            return $(cell).metadata()[p];
        },
        type: "numeric"
    });

    // add default widgets
    ts.addWidget({
        id: "zebra",
        format: function(table) {
            if(table.config.debug) { var time = new Date(); }
            $("tr:visible",table.tBodies[0])
                .filter(':even')
                .removeClass(table.config.widgetZebra.css[1]).addClass(table.config.widgetZebra.css[0])
                .end().filter(':odd')
                .removeClass(table.config.widgetZebra.css[0]).addClass(table.config.widgetZebra.css[1]);
            if(table.config.debug) { $.tablesorter.benchmark("Applying Zebra widget", time); }
        }
    });
})(jQuery);


if (detectDevice() !== "mobile") {

    var stickyHead;
    (function ($) {
        stickyHead = window.stickyHead || {};
        stickyHead = {
            killStickyHead: '',
            stickySettings: {
                $adtagheader: $("#adtagheader"),
                $headerbox: $("#headerbox"),
                $window: $(window),
                $document: $(document),
                originalTopAdTop: '', //$("#adtagheader").offset().top,
                originalAdHeight: ($("#adtagheader").outerHeight() + 90),
                stopStickyHeight: 1100,
                stopStichyTime: 5000
            },
            init: function () {
                var self = this;
                // Do a check to make sure nobody tries to run init twice,
                if (self.init.flag) {
                    return;
                }
                self.init.flag = true;

                // hardcode a default height for now to prevent the sticky jumpiness if user scrolls
                // use timeout to get the original value if the header is not sticky
                stickyHead.stickySettings.originalTopAdTop = 104;//$("#adtagheader").offset().top;
                var tmp = setTimeout(function () {
                    if ($("#adtagheader").hasClass("stickHeader") == false) {
                        stickyHead.stickySettings.originalTopAdTop = $("#adtagheader").offset().top;
                    }
                    clearTimeout(tmp);
                }, 1000);

                $(window).on('scroll', stickyHead.stickyHeadscrollHandler).load(function () {
                    stickyHead.killStickyHead = setTimeout(function () {
                        if (stickyHead.stickySettings.$adtagheader.hasClass("stickHeader") == true) {
                            stickyHead.animateOffSticky();
                        }
                        else {
                            stickyHead.disableSticky();
                            stickyHead.removeSticky();
                        }
                    }, stickyHead.stickySettings.stopStichyTime);
                });

                $(window).on('resize.stickyHead', stickyHead.stickyResizeHandler);

            },

            stickyResizeHandler: function () {
                if (detectDevice() == 'mobile') {
                    stickyHead.disableSticky();
                    clearTimeout(stickyHead.killStickyHead);
                }
            },
            stickyRefresh: function (virtual_or_not) {
                stickyHead.disableSticky();
                clearTimeout(stickyHead.killStickyHead);

                if (typeof virtual_or_not !== 'undefined') {
                    setTimeout(function () {
                        $(document).trigger("stickyRefresh");

                    }, 2000);
                }

                else{
                    $(document).trigger("stickyRefresh");
                }

                $(window).on('scroll', stickyHead.stickyHeadscrollHandler);
                stickyHead.killStickyHead = setTimeout(function () {
                    if (stickyHead.stickySettings.$adtagheader.hasClass("stickHeader") == true) {
                        stickyHead.animateOffSticky();
                    }
                    else {
                        stickyHead.disableSticky();
                        stickyHead.removeSticky();
                    }
                }, stickyHead.stickySettings.stopStichyTime);
            },
            stickyHeadscrollHandler: function () {
                //clearTimeout(stickyHead.killStickyHead);
                if (device === "mobile") {
                    stickyHead.disableSticky();
                    return;
                }
                var winScrollTop = stickyHead.stickySettings.$window.scrollTop();
                if (winScrollTop > stickyHead.stickySettings.$adtagheader.offset().top) {
                    stickyHead.addSticky();
                } else if ($("#adtagheader").offset().top <= stickyHead.stickySettings.originalTopAdTop) {
                    stickyHead.removeSticky();
                }
                //else if (winScrollTop > stickyHead.stickySettings.stopStickyHeight) {
                //    stickyHead.animateOffSticky();
                //}
            },
            animateOffSticky: function () {
                stickyHead.disableSticky();
                //stickyHead.stickySettings.$adtagheader.slideUp("slow", function () {
                stickyHead.stickySettings.$adtagheader.slideUp({duration: "slow", step: function () {
                    $(document).trigger("animateOffStickyStep");
                }, complete: function () {
                    stickyHead.stickySettings.$adtagheader.hide();
                    stickyHead.stickySettings.$adtagheader.slideDown(function () {
                        stickyHead.stickySettings.$adtagheader.removeClass("stickHeader").addClass("unStickHeader");
                        stickyHead.stickySettings.$headerbox.css({
                            "padding-bottom": "0px"
                        });
                    });
                    stickyHead.stickySettings.$adtagheader.show();
                }});

            },
            stickyKillSwitch: function () {
                stickyHead.disableSticky();
                stickyHead.removeSticky();
            },
            disableSticky: function () {
                $(window).off('scroll', stickyHead.stickyHeadscrollHandler);
            },
            addSticky: function () {
                stickyHead.stickySettings.$headerbox.css({
                    "padding-bottom": stickyHead.stickySettings.originalAdHeight + "px"
                });
                stickyHead.stickySettings.$adtagheader.removeClass("unStickHeader").addClass("stickHeader");
            },
            removeSticky: function () {
                stickyHead.stickySettings.$adtagheader.removeClass("stickHeader").addClass("unStickHeader");
                stickyHead.stickySettings.$headerbox.css({
                    "padding-bottom": "0px"
                });
            }
        };
    }($));
// End of Sticky header

    var stickyRightColumn;
    (function ($) {
        function StickyRightColumn() {
            // sticky settings
            this.stopHeightFromTop = 536;   // sticky height setting, where the sticking stops
            this.howLongRightRailStick = 251; // Accounting for how long right rail sticks
        };

        StickyRightColumn.prototype.init = function (selectorRightColumn, selectorLeftColumn) {
            var self = this;
            this.$window = $(window);
            this.$rightColumn = $(selectorRightColumn); // right rail
            this.$leftColumn = $(selectorLeftColumn);   // left rail
            this.$adTagHeader = $("#adtagheader");      // TLB

            this.$adPos141 = $("#ads-pos-141");         // BLB ad
            this.scrollHandlerFunc = $.proxy(this.scrollHandler, this); // scroll handler

            // trigger this when right rail is fully loaded
            $(window).load(function () {

                // check if kill switch disabled initial scrolling
                if (!self.scrollHandlerFunc)
                    return;

                // ensure that the TLB sticky is above the right rail sticky
                self.setScrolling();

                // trigger the scroll in case the page didn't load from the top
                self.$window.trigger("scroll");

                // during resizing of the window make sure the sticky is in the right place
                self.$window.on("resize", function () {
                    self.setScrolling();
                    self.$window.trigger("scroll"); // jump
                });
            });

            // called during TLB animation off changes
            this.$window.on("animateOffStickyStep", function(){ self.$window.trigger("scroll");});

            // called whenever the size of the LR and RR changes
            this.$window.on("stickyRefresh", function () {
                self.refreshSticky();
            });
            //this.$window.hashchange(function(){ self.setScrolling(); });
            $(document).ajaxComplete(function () {
                self.setScrolling();
            });
        };

        StickyRightColumn.prototype.stickyKillSwitch = function () {
            this.disableSticky();
            this.removeSticky();
            this.scrollHandlerFunc = null;
        };

        StickyRightColumn.prototype.disableSticky = function () {
            $(window).off('scroll', this.scrollHandlerFunc);
        };

        StickyRightColumn.prototype.setScrolling = function () {
            if (!this.scrollHandlerFunc) // check if its been killed
                return;

            // turn off scrolling in case one was on to prevent two adding 2 scrollhandler
            this.disableSticky();
            this.removeSticky();


            // compute boundary conditions
            this.origRightColumnPos = this.$rightColumn.offset(); // get the original (unsticky) pos



            var isRightColumnBigger = this.$leftColumn.outerHeight() - this.howLongRightRailStick < this.$rightColumn.outerHeight();




            // check boundary conditions to determine if scroll handler is needed
            if (isRightColumnBigger) {
                this.$window.off("scroll", this.scrollHandlerFunc);
            }
            else {
                this.$window.on("scroll", this.scrollHandlerFunc);
            }

            this.$window.trigger("scroll"); // jump

        };

        StickyRightColumn.prototype.refreshSticky = function () {
            this.scrollHandlerFunc = $.proxy(this.scrollHandler, this);
            // set / unset scrolling based on new height settings of the page's right and left columns
            this.setScrolling();
        };

        StickyRightColumn.prototype.scrollHandler = function () {


            var stickyPos = this.getStickyPos();
            var winScrollTop = this.$window.scrollTop();
            if (winScrollTop > this.origRightColumnPos.top - stickyPos) {
                this.addSticky();
            }
            else {
                this.removeSticky();
            }
        };

        StickyRightColumn.prototype.addSticky = function () {
            if (!this.$rightColumn)
                return;

            var stickyPos = this.getStickyPos();
            var winScrollTop = this.$window.scrollTop();
            var winScrollLeft = this.$window.scrollLeft();
            var stopHeightTop = this.stopHeightFromTop;
            var leftPos = this.origRightColumnPos.left - winScrollLeft;
            var bottomPos =  winScrollTop + stickyPos + this.getHeight();



            // compute the bottom position from the top height
            var stopHeightBottom = stopHeightTop + stickyPos + this.getHeight();



            if(bottomPos>=stopHeightBottom) {
                var offset = bottomPos - stopHeightBottom;
                topPos = (stickyPos - offset);
            }
            else {
                topPos = stickyPos;
            }

            this.$rightColumn.css({
                "position": "fixed",
                "top": topPos + "px",
                "z-index": "0"
            });
        };

        StickyRightColumn.prototype.removeSticky = function () {

            if (this.$rightColumn) {
                this.$rightColumn.css({
                    "position": "static"
                });
            }
        };

        StickyRightColumn.prototype.getHeight = function () {
            return (this.$rightColumn) ? this.$rightColumn.outerHeight() : 0;
        };

        StickyRightColumn.prototype.getWidth = function () {
            return (this.$rightColumn) ? this.$rightColumn.outerWidth() : 0;
        };

        StickyRightColumn.prototype.getStickyPos = function () {
            return (this.$adTagHeader && this.$adTagHeader.hasClass("stickHeader") == true) ? this.$adTagHeader.outerHeight() : 0;
        };

        // create the sticky right column control
        stickyRightColumn = new StickyRightColumn();
    }($));
    /* end stickyRightColumn behavior */

    /* begin rightColumn Lazy Load namespace */
    var rrLazyLoadAds = window.rrLazyLoadAds || {};
    rrLazyLoadAds = {
        adId: 0,                    // used to generate the id for the adslot
        adsContainerHeight: 1270,   // adcontainer height
        scrolldelay: 250,           // pauses scrolling so ads dont trigger when users scroll too quickly
        $llcontainer: null,         // caches the container holding the lazyloaded ad containers
        loadwaittime: 2000,         // time to wait before loading the ads after dfpRenderComp event
        seladheader: "",            // ad tag header container element selector
        seladright: "",             // ad tag right container element selector
        selleftcol: "",             // left column container element selector

    init: function(seladheader, seladright, selleftcol) {
            var self = this;
            if(self.init.flag)
                return;
            this.seladheader = seladheader;
            this.seladright = seladright;
            this.selleftcol = selleftcol;

            $(document).ready(function() {
                // add this container to account for sticky right column space
                $(self.seladright).wrap("<div id=\"sticky_rightcol\"></div>");
                $("#sticky_rightcol").after("<div id=\"ll-container\"></div>");
            });

            $(document).one("dfpRenderComp", function () {
                // after initial ads are loaded wait before setting up lazyloaded ads
                var timeoutid = setTimeout(function () {
                    $(window).resize(function () {
                        self.setupRightColumnSpace();
                        self.markVisibleContainers();
                    });
                    $(window).resize();
                    self.refresh();
                    clearTimeout(timeoutid);
                }, self.loadwaittime);
            });

            self.init.flag = true;
        },

        setupRightColumnSpace: function() {
            // determine how much space the stickyRR take including the space for sticky scrolling
            var stickyrrheight = $(this.seladright).outerHeight(true);
            var stickyrrsticklength = stickyRightColumn.howLongRightRailStick;
            var stickyheadheight = $(this.seladheader).outerHeight();
            var stickyrrspace = stickyrrheight + stickyrrsticklength + stickyheadheight + 40;
            $("#sticky_rightcol").css("height", stickyrrspace + "px");
            var llheight = $(this.selleftcol).height() - stickyrrspace;
            $('#ll-container').css("height", llheight + "px");
        },

        buildLLAdsContainers: function() {
            // determine the number of containers to build based on the height of the lazyload container
            var $llcontainer = $("#ll-container");
            $(".ll-ads-container").remove();
            var numofcontainers = Math.floor($llcontainer.outerHeight() / this.adsContainerHeight);
            for(var i=0; i<numofcontainers; i++)
                $llcontainer.append(this.buildLLAdsContainer(i));
        },

        buildLLAdsContainer: function(i) {
            var id122 = "ad_122_" + i + "_" + this.adId;
            var id910 = "ad_910_" + i + "_" + this.adId;
            var str = "<div id=\"ll-ads-container-"+i+"\"class=\"ll-ads-container\">";
            str += "<div id=\""+id122+"\" data-pos=\"122\" class=\"ll-ad-slot ll-ad-slot-122\"></div>";
            str += "<div id=\""+id910+"\" data-pos=\"910\" class=\"ll-ad-slot ll-ad-slot-910\"></div>";
            str += "</div>";
            this.adId++;
            return str;
        },

        isInViewport: function($el, trigger) {
            if(!$el || $el.length === 0)
                return false;
            var eltop = $el.offset().top;
            var elbottom = eltop + $el.height();
            var vptop = $(window).scrollTop();
            var vpbottom = vptop + $(window).height();
            return (eltop <= (vpbottom + trigger) && elbottom >= (vptop - trigger) )
        },

        isOverlapping: function($el1, $el2) {
            if(!$el1 || $el1.length === 0 || !$el1.is(':visible')
                || !$el2 || $el2.length === 0 || !$el2.is(':visible'))
                return false;
            var el1top = $el1.offset().top;
            var el1bottom = el1top + $el1.height();
            var el2top = $el2.offset().top;
            var el2bottom = el2top + $el2.height();
            return (el1top <= el2bottom && el1bottom >= el2top);
        },

        doLazyLoadOnScroll: function() {
            var self = this;
            // lazyload only the visible containers
            $(".ll-ads-container.is-visible").each(function() {
                var $container = $(this);
                var bisll = $container.hasClass("is-ll");
                if(!bisll && self.isInViewport($container, 250)) {
                    var adObj = {};
                    var $adslots = $container.find(".ll-ad-slot");
                    var sizes_122 = webmd.ads2.sizes['122'];
                    var sizes_910 = webmd.ads2.sizes['910']; // save the sizes
                    webmd.ads2.sizes['122'] = [[300, 250], [300, 251]];
                    webmd.ads2.sizes['910'] = [[300, 250], [300, 251]];

                    // don't load if container has no adslots
                    if($adslots.length == 0)
                        return;

                    // lazyload the adslots defined in the container
                    $adslots.each(function() {
                        var $adslot = $(this);
                        var id = $adslot.attr("id");
                        var pos = $adslot.attr("data-pos");
                        var prevsizes = webmd.ads2.sizes[pos];
                        $adslot.addClass("AdUnit");
                        webmd.ads2.defineAd({
                            id: id,
                            pos: pos,
                            refresh: false
                        });
                        adObj[id] = true;
                    });

                    if(typeof profads.ads2.pageAdVars !== "undefined") {
                        var lif = profads.ads2.pageAdVars['lif'];
                        if (lif !== undefined)
                            webmd.ads2.setPageTarget('lif', lif);
                    }
                    webmd.ads2.setPageTarget('ll', '1');
                    webmd.ads2.refresh({ id: adObj });
                    webmd.ads2.sizes['122'] = sizes_122;
                    webmd.ads2.sizes['910'] = sizes_910;    // restore the sizes
                    $container.addClass("is-ll"); // indicate the container was lazyloaded
                }
            });
        },

        refresh: function() {
            var self = this;
            $('#ll-container').css("height", 0 + "px");
            this.setupRightColumnSpace();
            this.buildLLAdsContainers();
            this.markVisibleContainers();
            $(window).off("scroll.doLazyLoadOnScroll").on("scroll.doLazyLoadOnScroll", function () {
                clearTimeout(self.rrlazyloadevent);
                self.rrlazyloadevent = setTimeout(function() {
                    self.doLazyLoadOnScroll();
                }, self.scrolldelay);
            });
        },

        markVisibleContainers: function() {
            var self = this;
            var $ad141 = $('div[id^="ads-pos-141"]:visible').first();
            var $rlinks = $("#rel-links");
            // tag any overlapping ads containers
            $(".ll-ads-container").each(function() {
                var $lladscontainer = $(this);
                if(self.isOverlapping($lladscontainer, $ad141) || self.isOverlapping($lladscontainer, $rlinks))
                    $lladscontainer.removeClass("is-visible");
                else $lladscontainer.addClass("is-visible");
            });
        }
    };

    var isiPad = navigator.userAgent.match(/iPad/i) != null;
    if ((locale == "us" && !isiPad) && (detectDevice() !== 'mobile'))
        rrLazyLoadAds.init("#adtagheader","#adcontainer_rightcol", "#leftcol");
    /* end rightColumn Lazy Load namespace */

    /*
    // dd = "drugs and disease", lazy load drug and diseases
    var ddLazyLoadAds;
    ddLazyLoadAds = window.ddLazyLoadAds || {};
    var _addId = 0; // counter for ads to make every ad unique

    ddLazyLoadAds = {
        adsAssumedHeight: 1020,
        marginUnderRightCol: 500,
        howLongRightRailStick : 251, // Accounting for how long right rail sticks
        hasFullReloadRun: false,
        numberOfLoadedAds:0,
        init: function (virtualPage) {
            var self = this;
            // Do a check to make sure nobody tries to run init twice per page load unless is a hashtag/virtual page reload
            if (self.init.flag) {
                if (!(virtualPage === "virtual_page")) {
                    return;
                }
            }

            if (virtualPage === "virtual_page" && !ddLazyLoadAds.hasFullReloadRun) {

                return;
            }

            ddLazyLoadAds.numberOfLoadedAds = 1;
            ddLazyLoadAds.hasFullReloadRun = true;
            self.init.flag = true;

            ddLazyLoadAds.ddLazyLoadAdsScrollHandler();



        },
        ddLazyLoadAdsScrollHandler: function () {
            ddLazyLoadAds.removeLazyLoadedAds(); // remove existing ads, if any
            $('#adcontainer_rightcol').children().last().css("margin-bottom",0); // reset margin
            var adArray = ddLazyLoadAds.getLazyLoadAdArrayPositions();
            if (adArray.length === 0) {

                $(window).off("scroll.addLazyLoadedAds");
                return; //quit page is too small for ad
            } else {
                $(window).off("scroll.addLazyLoadedAds").on("scroll.addLazyLoadedAds", function () {
                    ddLazyLoadAds.addLazyLoadedAds(adArray);
                });
            }

        },
        removeLazyLoadedAds: function () {
            // they have a special class
            $(".lazyLoaded-dd-ads").remove();


        },
        getLazyLoadAdArrayPositions: function () {

            var adArray = [];
            var rightColHeight = $('#adcontainer_rightcol').outerHeight() + ddLazyLoadAds.marginUnderRightCol;
            $('#adcontainer_rightcol').children().last().css("margin-bottom", ddLazyLoadAds.marginUnderRightCol);

            var leftContentHeight = $(".drugdbsectioncontent").outerHeight() - ddLazyLoadAds.howLongRightRailStick;

            var remainingSpaceForAds = leftContentHeight - rightColHeight;
            var numberOfPossibleAds = Math.floor(remainingSpaceForAds / ddLazyLoadAds.adsAssumedHeight);

            if (numberOfPossibleAds >= 1) {
                var firstAdPosition = Math.floor($("#adcontainer_rightcol").offset().top + rightColHeight);
                _addId++;

                adArray.push({
                    hasAdBeenLoaded: false,
                    id: 0,
                    positionOfAd: firstAdPosition
                });

                for (var i = 1; i < numberOfPossibleAds; i++) {
                    adArray.push({
                        hasAdBeenLoaded: false,
                        id: i,
                        positionOfAd: adArray[i - 1].positionOfAd + ddLazyLoadAds.adsAssumedHeight
                    });
                }

                return adArray;

            } else {
                return adArray;
            }
        },


        addLazyLoadedAds: function (adArray) {


            for (var i = 0; i < adArray.length; i++) {

                if (adArray[i].positionOfAd <= ($(window).scrollTop() + 250) && !(adArray[i].hasBeenLoaded)) {

                    adArray[i].hasBeenLoaded = true;

                    var ad_615_id = "ad_615_" + adArray[i].id + "_" + _addId;
                    var ad_319_id = "ad_319_" + adArray[i].id + "_" + _addId;

                    if (ddLazyLoadAds.is141AdInView(adArray[i].positionOfAd)) {
                        $("#adcontainer_rightcol").append('<div class="lazyLoaded-dd-ads skip-141"><div style="margin-bottom:250px; min-height:260px" id="' + ad_615_id + '"></div>' + '<div style="margin-bottom:250px; min-height:260px" id="' + ad_319_id + '"></div></div>');

                    }
                    else {

                        $("#adcontainer_rightcol").append('<div class="lazyLoaded-dd-ads"><div style="margin-bottom:250px" id="' + ad_615_id + '"></div>' + '<div style="margin-bottom:250px" id="' + ad_319_id + '"></div></div>');

                        webmd.ads2.defineAd({id: ad_615_id, pos: '615', refresh:false});
                        webmd.ads2.defineAd({id: ad_319_id, pos: '319', refresh:false});
                        var adObj = {};
                        adObj[ad_615_id] = true;
                        adObj[ad_319_id] = true;
                        webmd.ads2.setPageTarget('ll', 'rrll_'+(ddLazyLoadAds.numberOfLoadedAds++));
                        webmd.ads2.refresh({
                            id: adObj
                        });

                    }

                }
                // if we have loaded the last one then all has been loaded so kill off event
                else if (adArray[adArray.length - 1].hasBeenLoaded) {
                    $(window).off("scroll.addLazyLoadedAds");
                    relatedLinks.checkWidth();
                }
            }
        },

        // make sure it is not in view and not crossing each other
        is141AdInView: function (nextADOffsetTop) {

            var $ad141 = $('div[id^="ads-pos-141"]:visible').first(); // only one visible 141 on page
            if ($ad141.length === 0 || !$ad141.is(':visible')) {
                return false;
            }


            // to make sure 141 is not inview
            var $window = $(window);
            var docViewTop = $window.scrollTop();
            var docViewBottom = docViewTop + $window.height();
            var elemTop = $ad141.offset().top;
            var elemBottom = elemTop + $ad141.height();

            if (((elemBottom <= docViewBottom) && (elemTop >= docViewTop))) {

                return true; // yes 141 is inview do not load real ads
            }


            // to make sure 141 is not intersecting lazy loaded ads
            var ad141Bottom = $ad141.offset().top + $ad141.height();
            var nextAdBottom = nextADOffsetTop + ddLazyLoadAds.adsAssumedHeight;
            if (ad141Bottom > nextADOffsetTop && ad141Bottom < nextAdBottom) {

                return true; // yes 141 is intersecting lazy loaded ads do not load real ads
            }
            else{

                return false;
            }

        }

    };
    */

    /**  We need page to fully load to get correct height of drugdbsectioncontent **/
    //$(window).on('load', function () {
    //    ddLazyLoadAds.init();
    //});


    // Virtual Page logics

    var refreshStickyAndLoadLLAds;
    refreshStickyAndLoadLLAds = window.refreshStickyAndLoadLLAds || {};

    refreshStickyAndLoadLLAds = {
        initStickyAds: function(){
            stickyHead.stickyRefresh("virtual_page");
            setTimeout(function () {
             //   ddLazyLoadAds.init("virtual_page");
                rrLazyLoadAds.refresh();
            }, 2000);
        },
        //remove lazy loaded ads on virtual pages
        removeLazyLoadedAds: function (){
            //ddLazyLoadAds.removeLazyLoadedAds();
        }

    };
}




/* INLINE AD CODE */
var adLazyLoadEvent, trackScroll;
var lastPos = $(window).scrollTop();
var lastPosPV = $(window).scrollTop();


var scrTrackFirstSec = false;

var scrollEvents = {
    contentDivs:"",
    lastHash :0,
    hashNo : 1,
    lastPos: $(window).scrollTop(),
    init:function(){
        contentDivs = $('div[id^="content_"]');
        setTimeout(function(){
            $(window).on('scroll', function() {
                if(!thisIsDrug && breakpoint==1) {
                    clearTimeout(trackScroll);
                    clearTimeout(adLazyLoadEvent);
                    trackScroll = setTimeout("scrollEvents.trackPing()",1000);
                    adLazyLoadEvent = setTimeout("scrollEvents.adLazyLoad()",250);
                }
            });
        },500);
        return this;
    },
    trackPing:function(){
        $(contentDivs).each(function(i, el) {
            if($(window).scrollTop() <= $(contentDivs).eq(0).offset().top && i==0) {
                //  console.log('change1')
            }
            if (($(this).offset().top <= $(window).scrollTop()-$(".h1title").height() && $(this).offset().top+$(this).outerHeight() >= $(window).scrollTop()-$(".h1title").height()) ||
                ($(window).scrollTop() <= $(contentDivs).eq(0).offset().top && i==0) &&
                (!hashClicked) && scrTrackFirstSec) {
                if (hashPos <= $(window).scrollTop() - 100 || hashPos >= $(window).scrollTop() + 100) {
                    var a = ($(this).attr('id')).split('_');
                    if (document.location.hash.split("#")[1] != a[1]) {

                        //        console.log("omniPing-" + a[1] + "-0"); ///FIX for first section
                        if(typeof(document.location.hash.split("#")[1])!="undefined") {
                            BItrack(a[1] + '-0');
                            scrollEvents.hashNo = 1;
                            if (lastPos < $(window).scrollTop()) {
                                wmdTrack('cr-scrdnsub_0');
                                wmdPageview(trackurl + '#' + a[1] + '-0', '0');
                                //          console.log("scroll down")
                            } else {
                                wmdTrack('cr-scrupsub_0');
                                wmdPageview(trackurl + '#' + a[1] + '-0', '0');
                                //         console.log("scroll up")
                            }
                        }
                        document.location.hash = a[1];
                    } else {
                        //	console.log("omniPing-samesection");

                    }
                }
            } else {
                if(!scrTrackFirstSec && ($(window).scrollTop() >= $(contentDivs).eq(0).offset().top)){scrTrackFirstSec=true;}
            }
        });
        if(document.location.hash.split("#")[1] == lastHash){
            var factor = 1.5;
            if(lastPosPV+$(window).height()*factor < $(window).scrollTop()){
                wmdTrack('cr-scrdn_'+scrollEvents.hashNo);
                wmdPageview(trackurl+'#'+lastHash+'-'+scrollEvents.hashNo,scrollEvents.hashNo);
                BItrack(lastHash+'-'+scrollEvents.hashNo);
                scrollEvents.hashNo = scrollEvents.hashNo+1;
            } else {
                if(lastPosPV-$(window).height()*factor > $(window).scrollTop()){
                    wmdTrack('cr-scrup'+'_'+scrollEvents.hashNo);
                    wmdPageview(trackurl+'#'+lastHash+'-'+scrollEvents.hashNo,scrollEvents.hashNo);
                    BItrack(lastHash+'_'+scrollEvents.hashNo);
                    scrollEvents.hashNo = scrollEvents.hashNo+1;
                }
            }
            if(lastPosPV+$(window).height()*factor < $(window).scrollTop() || lastPosPV-$(window).height()*factor > $(window).scrollTop()) {
                lastPosPV = $(window).scrollTop();
            }
        } else {
            lastPosPV = $(window).scrollTop();
        }
        //   if ($(window).scrollTop()<40 && !$("#ads-pos-1004").is(":visible")){ // Show leaderboard on top of page
        if (lastPos > $(window).scrollTop() && $(window).scrollTop()<40 && !$("#ads-pos-1004").is(":visible")){ // Show leaderboard on top of page

            $("#ads-pos-1004").show();
            delete window.ads2_ignore["1004"];
            webmd.ads2.refresh({pos:{1004:true}, keys:{pvid:s_pageview_id,ep:'0'}});
        }
        lastPos= $(window).scrollTop();
        lastHash = document.location.hash.split("#")[1];
        return this;
    },
    adLazyLoad:function(){
        if (lastPos < $(window).scrollTop()) {
            scrollEvents.scrlAdCall('scrollDown');
        } else if (lastPos > $(window).scrollTop()) {
            scrollEvents.scrlAdCall('scrollUp');
        }
        return this;
    },
    scrlAdCall:function(dir){
        var classInConAd = $(".inContentAd");
        classInConAd.each(function(i, el){
            // if ($(this).is(":visible")){
            if(scrollEvents.scrollIntoView(el)) {
                var adID= el.id;
                var adloc = trackurl.split("-")[1]+"_"+adID.split("-")[2];
                if (dir == "scrollDown") {
                    if (!classInConAd.eq(i+1).hasClass('currentAdDiv') && !classInConAd.eq(i+1).hasClass('noAdDiv')) {
                        classInConAd.not(':eq(i+1)').removeClass('currentAdDiv');
                        classInConAd.eq(i+1).addClass('currentAdDiv AdUnit');
                        var adID= classInConAd.eq(i+1).attr('id');
                        classInConAd.eq(i).addClass('noAdDiv');
                        classInConAd.eq(i+2).addClass('noAdDiv');
                        classInConAd.eq(i+3).addClass('noAdDiv');
                        if (!$(".currentDiv").html() && !$(adID).hasClass("noAdDiv") && typeof adID !== "undefined") {
							webmd.ads2.setPageTarget('ep', '0');
                            webmd.ads2.setPageTarget('al', adloc);
                            webmd.ads2.defineAd({
                                id: adID,
                                pos: '1122',
                                immediate: true,
                                collapseAfter: true
                            });
                        }

                    }
                } else {
                    if (!classInConAd.eq(i+1).hasClass('currentAdDiv') && !classInConAd.eq(i+1).hasClass('noAdDiv')) {
                        classInConAd.not(':eq(i+1)').removeClass('currentAdDiv');
                        classInConAd.eq(i+1).addClass('currentAdDiv AdUnit');
                        var adID= classInConAd.eq(i+1).attr('id');
                        classInConAd.eq(i).addClass('noAdDiv');
                        classInConAd.eq(i+2).addClass('noAdDiv');
                        classInConAd.eq(i+3).addClass('noAdDiv');
                        if (!$(".currentDiv").html() && !$(adID).hasClass("noAdDiv") && typeof adID !== "undefined") {
							webmd.ads2.setPageTarget('ep', '0');
                            webmd.ads2.setPageTarget('al', adloc);                              //webmd.ads2.defineAd({id:'+adID+', pos:'1122', immediate:true});
                            webmd.ads2.defineAd({
                                id: adID,
                                pos: '1122',
                                immediate: true,
                                collapseAfter: true
                            });
                        }

                    }
                }
            }
            //  }
        });
        return this;
    },
    scrollIntoView:function(elem) {
        var $elem = $(elem);
        var $window = $(window);

        var docViewTop = $window.scrollTop();
        var docViewBottom = docViewTop + $window.height();

        var elemTop = $elem.offset().top;
        var elemBottom = elemTop + $elem.height();

        return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
    }
}
var admove={
    adHashInit:function(hashtoshow) {
        if (typeof profads !== "undefined" && typeof webmd.ads2.display !== "undefined" && profads.ads2.KillSwitch()) {


            if ($('#' + hashtoshow + ' #ads-pos-1122').length > 0) {
            }
            else {
                $("#ads-pos-1004").hide();


                delete window.ads2_ignore["1122"];

                /*if ($('#' + hashtoshow + ' .inContentAd').length == 0) {
                 var nextId = $('#' + hashtoshow).next().attr('id');
                 if($('#' + nextId + ' .inContentAd').length != 0) {
                 $('#' + nextId + ' .inContentAd').eq(0).addClass("first1122");
                 $('#' + nextId + ' .inContentAd').eq(0).html('<div id="ads-pos-1122" class="AdUnit"></div>');
                 }
                 }else {*/

                var iRel = 3;
                if ($('#ads-pos-1420').length > 0) {
                    $("#ads-pos-1420").replaceWith('<div class="inContentAd" id="ads-pos-c1_1420" rel="'+iRel+'"></div>');
                    iRel--
                }
                if ($('#ads-pos-1520').length > 0) {
                    $( "#ads-pos-1520" ).replaceWith( '<div class="inContentAd" id="ads-pos-c1_1520" rel="'+iRel+'"></div>' );
                    iRel--
                }
                if ($('#ads-pos-1122').length > 0) {
                    $( "#ads-pos-1122" ).replaceWith( '<div class="inContentAd" id="ads-pos-c1_1122" rel="'+iRel+'"></div>' );
                    iRel--
                }

                var hashShowinCon = $('#' + hashtoshow + ' .inContentAd');

                hashShowinCon.eq(0).addClass("first1122 currentAdDiv");
                hashShowinCon.eq(0).html('<div id="ads-pos-1122_'+i141+'" class="AdUnit"></div>');
                //}
                //    hashShowinCon.eq(0).addClass("first1122");


                var nextAdBlk = parseInt(hashShowinCon.eq(0).attr('rel'), 10) + 1;
                //var next2AdBlk = parseInt(hashShowinCon.eq(0).attr('rel'), 10) + 2;
                var prevAdBlk = parseInt(hashShowinCon.eq(0).attr('rel'), 10) - 1;
                //var prev2AdBlk = parseInt(hashShowinCon.eq(0).attr('rel'), 10) - 2;

                $(".inContentAd[rel='" + nextAdBlk + "']").addClass('noAdDiv');
                //$(".inContentAd[rel='" + next2AdBlk + "']").addClass('noAdDiv');
                $(".inContentAd[rel='" + prevAdBlk + "']").addClass('noAdDiv');
                //$(".inContentAd[rel='" + prev2AdBlk + "']").addClass('noAdDiv');

                if ($('#ads-pos-1122_'+i141).length > 0) {
                    webmd.ads2.defineAd({
                        id: 'ads-pos-1122_'+i141,
                        pos: '1122',
                        collapseAfter: true,
                        refresh: false
                    });
                } else {
                    $('<div id="ads-pos-1122_'+i141+'" class="AdUnit"></div>').insertAfter($("#drugdbmain"));
                    if ($('#ads-pos-1122_'+141).length > 0) {
                        webmd.ads2.defineAd({
                            id: 'ads-pos-1122_'+i141,
                            pos: '1122',
                            collapseAfter: true,
                            refresh: false
                        });
                    }
                }

                scrTrackFirstSec = true;
                webmd.ads2.display();
                webmd.ads2.refresh({pos:{1122:true, 1005:true}});
                //profads.ads2.ResizeTemplateAds(true);
                lastPos = $(window).scrollTop();
            }
        }
    }
}


function clear141() {
    $('.adSpcHolder').each(function( index ) {
        if ($(this).attr('id') != 'plcHold-141') {
            if ($(this).find(">:first-child").attr('id').indexOf('ads-pos-141') !== -1) {
                $(this).remove();
            }
        }
    });

    $('#plcHold-141').empty();

    for(key in webmd.ads2.ads) {
        if(webmd.ads2.ads.hasOwnProperty(key)){
            if(key.indexOf("ads-pos-141") !== -1){
                delete webmd.ads2.ads[key];
            }
        }
    }
    
}


//Clear the existing 420 ad
function clear420(){
    $('.txtAd420SpcHolder').each(function( index ) {
        if ($(this).attr('id') != 'plcHold-420') {
            if ($(this).find(">:first-child").attr('id').indexOf('ads-pos-420') !== -1) {
                $(this).remove();
            }
        }
    });

    $('#plcHold-420').empty();

    for(key in webmd.ads2.ads) {
        if(webmd.ads2.ads.hasOwnProperty(key)){
            if(key.indexOf("ads-pos-420") !== -1){
                delete webmd.ads2.ads[key];
            }
        }
    }
}


/* Clear existing 520 Ad */
function clear520(){
    $('.txtAd520SpcHolder').each(function( index ) {
        if ($(this).attr('id') != 'plcHold-520') {
            if ($(this).find(">:first-child").attr('id').indexOf('ads-pos-520') !== -1) {
                $(this).remove();
            }
        }
    });

    $('#plcHold-520').empty();

    for(key in webmd.ads2.ads) {
        if(webmd.ads2.ads.hasOwnProperty(key)){
            if(key.indexOf("ads-pos-520") !== -1){
                delete webmd.ads2.ads[key];
            }
        }
    }
}


/* Desk-top Hash to place ads */
var DesktopAdMove={
    adHashInit:function(hashtoshow, pbData) {
        if (typeof profads !== "undefined" && typeof webmd.ads2.display !== "undefined" && profads.ads2.KillSwitch()) {
            if (typeof pbData !== "undefined") {
                
                clear141();
                clear520();
                clear420();
                if ($('.currentContent .refsection_content').has('#plcHold-141').length == 0) {
                    

                    var secIdName = $('.currentContent').attr('id');
                    var secIdVal = [];
                    secIdVal = $('.currentContent').attr('id').split('_');
                    var newAdID = "ads-pos-141_"+secIdVal[1]+'_'+i141;
                    var adObjN = {};
                    
                    
                    /* Start 520 Ad */
                    if ($('.currentContent .refsection_content').has('#ads-pos-520').length != 0) {
                        adObjN['ads-pos-520'] = true;
                    } else {
                        var new520ID = "ads-pos-520_" + secIdVal[1] + '_' + i141;
                        var inConSecObj520 = $("#" + secIdName + " div.inContentAd:eq( 3 )");
                        if (inConSecObj520 !== 0) {
                            inConSecObj520.append('<div class="txtAd520SpcHolder"> <div class="AdUnit inLine520" id="' + new520ID + '"></div></div>');
                            delete window.ads2_ignore["520"];
                            webmd.ads2.defineAd({id: new520ID, pos: '520', refresh: false});
                            adObjN[new520ID] = true;
                        }
                    }
                    /* End 520 Ad inclusion */
                    
                    var inConSecObj = $("#" + secIdName + " div.inContentAd:eq( 7 )");
                    if (inConSecObj.length != 0) {
                        var inAdPos = inConSecObj.position();
                        if (profads.ads2.adCollideTest(inAdPos)) {
                            webmd.ads2.setPageTarget('al', 'bl_mid');
                            $("#rel-links").prepend('<div class="adSpcHolder"><div id="' + newAdID + '" class="inLine141 AdUnit"></div></div>');
                        } else {
                            webmd.ads2.setPageTarget('al', 'bl_high');
                            inConSecObj.append('<div class="adSpcHolder"><div id="' + newAdID + '" class="inLine141 AdUnit"></div></div>');
                        }
                    } else {
                        webmd.ads2.setPageTarget('al', 'bl_low');
                        $("#rel-links").prepend('<div class="adSpcHolder"><div id="' + newAdID + '" class="inLine141 AdUnit"></div></div>');
                    }
                    
                    /* Start 141 Ad */
                    delete window.ads2_ignore["141"];
                    
                    if(!lazyLoadBlbVP.should141LazyLoad()){
                        webmd.ads2.defineAd({id: newAdID, pos: '141', refresh:false});
                        adObjN[newAdID] = true;
                    }
                    /* End 141 Ad inclusion */
                    
                    
                    /* Start 420 Ad */
                    var new420ID = "ads-pos-420_" + secIdVal[1] + '_' + i141;
                    var $141Parent = $('div[id^="ads-pos-141"]').closest(".inContentAd");
                    var $4thEle = $141Parent.nextAll(".inContentAd").eq(3);//4th element after 141
                    if ($4thEle.length !== 0) {
                        $4thEle.append('<div class="txtAd420SpcHolder"> <div class="AdUnit inLine420" id="' + new420ID + '"></div></div>');
                        delete window.ads2_ignore["420"];
                        webmd.ads2.defineAd({id: new420ID, pos: '420', refresh: false});
                        adObjN[new420ID] = true;
                    }
                    /* End 420 Ad inclusion */
                    

                    
                    adObjN['ads-pos-101'] = true;
                    adObjN['ads-pos-122'] = true;
                    adObjN['ads-pos-910'] = true;
                    

                    webmd.ads2.setPageTarget('pvid', s_pageview_id);
                    webmd.ads2.setPageTarget('ep', '0');
                    webmd.ads2.setPageTarget('pb', pbData);
                    webmd.ads2.setPageTarget('ll', '0');

                    webmd.ads2.refresh({
                        id: adObjN
                    });
                  
                    
                } else {
                    
                    var adObjN = {};
                    
                    /* Start 520 Ad */
                    if ($('.currentContent .refsection_content ').has('#ads-pos-520').length !== 0) {
                        adObjN['ads-pos-520'] = true;
                    } else {
                        var new520ID = "ads-pos-520_" + i141;

                        $('#plcHold-520').append('<div class="AdUnit inLine520" id="' + new520ID + '"></div>');
                        $('#plcHold-520').addClass('txtAd520SpcHolder');
                        delete window.ads2_ignore["520"];
                        webmd.ads2.defineAd({id: new520ID, pos: '520', refresh: false});
                        adObjN[new520ID] = true;

                    }
                    /* End 520 Ad inclusion */


                    var inAdPos = $('#plcHold-141').position();

                    if (profads.ads2.adCollideTest(inAdPos)) {
                        webmd.ads2.setPageTarget('al', 'bl_mid');
                        $("#rel-links").prepend('<div class="adSpcHolder"><div id="ads-pos-141_'+i141+'" class="inLine141 AdUnit"></div></div>');
                    } else {
                        webmd.ads2.setPageTarget('al', 'bl_high');
                        $('#plcHold-141').append('<div id="ads-pos-141_'+i141+'" class="inLine141 AdUnit"></div>');
                        $('#plcHold-141').addClass('adSpcHolder');
                    }

                    
                    /* Start 141 Ad */
                    delete window.ads2_ignore["141"];

                    if (!lazyLoadBlbVP.should141LazyLoad()) {
                        webmd.ads2.defineAd({id: 'ads-pos-141_'+i141, pos: '141'});
                        adObjN['ads-pos-141_'+i141] = true;
                    }
                    /* End 141 Ad inclusion */
                    
                    
                    
                    adObjN['ads-pos-101'] = true;
                    adObjN['ads-pos-122'] = true;
                    adObjN['ads-pos-910'] = true;
                    

                    /* Start 420 Ad */
                    if ($('.currentContent .refsection_content').has('#ads-pos-420').length != 0) {
                        adObjN['ads-pos-420'] = true;
                    } else {

                        var new420ID = "ads-pos-420_" + i141;
                        $('#plcHold-420').append('<div class="AdUnit inLine420" id="' + new420ID + '"></div>');
                        $('#plcHold-420').addClass('txtAd420SpcHolder');
                        delete window.ads2_ignore["420"];
                        webmd.ads2.defineAd({id: new420ID, pos: '420', refresh: false});
                        adObjN[new420ID] = true;

                    }
                    /* End 420 Ad inclusion */
                    

                    webmd.ads2.setPageTarget('pvid', s_pageview_id);
                    webmd.ads2.setPageTarget('ep', '0');
                    webmd.ads2.setPageTarget('pb', pbData);
                    webmd.ads2.setPageTarget('ll', '0');

                    webmd.ads2.refresh({
                        id: adObjN
                    });

                }
            } else {
                if ($("#" + hashtoshow + " .refsection_content").has('#plcHold-141').length == 0) {

                    clear141();
                    clear520();
                    clear420();
                    
                    var secIdName = hashtoshow;
                    var secIdVal = [];
                    secIdVal = secIdName.split('_');
                    var newAdID = "ads-pos-141_"+secIdVal[1]+'_'+i141;

                    clear141();
                    
                    var adObjN = {};
                    
                    /* Start 520 Ad */
                    var new520ID = "ads-pos-520_" + secIdVal[1] + '_' + i141;
                    var inConSecObj520 = $("#" + hashtoshow + " .refsection_content div.inContentAd:eq( 3 )");
                    if (inConSecObj520 !== 0) {
                        inConSecObj520.append('<div class="txtAd520SpcHolder"> <div class="AdUnit inLine520" id="' + new520ID + '"></div></div>');
                        delete window.ads2_ignore["520"];
                        webmd.ads2.defineAd({id: new520ID, pos: '520', refresh: false});
                        adObjN[new520ID] = true;
                    }
                    /* End 520 Ad inclusion */


                    var inConSecObj = $("#" + secIdName + " div.inContentAd:eq( 7 )");
                    if (inConSecObj.length != 0) {
                        var inAdPos = inConSecObj.position();
                        if (profads.ads2.adCollideTest(inAdPos)) {
                            webmd.ads2.setPageTarget('al', 'bl_mid');
                            $("#rel-links").prepend('<div class="adSpcHolder"><div id="' + newAdID + '" class="inLine141 AdUnit"></div></div>');
                        } else {
                            webmd.ads2.setPageTarget('al', 'bl_high');
                            inConSecObj.append('<div class="adSpcHolder"><div id="' + newAdID + '" class="inLine141 AdUnit"></div></div>');
                        }

                    } else  {
                        webmd.ads2.setPageTarget('al', 'bl_low');
                        $("#rel-links").prepend('<div class="adSpcHolder"><div id="' + newAdID + '" class="inLine141 AdUnit"></div></div>');
                    }

                    
                    /* Start 141 Ad */
                    delete window.ads2_ignore["141"];

                    if (!lazyLoadBlbVP.should141LazyLoad()) {
                        webmd.ads2.defineAd({id: newAdID, pos: '141', refresh: false});
                        adObjN[newAdID] = true;
                    }
                    /* End 141 Ad inclusion */
                    
                    
                    
                    /* Start 420 Ad */
                    var new420ID = "ads-pos-420_" + secIdVal[1] + '_' + i141;
                    var $141Parent = $('div[id^="ads-pos-141"]').closest(".inContentAd");
                    var $4thEle = $141Parent.nextAll(".inContentAd").eq(3);//4th element after 141
                    if ($4thEle.length !== 0) {
                        $4thEle.append('<div class="txtAd420SpcHolder"> <div class="AdUnit inLine420" id="' + new420ID + '"></div></div>');
                        delete window.ads2_ignore["420"];
                        webmd.ads2.defineAd({id: new420ID, pos: '420', refresh: false});
                        adObjN[new420ID] = true;
                    }
                    /* End 420 Ad inclusion */
                    
                    adObjN['ads-pos-101'] = true;
                    adObjN['ads-pos-122'] = true;
                    adObjN['ads-pos-910'] = true;
                    webmd.ads2.display();
                    webmd.ads2.refresh({
                        id: adObjN
                    });
                   
                } else {
                     
                    var inAdPos = $("#plcHold-141").position();
                    webmd.ads2.setPageTarget('al', 'bl_high');
                    if (profads.ads2.adCollideTest(inAdPos)) {
                        webmd.ads2.setPageTarget('al', 'bl_mid');
                        $("#plcHold-141").remove();
                        $("#rel-links").prepend('<div class="adSpcHolder"><div id="ads-pos-141" class="AdUnit"></div></div>');
                    }
                    
                    lazyLoadBlbVP.should141LazyLoad();
                    

                    window.ads2_ignore = {};
                    webmd.ads2.display();
                    webmd.ads2.refresh();
                    
                }
            }

            i141++;
        }
    }
};

/* (START) Lazyloading Blb for Pfizer brands only on virtual pages */
var lazyLoadBlbVP;
lazyLoadBlbVP = window.lazyLoadBlbVP || {};
lazyLoadBlbVP = {
    lazyloaded: false,
    should141LazyLoad:function(){
        lazyLoadBlbVP.lazyloaded = false;
        // if is Pfizer brands
        if (DFPTargetKeys.lazyLoad != null) {
            if (DFPTargetKeys.lazyLoad.blb != null) {
                if (DFPTargetKeys.lazyLoad.blb && bNews) {

                    lazyLoadBlbVP.lazyloaded = true;

                    // wait for virtual page to calculate it's height;
                    setTimeout(function () {
                        window.ads2_ignore["141"] = "true";
                        lazyLoadBlb.init();
                    }, 2000);
                }

            }
        }

        if(!lazyLoadBlbVP.lazyloaded){
            return false;
        }
        else{
            return true;
        }

    }

};
/* (END) LazyLoading Blb for virtual pages */





/* (END) Desk-top Hash to place ads */
/* (END INLINE AD CODE) */
function refreshMedscapeAds(wmdT1Value) {
    if (typeof profads !== "undefined" && typeof webmd.ads2.display !== "undefined" && profads.ads2.KillSwitch()) {
        if ((locale == "us" && !isiPad) && (detectDevice() !== 'mobile')) {
            refreshStickyAndLoadLLAds.removeLazyLoadedAds(); // remove existing lazy loaded ads if any
        }

        $(document).one("refreshMedAds", {
            wmdT1: wmdT1Value
        }, function (event, pbData) {
            DesktopAdMove.adHashInit(wmdT1Value, pbData);
        });
        var isiPad = navigator.userAgent.match(/iPad/i) != null;
        device = detectDevice();
        if ((locale == "us" && !isiPad) && (detectDevice() !== 'mobile') ) {
            refreshStickyAndLoadLLAds.initStickyAds(); // initialiazed sticky header behaviour for desktop and tablets
        }
        profads.ads2.medscapeRefresh();
    }
}

function AdPageRefresh(wmdPVv1, wmdPVv2, wmdTv1,sectionID) {
    $( document).one( "pvidReset", {
        wmdPV1: wmdPVv1,
        wmdPV2: wmdPVv2,
        wmdT: wmdTv1
    }, function( event ) {
        if (typeof profads !== "undefined" && typeof webmd.ads2.display !== "undefined" && profads.ads2.KillSwitch()) {
            $("body >*").each(function () {
                if (($(this).attr('id') != 'bodypadding') && ($(this).attr('id') != 'headerbox') && ($(this).attr('id') != 'footercontents') && ($(this).attr('id') != 'adtagheader') && ($(this).attr('id') != 'vpFrame') ) {
                    $(this).remove();
                }
            });
            if (breakpoint === 1) {
            }
            else {
                refreshMedscapeAds(wmdTv1);
            }
            profads.ads2.ResizeTextAds();
        }
        wmdTrack(event.data.wmdT);
        wmdPageview(event.data.wmdPV1,event.data.wmdPV2);
    });
    GenPVID();
}
var refVideoPlayer = {
    init: function () {
        var $videoConfigEle = $('.video-container, .multimedia'), mediaGalleryFlag = true;
        window.videoPlayer = new Array($videoConfigEle.length);
        $videoConfigEle.each(function (index, el) {
            videoConfigData.push($(this).data());
        });
        if($('.video-container').length > 0){
            $('.video-container').each(function(i, el) {
                videoPlayer[i] = new SA();
                videoPlayer[i].create(el, i);
            });
        }
        $('.multimedia_link, .galleryLink, .inlineImage a').on('click', function () {
            if (mediaGalleryFlag) {
                var newIndex = $videoConfigEle.length - $('.video-container').length;
                if($('.video-container').length === 0){
                    newIndex = 0;
                }
                $('.multimedia').each(function (index, el) {
                    videoPlayer[newIndex] = new SA();
                    videoPlayer[newIndex].create(el, newIndex);
                    newIndex = newIndex + 1;
                    mediaGalleryFlag = false;
                });
            }
        });
    }
}

function knowledgeBase () {
    $('#refknowledge-source').click(function () {
        wmdTrack('cr-src_art');
    });
    $('.refknowledge-consult a').click(function () {
        wmdTrack('cr-cslt_ask');
    });

    // if user is logged in and is a health care provider, show feedback form
    if (qrllog === '1' && ['0', '16', '17', '19'].indexOf(DFPTargetKeys.userSegVars.pf) === -1) {
        var $survey = $('#surveyIncompleted');
        var $message = $('#surveyCompleted');
        var $button = $('#surveySubmit');
        var token = location.pathname.split('/').pop() + emailThis.senderEmail;

        if (localStorage.getItem(token)) {
            $message.show();
            $survey.hide();
        } else {
            $button.prop('disabled', true);

            $('#yes, #no').change(function () {
                $button.prop('disabled', false);
            })

            $button.click(function () {
                var option = $('#yes').is(':checked');
                option === true ? wmdPageLink('cr-sv_yes') : wmdPageLink('cr-sv_no');
                option = (option === true ? 'Yes': 'No');
                var url = '//api.' + window.getDomain() + 'medscape.com/servicegateway/v2/auth/notificationservice/emailthis';

                var data = {
                    workflow: 'medscape_ba_sharethis',
                    toEmailId: ['MedscapeQA@webmd.net'],
                    params: {
                        senderName: emailThis.senderName,
                        senderEmail: emailThis.senderEmail,
                        locale: 'en_us',
                        pubName: emailThis.publicationName,
                        pubDate: emailThis.publicationDate,
                        subject: emailThis.title.substr(0, 70),
                        linkURL: window.location.href,
                        contentTitle: emailThis.title.substr(0, 70),
                        contentId: DFPTargetKeys.pageSegVars.art,
                        specialtyId: DFPTargetKeys.pageSegVars.ssp,
                        isCme: 0,
                        professionId: DFPTargetKeys.userSegVars.pf,
                        message: '<b>Title</b>: ' + $('h1').eq(0).text() + '<br><b>Helpful?</b>: ' + option + ' <br><b>Feedback</b>: ' + $('#surveyFeedback').val()
                    }
                };

                $.ajax({
                    type: 'POST',
                    url: url,
                    data: JSON.stringify(data),
                    contentType: 'application/json;charset=utf-8',
                    xhrFields: {
                        withCredentials: true
                    }
                }).done(function(data){
                    wmdPageLink('cr-sv_submit');
                    if (data.messages[0] === 'success') {
                        $message.show();
                        $survey.hide();
                        localStorage.setItem(token, true);
                    }
                });
            })
        }
    } else {
        $('.refknowledge-survey').remove();
    }

    var match = /.+answers\/([\d]+)-([\d]+)\/.+/.exec(location.pathname);
    var legacyId = match[1];
    var questionId = match[2];
    var noOfQuestions = Math.random() > 0.5 ? 2 : 3;
    var url =  '//api.' + getDomain() + 'medscape.com/contentmetadataservice/getRelatedQuestions/' + legacyId + '/' + questionId + '/' + noOfQuestions;
    $.get(url)
        .then(function (data) {
            var html = '<ul>';
            var title = '';
            var questionNo = 1;
            for (var question in data) {
                if (data.hasOwnProperty(question)) {
                    title = question;
                    url = '/answers/' + legacyId + '-' + data[question] + '/' + title.toLowerCase().replace(/[\s()?*,.]+/g, '-').replace(/-+$/g, '');
                    html += '<li><a onclick="wmdTrack(\'rl-qna' + questionNo++ + '\')" href="' + url + '">' + title + '</a></li>';
                }
            }
            html +='<li><br><a href="' + $('.breadcrumb').children().last().attr('href') + '">View All Related Questions &gt;</a></li>';
            html += '</ul>';
            $('#rel-qna').find('ul').replaceWith(html);
            $('#rel-qna').show();
        });
}

/* (START) Sticky Header 1004 Ad */
if(breakpoint == 1) {
    (function ($) {
        function StickyMobileHead() {
            this.stopStickyTime = 5000;
            this._timerHandler = this.timerHandler.bind(this);
        };

        StickyMobileHead.prototype.init = function () {
            var self = this;
            this.$adtagheader = $(".mobile_adlabelleft");
            if (this.$adtagheader.length === 0) return;
            this.$window = $(window);
            this.originalAdHeight = this.$adtagheader.outerHeight() + 50;
            this.originalTopAdTop = this.$adtagheader.offset().top;
            webmd.ads2.addSlotRenderEndedCallback("ads-pos-1004", this._timerHandler);
            $(document).on("animationOffStickStep", function(){
                var top = $("#ads-pos-1004").outerHeight(true);
                if(top <= 0) top = 0;
                console.log("step: " + top);
                $(".fixed-sticky").css("top", top + "px");
                $(".fixedsticky, .fixedstickyIos-on").css("top", (50 + top) + "px");
            });
            this.addSticky();
        };

        StickyMobileHead.prototype.timerHandler = function () {
            var self = this;
            var timerid = setTimeout(function () {
                self.animationOffSticky();
                clearTimeout(timerid);
            }, this.stopStickyTime);
        };

        StickyMobileHead.prototype.isSticky = function() {
            var pos = $("#headerbox").offset().top + $("#headerbox").outerHeight(true);
            return (this.$adtagheader.offset().top > pos);
        };

        StickyMobileHead.prototype.addSticky = function () {
            this.$adtagheader.addClass("stickyHeader");
            $("body").addClass("stickyHeader");
            $(document).trigger("addSticky");
        };

        StickyMobileHead.prototype.removeSticky = function () {
            this.$adtagheader.removeClass("stickyHeader");
            $("body").removeClass("stickyHeader");
        };

        StickyMobileHead.prototype.animationOffSticky = function () {
            var self = this;
            if(this.isSticky()) {
                $("#ads-pos-1004").slideUp({
                    duration: "slow",
                    step: function() {
                        $(document).trigger("animationOffStickStep");
                    },
                    complete: function () {
                        self.removeSticky();
                        $("#ads-pos-1004").show();
                    }
                }); // end slideUp()
            } // end if
            else self.removeSticky();
        };

        StickyMobileHead.prototype.disableSticky = function () {
            this.removeSticky();
        };

        // create a new instance
        stickyHead = new StickyMobileHead();
    }($));
} // end if(breakpoint==1)
/* (END) Sticky Header 1004 Ad */
function medsimsPOC(){
    var POCartID = "232915,1169489,1168529,1165941,1165557,1142556,1142459,1142908,2110861,792384";
    if(POCartID.indexOf(ref_contentId) != -1 && trackurl.indexOf("overview")!= -1){
        var imgURL = "https://img."+getDomain()+"medscapestatic.com/pi/medsims/tn_medsims.jpg";
        var linkURL = "https://live3.medsims.com/editorial00/simulation/index/";
        var capt = '<a href="'+linkURL+'" onclick="wmdPageLink(\'cr-medsims_pilot\')" target="_blank" style="background:none; display:inline-block; width:auto">How would you treat this patient with headaches?</a> Medscape Patient Case Simulations help you make point-of-care decisions related to recognition, assessment, diagnosis, and treatment in a safe virtual environment.';
        var html = '<div class="inlineImage"><a onclick="wmdPageLink(\'cr-medsims_pilot\')" href="'+ linkURL +'" target="_blank" style="background:none"><img src="'+ imgURL+'" /></a><span class="capt">'+ capt +'</span></div>';
        $(".refsection_content").eq(0).append(html);
    }
}
